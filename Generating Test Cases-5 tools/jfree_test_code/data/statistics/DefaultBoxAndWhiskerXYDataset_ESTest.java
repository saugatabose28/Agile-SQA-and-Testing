/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:18:56 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultBoxAndWhiskerXYDataset_ESTest extends DefaultBoxAndWhiskerXYDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(3199.245231);
      defaultBoxAndWhiskerXYDataset0.clone();
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable1 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.setNotify(false);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset1.setFaroutCoefficient(425.5015913162);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset0);
      defaultBoxAndWhiskerXYDataset1.addChangeListener((DatasetChangeListener) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset2 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset1.clone();
      defaultBoxAndWhiskerXYDataset2.addChangeListener((DatasetChangeListener) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset3 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset3.removeChangeListener((DatasetChangeListener) null);
      defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(false);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(0.0);
      defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient();
      defaultBoxAndWhiskerXYDataset0.getSeriesCount();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset2.getItem(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.getItemCount(1976);
      defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(5.0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(datasetChangeListener0);
      defaultBoxAndWhiskerXYDataset0.getRangeUpperBound(false);
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(datasetChangeListener1);
      defaultBoxAndWhiskerXYDataset0.getSeriesKey((-1));
      defaultBoxAndWhiskerXYDataset0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(true);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      int int0 = (-1533916891);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset1.getMaxOutlier(1, (-1533916891));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(3199.245231);
      Object object0 = defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset0.clone();
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable1 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.setNotify(false);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset1.setFaroutCoefficient(425.5015913162);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.equals(object0);
      defaultBoxAndWhiskerXYDataset1.addChangeListener((DatasetChangeListener) null);
      defaultBoxAndWhiskerXYDataset1.clone();
      defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(false);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(0.0);
      defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient();
      defaultBoxAndWhiskerXYDataset0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Object object0 = defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset0.equals(object0);
      defaultBoxAndWhiskerXYDataset0.validateObject();
      defaultBoxAndWhiskerXYDataset0.setNotify(false);
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable1 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient((-1127.5));
      int int0 = 2568;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinRegularValue(2568, (-4249));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxRegularValue((-902), (-1043));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxOutlier(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      int int0 = 2008;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      Comparable<BoxAndWhiskerItem> comparable1 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getQ3Value(2008, (-2075));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      int int0 = 0;
      defaultBoxAndWhiskerXYDataset0.validateObject();
      defaultBoxAndWhiskerXYDataset1.addChangeListener((DatasetChangeListener) null);
      defaultBoxAndWhiskerXYDataset0.hasListener((EventListener) null);
      defaultBoxAndWhiskerXYDataset0.equals((Object) null);
      defaultBoxAndWhiskerXYDataset0.getSeriesCount();
      defaultBoxAndWhiskerXYDataset0.indexOf(1);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getY(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(11.0);
      defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient();
      int int0 = (-2995);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset1.hasListener(defaultBoxAndWhiskerXYDataset0);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.getItemCount((-2995));
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinOutlier((-2995), (-2995));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      boolean boolean0 = true;
      defaultBoxAndWhiskerXYDataset0.validateObject();
      defaultBoxAndWhiskerXYDataset0.getRangeUpperBound(true);
      int int0 = 32;
      int int1 = 3;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinOutlier(32, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(1.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Farout value must be greater than the outlier value, which is currently set at: (1.5)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.clone();
      int int0 = (-655);
      int int1 = 198;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMedianValue((-655), 198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 198, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(datasetChangeListener0);
      defaultBoxAndWhiskerXYDataset0.seriesChanged(seriesChangeEvent0);
      defaultBoxAndWhiskerXYDataset0.equals((Object) null);
      defaultBoxAndWhiskerXYDataset0.clone();
      int int0 = (-2347);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxRegularValue((-2347), (-2347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      double double0 = 0.0;
      defaultBoxAndWhiskerXYDataset0.clone();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getX(794, (-1303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.indexOf(comparable1);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      defaultBoxAndWhiskerXYDataset0.getSeriesKey(0);
      defaultBoxAndWhiskerXYDataset0.clone();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxOutlier(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Object object0 = defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset0.equals(object0);
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(1489.9);
      int int0 = 267;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMeanValue(267, 267);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 267, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(datasetChangeListener0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset1.hasListener(defaultBoxAndWhiskerXYDataset0);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinOutlier(1904, 1904);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1904, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(1771.0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinOutlier(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener((DatasetChangeListener) null);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getOutliers(0, (-2347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      int int0 = (-976);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMedianValue((-976), (-976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.clone();
      boolean boolean0 = false;
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(false);
      int int0 = (-986);
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(1.5);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMeanValue((-986), (-986));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(1336.73938810192);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMeanValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      int int0 = 1242;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getY(1242, 1242);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1242, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(false);
      int int0 = (-1288);
      int int1 = 0;
      defaultBoxAndWhiskerXYDataset0.clone();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(datasetChangeListener1);
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinRegularValue((-1288), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.getItemCount(0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(904.199172985);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(904.199172985, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(904.199172985, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      Comparable<BoxAndWhiskerItem> comparable1 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset2 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      assertNotNull(defaultBoxAndWhiskerXYDataset2);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      
      defaultBoxAndWhiskerXYDataset2.setNotify(false);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerXYDataset2.getGroup();
      assertNotNull(datasetGroup0);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset2.setGroup(datasetGroup0);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset2.setNotify(false);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset2.addChangeListener(datasetChangeListener1);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset2);
      assertFalse(boolean0);
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(904.199172985, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset0.seriesChanged(seriesChangeEvent0);
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(904.199172985, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.equals("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(904.199172985, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      
      double double0 = defaultBoxAndWhiskerXYDataset2.getRangeLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset2.setFaroutCoefficient(904.199172985);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertEquals(904.199172985, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset2.getQ1Value(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      int int0 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(0.0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0.0, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxRegularValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      int int0 = 104;
      Date date0 = null;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getItem(2105, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      double double0 = defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      int int0 = 2741;
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerXYDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      defaultBoxAndWhiskerXYDataset0.setGroup(datasetGroup0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMeanValue(2741, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxRegularValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(Double.NaN);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = (-783);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getItem((-783), (-783));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Farout value must be greater than the outlier value, which is currently set at: (1.5)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = (-543);
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getItem((-543), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = 6;
      int int1 = 1;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient((-2893.1372337963403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Farout value must be greater than the outlier value, which is currently set at: (1.5)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient((-927.08));
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-927.08), defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMedianValue(2145, 2145);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = 0;
      int int1 = 1;
      BoxAndWhiskerItem boxAndWhiskerItem0 = null;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.add((Date) null, (BoxAndWhiskerItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = defaultBoxAndWhiskerXYDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      double double0 = defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient();
      assertEquals(2.0, double0, 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int1 = defaultBoxAndWhiskerXYDataset0.getSeriesCount();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      int int0 = 0;
      int int1 = (-217);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXValue(0, (-217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getOutliers(1594, 1594);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1594, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.indexOf((Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      double double0 = defaultBoxAndWhiskerXYDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      int int0 = 1;
      int int1 = (-1056);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getOutliers((-512), (-1056));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      double double0 = (-1512.5222509849966);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate((-1315), (-1315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.addChangeListener(datasetChangeListener1);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(2.0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      int int0 = 746;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinOutlier(746, 746);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 746, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("xc*k$Bpos0K").when(comparable0).toString();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.equals("wqRZyMuVu*jm");
      assertFalse(boolean0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.equals("wqRZyMuVu*jm");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      int int0 = defaultBoxAndWhiskerXYDataset0.indexOf("wqRZyMuVu*jm");
      assertEquals((-1), int0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      int int1 = defaultBoxAndWhiskerXYDataset0.getItemCount((-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      defaultBoxAndWhiskerXYDataset0.setFaroutCoefficient(1160.3);
      assertEquals(1160.3, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1160.3, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1160.3, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(1160.3, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset2 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      assertNotNull(defaultBoxAndWhiskerXYDataset2);
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset2);
      assertFalse(boolean1);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1160.3, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getQ1Value(6, (-632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getQ3Value(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset2 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset2);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset2.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset2.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset2.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset2.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset2.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset2, defaultBoxAndWhiskerXYDataset1);
      
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable1 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.setNotify(false);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset3 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      assertNotNull(defaultBoxAndWhiskerXYDataset3);
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      
      defaultBoxAndWhiskerXYDataset3.setFaroutCoefficient(425.5015913162);
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset3);
      assertFalse(boolean0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      
      boolean boolean1 = defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset1);
      assertTrue(boolean1);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(boolean1 == boolean0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset1.getNotify());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset3.addChangeListener((DatasetChangeListener) null);
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset4 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset3.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset4);
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset4.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset4.getSeriesCount());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset4.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset4.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset4.addChangeListener((DatasetChangeListener) null);
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset4.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset4.getSeriesCount());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset4.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset4.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset5 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset0.clone();
      assertNotNull(defaultBoxAndWhiskerXYDataset5);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertFalse(defaultBoxAndWhiskerXYDataset5.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertTrue(defaultBoxAndWhiskerXYDataset5.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset5.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset5.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset5.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset5.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset5.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset5.getSeriesCount());
      assertFalse(defaultBoxAndWhiskerXYDataset5.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset5, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset5, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset5, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset5, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset5, defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean2 = defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset3);
      assertFalse(boolean2);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      
      double double0 = defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset4);
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(0.0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertEquals(0.0, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset4);
      
      double double1 = defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertEquals(0.0, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset4);
      
      int int0 = defaultBoxAndWhiskerXYDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertEquals(0.0, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(defaultBoxAndWhiskerXYDataset0.getNotify());
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset4);
      
      Range range0 = defaultBoxAndWhiskerXYDataset4.getRangeBounds(false);
      assertNull(range0);
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertTrue(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset4));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertFalse(defaultBoxAndWhiskerXYDataset3.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset2));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertTrue(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset3));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset5));
      assertFalse(defaultBoxAndWhiskerXYDataset4.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertTrue(defaultBoxAndWhiskerXYDataset3.getNotify());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset3.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset3.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset3.getSeriesCount());
      assertTrue(defaultBoxAndWhiskerXYDataset4.getNotify());
      assertEquals(1, defaultBoxAndWhiskerXYDataset4.getSeriesCount());
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset4.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset4.getOutlierCoefficient(), 0.01);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset4);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset0);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset3, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset2);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset1);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset5);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset3);
      assertNotSame(defaultBoxAndWhiskerXYDataset4, defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.clone();
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable1 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultBoxAndWhiskerXYDataset0.setNotify(false);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      defaultBoxAndWhiskerXYDataset1.setFaroutCoefficient(425.5015913162);
      defaultBoxAndWhiskerXYDataset0.hasListener(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset0);
      defaultBoxAndWhiskerXYDataset1.addChangeListener((DatasetChangeListener) null);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset2 = (DefaultBoxAndWhiskerXYDataset)defaultBoxAndWhiskerXYDataset1.clone();
      defaultBoxAndWhiskerXYDataset2.addChangeListener((DatasetChangeListener) null);
      defaultBoxAndWhiskerXYDataset0.clone();
      defaultBoxAndWhiskerXYDataset0.equals(defaultBoxAndWhiskerXYDataset1);
      defaultBoxAndWhiskerXYDataset0.getRangeLowerBound(false);
      defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient();
      defaultBoxAndWhiskerXYDataset0.getSeriesCount();
      defaultBoxAndWhiskerXYDataset1.getRangeBounds(false);
      defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient();
      assertEquals(425.5015913162, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      
      double double0 = defaultBoxAndWhiskerXYDataset0.getRangeUpperBound(false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = 10;
      defaultBoxAndWhiskerXYDataset0.indexOf(comparable1);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXValue((-1), 774);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 774, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.clone();
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = (Comparable<BoxAndWhiskerItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getYValue(11, (-1995));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparable<BoxAndWhiskerItem> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      defaultBoxAndWhiskerXYDataset0.getRangeUpperBound(true);
      int int0 = 1;
      int int1 = (-512);
      int int2 = (-1056);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getOutliers((-512), (-1056));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMaxRegularValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      int int0 = (-1797);
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getItem(0, (-3888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      int int0 = 3483;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getMinRegularValue(3483, 3483);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3483, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(comparable0);
      defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient();
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable1 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(comparable1);
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset1.getMaxOutlier(2076, (-1091));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
