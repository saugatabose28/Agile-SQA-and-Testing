/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:21:13 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleHistogramBin_ESTest extends SimpleHistogramBin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4102.974475477878), 1667.5795016);
      simpleHistogramBin0.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount(2108733258);
      SimpleHistogramBin simpleHistogramBin2 = new SimpleHistogramBin((-4102.974475477878), 1667.5795016, false, true);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin2);
      simpleHistogramBin2.setItemCount(868);
      simpleHistogramBin2.setItemCount(3181);
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin2.compareTo(simpleHistogramBin0);
      SimpleHistogramBin simpleHistogramBin3 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin2.setItemCount(1);
      SimpleHistogramBin simpleHistogramBin4 = (SimpleHistogramBin)simpleHistogramBin2.clone();
      simpleHistogramBin2.equals(simpleHistogramBin3);
      SimpleHistogramBin simpleHistogramBin5 = (SimpleHistogramBin)simpleHistogramBin2.clone();
      simpleHistogramBin2.getUpperBound();
      simpleHistogramBin0.setItemCount(775);
      simpleHistogramBin2.setItemCount(775);
      SimpleHistogramBin simpleHistogramBin6 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin2.clone();
      simpleHistogramBin4.overlapsWith(simpleHistogramBin6);
      simpleHistogramBin0.accepts(3239.0);
      SimpleHistogramBin simpleHistogramBin7 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(simpleHistogramBin7);
      simpleHistogramBin3.accepts(3239.0);
      simpleHistogramBin4.accepts(1667.5795016);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1540.8446039770677), 0.0, true, true);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin1.clone();
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin2);
      SimpleHistogramBin simpleHistogramBin3 = new SimpleHistogramBin(0, 325.109);
      simpleHistogramBin3.clone();
      SimpleHistogramBin simpleHistogramBin4 = (SimpleHistogramBin)simpleHistogramBin3.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin3.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin3.setItemCount(0);
      simpleHistogramBin3.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin3);
      simpleHistogramBin3.getLowerBound();
      simpleHistogramBin3.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin3.setItemCount(1451);
      SimpleHistogramBin simpleHistogramBin5 = (SimpleHistogramBin)simpleHistogramBin3.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin4);
      simpleHistogramBin5.clone();
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1540.8446039770677), 0.0, true, false);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin1);
      SimpleHistogramBin simpleHistogramBin2 = new SimpleHistogramBin(0, 325.109);
      simpleHistogramBin2.clone();
      simpleHistogramBin2.clone();
      SimpleHistogramBin simpleHistogramBin3 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin2.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin2.setItemCount(0);
      simpleHistogramBin2.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin3.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin2.getLowerBound();
      simpleHistogramBin2.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin2.setItemCount(1451);
      simpleHistogramBin2.clone();
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3164.47905417), 1059.80605818);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-3164.47905417), 835.048224336186, false, false);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      Object object1 = simpleHistogramBin1.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      Object object2 = simpleHistogramBin1.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin1);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      Object object3 = simpleHistogramBin1.clone();
      simpleHistogramBin1.setItemCount(1);
      simpleHistogramBin0.compareTo(object3);
      simpleHistogramBin0.compareTo(object1);
      simpleHistogramBin1.compareTo(object0);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin1.equals(simpleHistogramBin0);
      simpleHistogramBin1.clone();
      simpleHistogramBin0.equals(object2);
      SimpleHistogramBin simpleHistogramBin2 = new SimpleHistogramBin((-1885.1), 336.2861, false, false);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin2);
      SimpleHistogramBin simpleHistogramBin3 = new SimpleHistogramBin(1.0, 1059.80605818, false, true);
      simpleHistogramBin2.overlapsWith(simpleHistogramBin3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2815.6136425), (-2531.053646301567), false, true);
      simpleHistogramBin0.clone();
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo((Object) null);
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin1);
      simpleHistogramBin0.getUpperBound();
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin2.clone();
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.accepts((-2815.6136425));
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount((-120));
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin3 = null;
      try {
        simpleHistogramBin3 = new SimpleHistogramBin((-2531.053646301567), (-2531.053646301567), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(839.6067, 1595.9004930986, false, false);
      Object object0 = simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin2 = new SimpleHistogramBin(1595.9004930986, 2186.393);
      simpleHistogramBin0.equals(simpleHistogramBin2);
      simpleHistogramBin2.setItemCount(0);
      simpleHistogramBin2.getItemCount();
      simpleHistogramBin1.clone();
      simpleHistogramBin2.setItemCount(0);
      simpleHistogramBin2.getItemCount();
      simpleHistogramBin2.equals(object0);
      simpleHistogramBin0.getItemCount();
      simpleHistogramBin0.compareTo(simpleHistogramBin1);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-307.2), 0.0, false, false);
      simpleHistogramBin0.setItemCount(991);
      simpleHistogramBin0.setItemCount(1454);
      simpleHistogramBin0.setItemCount(1284);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(2145364728);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(1.0, 1284, false, true);
      simpleHistogramBin1.setItemCount(1454);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin1.getLowerBound();
      simpleHistogramBin0.clone();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4103.2), 1667.5795016);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(1293.9651068964, 1667.5795016, false, true);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin1.setItemCount(868);
      simpleHistogramBin1.setItemCount(3181);
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin1.compareTo(simpleHistogramBin0);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount(1);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.equals(object0);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.getUpperBound();
      simpleHistogramBin0.setItemCount(775);
      simpleHistogramBin1.setItemCount(775);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.accepts(3239.0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin1.accepts(3239.0);
      simpleHistogramBin1.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.accepts(3239.0);
      Object object1 = simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1797.8, 3061.8027, true, true);
      simpleHistogramBin0.setItemCount((-1));
      simpleHistogramBin0.setItemCount((-1));
      simpleHistogramBin0.setItemCount((-1));
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(1260);
      simpleHistogramBin0.getUpperBound();
      Object object1 = simpleHistogramBin0.clone();
      Object object2 = simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object2);
      simpleHistogramBin0.compareTo(object0);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(0.0, 1.0);
      simpleHistogramBin1.setItemCount(1832);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.compareTo(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2727.264139), 0.0, true, true);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(76);
      int int0 = 1995;
      simpleHistogramBin0.setItemCount(1995);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(object0);
      simpleHistogramBin0.setItemCount((-1));
      simpleHistogramBin0.setItemCount((-1726));
      simpleHistogramBin0.accepts(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount((-1726));
      simpleHistogramBin0.accepts((-2727.264139));
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.getItemCount();
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(0, (-1726), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2815.6136425), (-2531.053646301567), false, true);
      simpleHistogramBin0.clone();
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(3296);
      simpleHistogramBin0.compareTo((Object) null);
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      Object object1 = simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(object1);
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.accepts((-2815.6136425));
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount((-120));
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin((-2531.053646301567), (-2531.053646301567), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1540.8446039770677), 0.0, true, true);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(object0);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(0, 325.109);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin1.getLowerBound();
      simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin1.setItemCount(1451);
      simpleHistogramBin1.clone();
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(839.6067, 1595.9004930986, false, false);
      Object object0 = simpleHistogramBin0.clone();
      Object object1 = simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(1595.9004930986, 2186.393);
      simpleHistogramBin0.equals(simpleHistogramBin1);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin1.equals(object0);
      simpleHistogramBin0.getItemCount();
      simpleHistogramBin0.compareTo(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0);
      simpleHistogramBin0.clone();
      int int0 = 0;
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.accepts(1.0);
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1410.1089151), (-1.0));
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.equals("");
      simpleHistogramBin0.setItemCount(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1869.8812689637), (-1119.46669472152));
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1119.46669472152), 0.0, false, false);
      simpleHistogramBin1.clone();
      simpleHistogramBin0.setItemCount(1181);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.setItemCount(2911);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin1.setItemCount(2911);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.setItemCount(1181);
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin0.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin1.getLowerBound();
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.clone();
      simpleHistogramBin1.accepts((-1119.46669472152));
      simpleHistogramBin1.clone();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-738.5851), (-1.0));
      simpleHistogramBin0.clone();
      int int0 = 2130;
      simpleHistogramBin0.setItemCount(2130);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getItemCount();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(2130);
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(2130, (-1.0), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1), 1.0, true, false);
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-432.5034020971373), 1.0, true, true);
      SimpleHistogramBin simpleHistogramBin2 = new SimpleHistogramBin((-3416.37), (-1), true, false);
      simpleHistogramBin1.overlapsWith(simpleHistogramBin2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3161.4546346), 1552.9579173427, true, true);
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3231.4976363452483), 0.0, true, false);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.setItemCount(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.setItemCount(1687);
      int int0 = (-1);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount((-1));
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(376);
      simpleHistogramBin0.accepts((-1020.77494853904));
      simpleHistogramBin0.equals(object0);
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(1687, 0.0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1465.163);
      simpleHistogramBin0.accepts(0.0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.accepts(968.0708019949876);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getUpperBound();
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(0.0, (-1.0), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3252.97782527854), 2623.3604119519);
      simpleHistogramBin0.accepts(0.0);
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1062.11736037581, true, false);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getUpperBound();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.0, 104.54029665762);
      int int0 = 0;
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(1);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getItemCount();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(0.0, (-1616.46993));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin((-1288.0), (-1288.0), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getItemCount();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(2840);
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.setItemCount(0);
      Object object1 = simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object1);
      simpleHistogramBin0.compareTo(object0);
      SimpleHistogramBin simpleHistogramBin1 = null;
      try {
        simpleHistogramBin1 = new SimpleHistogramBin(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(886.54503023826, 2666.9751969);
      simpleHistogramBin0.setItemCount((-587));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin((-1715.33), (-1715.33));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1869.8812689637), (-1119.46669472152));
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      Object object0 = simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1119.46669472152), 0.0, false, false);
      Object object1 = simpleHistogramBin1.clone();
      simpleHistogramBin0.setItemCount(1181);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.setItemCount(2911);
      simpleHistogramBin1.clone();
      simpleHistogramBin1.clone();
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin1.clone();
      simpleHistogramBin2.setItemCount(2911);
      simpleHistogramBin1.setItemCount(2911);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.setItemCount(1181);
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin0.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin1.getLowerBound();
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.clone();
      simpleHistogramBin1.accepts((-1119.46669472152));
      simpleHistogramBin1.clone();
      simpleHistogramBin0.equals(object1);
      object0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1445.803), (-1.0));
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.compareTo((Object) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 3145.6146);
      Object object0 = simpleHistogramBin0.clone();
      Object object1 = simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(1285);
      simpleHistogramBin0.clone();
      Object object2 = simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(object2);
      Object object3 = simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(object3);
      simpleHistogramBin0.accepts((-1.0));
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(0.0, 3775.2892426547237, false, false);
      Object object4 = simpleHistogramBin1.clone();
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.setItemCount(1285);
      simpleHistogramBin1.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.accepts((-1.0));
      simpleHistogramBin0.accepts(1285);
      simpleHistogramBin0.compareTo(object4);
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin1.clone();
      simpleHistogramBin0.compareTo(object0);
      simpleHistogramBin2.compareTo(object1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1540.8446039770677), 0.0, true, true);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(object0);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(0, 325.109);
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin1.clone();
      simpleHistogramBin2.clone();
      SimpleHistogramBin simpleHistogramBin3 = (SimpleHistogramBin)simpleHistogramBin1.clone();
      SimpleHistogramBin simpleHistogramBin4 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin4.clone();
      simpleHistogramBin4.setItemCount(0);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin1.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      simpleHistogramBin1.getLowerBound();
      simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin1.setItemCount(1452);
      SimpleHistogramBin simpleHistogramBin5 = (SimpleHistogramBin)simpleHistogramBin1.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin3);
      simpleHistogramBin5.clone();
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2815.6136425), (-2531.053646301567), false, true);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(3296);
      simpleHistogramBin0.compareTo((Object) null);
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.getUpperBound();
      simpleHistogramBin0.clone();
      Object object1 = simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(object1);
      simpleHistogramBin0.getUpperBound();
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount((-786));
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.accepts((-2815.6136425));
      simpleHistogramBin0.getLowerBound();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount((-120));
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.equals(object0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin1.clone();
      SimpleHistogramBin simpleHistogramBin2 = null;
      try {
        simpleHistogramBin2 = new SimpleHistogramBin((-2531.053646301567), (-2531.053646301567), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-307.2), 0.0, false, false);
      simpleHistogramBin0.setItemCount(946);
      simpleHistogramBin0.setItemCount(1454);
      simpleHistogramBin0.setItemCount(1284);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(2145364728);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(1.0, 1284, false, true);
      simpleHistogramBin1.setItemCount(1454);
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin1.clone();
      simpleHistogramBin2.clone();
      simpleHistogramBin1.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      SimpleHistogramBin simpleHistogramBin3 = new SimpleHistogramBin((-307.2), 1454);
      simpleHistogramBin0.equals(simpleHistogramBin3);
      simpleHistogramBin1.getLowerBound();
      SimpleHistogramBin simpleHistogramBin4 = null;
      try {
        simpleHistogramBin4 = new SimpleHistogramBin(1454, 0.0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1540.8446039770677), 0.0, false, false);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin1.setItemCount(0);
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.compareTo(simpleHistogramBin2);
      SimpleHistogramBin simpleHistogramBin3 = new SimpleHistogramBin(0, 325.109);
      simpleHistogramBin3.clone();
      simpleHistogramBin3.clone();
      simpleHistogramBin0.clone();
      simpleHistogramBin3.setItemCount(0);
      simpleHistogramBin0.setItemCount(0);
      simpleHistogramBin3.setItemCount(0);
      simpleHistogramBin0.clone();
      simpleHistogramBin0.overlapsWith(simpleHistogramBin3);
      simpleHistogramBin3.getLowerBound();
      simpleHistogramBin3.overlapsWith(simpleHistogramBin0);
      simpleHistogramBin3.setItemCount(1451);
      simpleHistogramBin3.clone();
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4102.974475477878), 1667.5795016);
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      SimpleHistogramBin simpleHistogramBin2 = new SimpleHistogramBin(1293.9651068964, 1667.5795016, true, true);
      simpleHistogramBin0.overlapsWith(simpleHistogramBin2);
      simpleHistogramBin2.setItemCount(868);
      simpleHistogramBin2.setItemCount((-2152));
      simpleHistogramBin1.getItemCount();
      simpleHistogramBin2.compareTo(simpleHistogramBin0);
      SimpleHistogramBin simpleHistogramBin3 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin2.setItemCount(1);
      SimpleHistogramBin simpleHistogramBin4 = (SimpleHistogramBin)simpleHistogramBin2.clone();
      simpleHistogramBin2.equals(simpleHistogramBin3);
      simpleHistogramBin2.clone();
      simpleHistogramBin2.getUpperBound();
      simpleHistogramBin0.setItemCount(775);
      simpleHistogramBin2.setItemCount(775);
      SimpleHistogramBin simpleHistogramBin5 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.accepts(3239.0);
      simpleHistogramBin2.clone();
      simpleHistogramBin4.overlapsWith(simpleHistogramBin5);
      simpleHistogramBin0.accepts(3239.0);
      SimpleHistogramBin simpleHistogramBin6 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin0.equals(simpleHistogramBin6);
      simpleHistogramBin3.accepts(3239.0);
      assertEquals(775, simpleHistogramBin0.getItemCount());
      
      boolean boolean0 = simpleHistogramBin4.accepts(1667.5795016);
      assertTrue(boolean0);
  }
}
