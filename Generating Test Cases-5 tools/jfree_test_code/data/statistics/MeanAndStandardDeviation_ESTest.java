/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:46:22 GMT 2023
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.MeanAndStandardDeviation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeanAndStandardDeviation_ESTest extends MeanAndStandardDeviation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) byte0, (Number) byte0);
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals(47.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-2574.0223928178993), (-2574.0223928178993));
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals((-2574.0223928178993), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) byte0, (Number) byte0);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertEquals((byte)47, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-2574.0223928178993), (-2574.0223928178993));
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertEquals((-2574.0223928178993), number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, (-2291.05));
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals((-2291.05), meanAndStandardDeviation0.getStandardDeviationValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1.0, 0.0);
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals(0.0, meanAndStandardDeviation0.getStandardDeviationValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(101L);
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) long0, (Number) long0);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertEquals(101L, number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float((-307.82275F));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      Short short0 = new Short((short)1037);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation((Number) float0, (Number) short0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertEquals((-307.82275390625), meanAndStandardDeviation1.getMeanValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float((-307.82275F));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Float float0 = new Float((-307.82275F));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      Short short0 = new Short((short)1037);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation((Number) short0, (Number) float0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertFalse(boolean0);
      assertEquals((-307.82275390625), meanAndStandardDeviation1.getStandardDeviationValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      boolean boolean0 = meanAndStandardDeviation0.equals("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)0);
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) short0, (Number) short0);
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      double double0 = meanAndStandardDeviation0.getStandardDeviationValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float((-307.82275F));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals((-307.82275390625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      double double0 = meanAndStandardDeviation0.getMeanValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float((-307.82275F));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertEquals((-307.82275F), number0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float((-307.82275F));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) float0, (Number) float0);
      String string0 = meanAndStandardDeviation0.toString();
      assertEquals("[-307.82275, -307.82275]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertNull(number0);
  }
}
