/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:11:48 GMT 2023
 */

package org.jfree.data.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NormalDistributionFunction2D_ESTest extends NormalDistributionFunction2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(129.0, 129.0);
      NormalDistributionFunction2D normalDistributionFunction2D1 = new NormalDistributionFunction2D(129.0, 6.283185307179586);
      boolean boolean0 = normalDistributionFunction2D0.equals(normalDistributionFunction2D1);
      assertEquals(129.0, normalDistributionFunction2D1.getMean(), 0.01);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
      assertEquals(6.283185307179586, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1140.53202), 1.0);
      NormalDistributionFunction2D normalDistributionFunction2D1 = new NormalDistributionFunction2D(0.0, 1.0);
      boolean boolean0 = normalDistributionFunction2D0.equals(normalDistributionFunction2D1);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
      assertEquals(0.0, normalDistributionFunction2D1.getMean(), 0.01);
      assertEquals(1.0, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2154.45719356467, 1.1241594799580938E-4);
      double double0 = normalDistributionFunction2D0.getValue(0.0);
      assertEquals(1.1241594799580938E-4, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2154.45719356467, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 2048.7853038915737);
      double double0 = normalDistributionFunction2D0.getMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2048.7853038915737, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-480.26), 4051.381479);
      double double0 = normalDistributionFunction2D0.getMean();
      assertEquals((-480.26), double0, 0.01);
      assertEquals(4051.381479, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      NormalDistributionFunction2D normalDistributionFunction2D1 = new NormalDistributionFunction2D(1044.918660193651, 3384.745683697986);
      boolean boolean0 = normalDistributionFunction2D0.equals(normalDistributionFunction2D1);
      assertEquals(1044.918660193651, normalDistributionFunction2D1.getMean(), 0.01);
      assertFalse(boolean0);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(7.891095002198653, 7.891095002198653);
      NormalDistributionFunction2D normalDistributionFunction2D1 = new NormalDistributionFunction2D(6.28318530718, 6.28318530718);
      boolean boolean0 = normalDistributionFunction2D0.equals(normalDistributionFunction2D1);
      assertEquals(6.28318530718, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertEquals(6.28318530718, normalDistributionFunction2D1.getMean(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      Object object0 = new Object();
      boolean boolean0 = normalDistributionFunction2D0.equals(object0);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      boolean boolean0 = normalDistributionFunction2D0.equals(normalDistributionFunction2D0);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      double double0 = normalDistributionFunction2D0.getValue(1044.918660193651);
      assertEquals(3.81792665399906E-4, double0, 0.01);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      double double0 = normalDistributionFunction2D0.getMean();
      assertEquals(1044.918660193651, double0, 0.01);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      normalDistributionFunction2D0.hashCode();
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1044.918660193651, 1044.918660193651);
      double double0 = normalDistributionFunction2D0.getStandardDeviation();
      assertEquals(1044.918660193651, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1044.918660193651, double0, 0.01);
  }
}
