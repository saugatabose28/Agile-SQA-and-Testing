/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:38:19 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.KeyedObject;
import org.jfree.data.KeyedObjects;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyedObjects_ESTest extends KeyedObjects_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("7^M,9CyA_nRi]0vm*", "7^M,9CyA_nRi]0vm*", "7^M,9CyA_nRi]0vm*", "7^M,9CyA_nRi]0vm*").when(comparable0).toString();
      keyedObjects0.clear();
      Object object0 = keyedObjects0.clone();
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "Null '").when(comparable1).toString();
      keyedObjects0.setObject(comparable1, object0);
      keyedObjects0.getKeys();
      keyedObjects0.addObject(comparable0, object0);
      KeyedObjects keyedObjects1 = (KeyedObjects)keyedObjects0.clone();
      Comparable comparable2 = keyedObjects0.getKey(1);
      keyedObjects0.insertValue(1, comparable2, keyedObjects1);
      Comparable comparable3 = keyedObjects0.getKey(1);
      keyedObjects0.addObject(comparable2, comparable2);
      keyedObjects0.getKeys();
      keyedObjects0.getObject(1);
      object0.equals((Object) null);
      keyedObjects1.getObject(comparable3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      keyedObjects0.getIndex((-1));
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      keyedObjects0.setObject(comparable1, (Object) null);
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      keyedObjects0.setObject(comparable2, "");
      Comparable comparable3 = keyedObjects0.getKey(0);
      keyedObjects0.getObject(comparable3);
      keyedObjects0.getObject(0);
      keyedObjects0.setObject("", (Object) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        keyedObjects0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", ") to be non-negative.", "", ") to be non-negative.").when(comparable0).toString();
      keyedObjects0.clear();
      Object object0 = keyedObjects0.clone();
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable1).toString();
      keyedObjects0.setObject(comparable1, object0);
      keyedObjects0.getKeys();
      keyedObjects0.addObject(comparable0, object0);
      KeyedObjects keyedObjects1 = (KeyedObjects)keyedObjects0.clone();
      Comparable comparable2 = keyedObjects0.getKey(1);
      keyedObjects0.insertValue(1, comparable2, keyedObjects1);
      Comparable comparable3 = keyedObjects0.getKey(1);
      keyedObjects0.addObject(comparable2, comparable2);
      keyedObjects0.getKeys();
      keyedObjects0.getObject(1);
      object0.hashCode();
      keyedObjects1.getIndex(comparable3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.equals(keyedObjects0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      keyedObjects0.setObject(comparable1, "");
      keyedObjects0.insertValue(0, "", "");
      keyedObjects0.getObject(0);
      keyedObjects0.setObject("", "");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        keyedObjects0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.hashCode();
      KeyedObjects keyedObjects1 = new KeyedObjects();
      keyedObjects1.clear();
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      String string0 = "Uy7 c 91N";
      keyedObjects1.setObject((-1), "Uy7 c 91N");
      keyedObjects1.setObject("Uy7 c 91N", "Uy7 c 91N");
      keyedObjects0.setObject(1, keyedObjects1);
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects1.removeValue((Comparable) "Uy7 c 91N");
      // Undeclared exception!
      try { 
        keyedObjects1.getObject(180);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 180, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        keyedObjects0.removeValue((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.addObject(comparable0, (Object) null);
      keyedObjects0.clone();
      KeyedObjects keyedObjects1 = new KeyedObjects();
      // Undeclared exception!
      try { 
        keyedObjects0.setObject((Comparable) null, keyedObjects1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      keyedObjects0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      KeyedObjects keyedObjects1 = new KeyedObjects();
      keyedObjects1.hashCode();
      Object object0 = keyedObjects0.clone();
      keyedObjects0.insertValue(0, 1, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        keyedObjects0.getIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.setObject(comparable0, comparable0);
      keyedObjects0.clone();
      keyedObjects0.hashCode();
      keyedObjects0.getIndex(33);
      keyedObjects0.hashCode();
      keyedObjects0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      Comparable<KeyedObject> comparable2 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObjects keyedObjects1 = new KeyedObjects();
      // Undeclared exception!
      try { 
        keyedObjects1.getObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      keyedObjects0.getIndex((-1));
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      String string0 = "";
      keyedObjects0.setObject(comparable1, "");
      Comparable comparable2 = keyedObjects0.getKey(0);
      keyedObjects0.getObject(comparable2);
      keyedObjects0.getObject(0);
      keyedObjects0.setObject("", "");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        keyedObjects0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      int int0 = (-2991);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        keyedObjects0.getObject(comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (null) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      int int0 = 1;
      // Undeclared exception!
      try { 
        keyedObjects0.getKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        keyedObjects0.removeValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.clear();
      keyedObjects0.getIndex(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        keyedObjects0.insertValue(3683, comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Object object0 = keyedObjects0.clone();
      keyedObjects0.equals(object0);
      Comparable<KeyedObjects> comparable0 = null;
      // Undeclared exception!
      try { 
        keyedObjects0.insertValue(858, (Comparable) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      Comparable<KeyedObjects> comparable1 = null;
      // Undeclared exception!
      try { 
        keyedObjects0.getObject((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.clone();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObjects keyedObjects1 = new KeyedObjects();
      keyedObjects0.setObject(comparable1, keyedObjects1);
      // Undeclared exception!
      try { 
        keyedObjects0.removeValue(2860);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2860, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      // Undeclared exception!
      try { 
        keyedObjects0.getKey((-1986));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      keyedObjects0.setObject(comparable0, comparable0);
      List list0 = keyedObjects0.getKeys();
      KeyedObjects keyedObjects1 = new KeyedObjects();
      keyedObjects1.getKeys();
      keyedObjects0.equals(keyedObjects1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.setObject(comparable1, list0);
      keyedObjects0.clone();
      int int0 = 1;
      keyedObjects0.getObject(1);
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        keyedObjects0.removeValue(comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (codegen.java.lang.Comparable$MockitoMock$1810161524@0000000007) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = null;
      // Undeclared exception!
      try { 
        keyedObjects0.addObject((Comparable) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Object object0 = keyedObjects0.clone();
      keyedObjects0.equals(object0);
      int int0 = 929;
      keyedObjects0.clear();
      keyedObjects0.getKeys();
      // Undeclared exception!
      try { 
        keyedObjects0.getObject(929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "taR~~C{A9U", "taR~~C{A9U").when(comparable0).toString();
      keyedObjects0.clear();
      Object object0 = keyedObjects0.clone();
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("taR~~C{A9U", (String) null).when(comparable1).toString();
      keyedObjects0.setObject(comparable1, object0);
      keyedObjects0.getKeys();
      keyedObjects0.addObject(comparable0, object0);
      Object object1 = keyedObjects0.clone();
      Comparable comparable2 = keyedObjects0.getKey(1);
      keyedObjects0.insertValue(1, comparable2, object1);
      Comparable comparable3 = keyedObjects0.getKey(1);
      keyedObjects0.addObject(comparable2, comparable2);
      keyedObjects0.getKeys();
      keyedObjects0.getObject(1);
      keyedObjects0.removeValue(comparable3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      KeyedObjects keyedObjects1 = new KeyedObjects();
      keyedObjects1.hashCode();
      keyedObjects0.insertValue(0, 1, keyedObjects0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.getItemCount();
      keyedObjects0.equals((Object) null);
      // Undeclared exception!
      try { 
        keyedObjects0.getObject((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      KeyedObjects keyedObjects1 = new KeyedObjects();
      boolean boolean0 = keyedObjects0.equals(keyedObjects1);
      assertTrue(boolean0);
      
      keyedObjects1.hashCode();
      assertTrue(keyedObjects1.equals((Object)keyedObjects0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObject> comparable0 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("X_p,PBe'fhNx~QH").when(comparable1).toString();
      keyedObjects0.setObject(comparable1, comparable0);
      String string0 = "";
      Comparable comparable2 = keyedObjects0.getKey(0);
      keyedObjects0.getObject(comparable2);
      keyedObjects0.getObject(0);
      keyedObjects0.setObject("", "Mock for Comparable, hashCode: 940775115");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        keyedObjects0.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.setObject(comparable0, comparable0);
      keyedObjects0.hashCode();
      Comparable<KeyedObjects> comparable1 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.insertValue(0, comparable1, comparable1);
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      // Undeclared exception!
      try { 
        keyedObjects0.getObject(comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (null) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.clone();
      int int0 = 0;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyedObjects0.getIndex(comparable0);
      String string0 = null;
      keyedObjects0.addObject((-1), (Object) null);
      keyedObjects0.removeValue(0);
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<KeyedObject> comparable2 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        keyedObjects0.insertValue((-1), (Comparable) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        keyedObjects0.removeValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (codegen.java.lang.Comparable$MockitoMock$1810161524@0000000002) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      keyedObjects0.clear();
      Object object0 = keyedObjects0.clone();
      Comparable<KeyedObject> comparable1 = (Comparable<KeyedObject>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable1).toString();
      keyedObjects0.setObject(comparable1, object0);
      keyedObjects0.getKeys();
      keyedObjects0.addObject(comparable0, object0);
      Object object1 = keyedObjects0.clone();
      Comparable comparable2 = keyedObjects0.getKey(1);
      keyedObjects0.insertValue(1, comparable2, object1);
      keyedObjects0.getKey(1);
      keyedObjects0.addObject(comparable2, comparable2);
      keyedObjects0.getKeys();
      Object object2 = keyedObjects0.getObject(1);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.getKeys();
      // Undeclared exception!
      try { 
        keyedObjects0.removeValue((-131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KeyedObjects keyedObjects0 = new KeyedObjects();
      keyedObjects0.getItemCount();
      keyedObjects0.hashCode();
      // Undeclared exception!
      try { 
        keyedObjects0.getObject((Comparable) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (1) is not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }
}
