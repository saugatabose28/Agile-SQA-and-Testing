/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:47:19 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(52.155880299, 52.155880299);
      Range range1 = Range.expandToInclude(range0, (-299.0652413090093));
      Range range2 = Range.combine(range1, range1);
      range1.intersects(52.155880299, 52.155880299);
      range0.constrain(52.155880299);
      range0.intersects(range1);
      range1.getCentralValue();
      range2.getCentralValue();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      Range.expandToInclude(range1, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range0.contains(2249.0);
      range1.getLength();
      range1.toString();
      range1.getLowerBound();
      range0.isNaNRange();
      Range range2 = Range.expand(range1, 0.0, 0.0);
      double double1 = 0.0;
      range1.contains(0.0);
      range0.toString();
      Range.combine(range2, range0);
      range0.intersects(range2);
      // Undeclared exception!
      try { 
        Range.scale(range2, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 2.0);
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.expand(range0, 2.0, 0.0);
      Range range3 = Range.expand(range1, 0.0, 818.342);
      range1.intersects(2085.917503, 2.0);
      Range range4 = Range.combine(range3, range0);
      Range.scale(range0, 2085.917503);
      range0.constrain((-1.0));
      range3.isNaNRange();
      range1.getLength();
      range3.equals(range2);
      range2.getCentralValue();
      range2.getCentralValue();
      range4.toString();
      // Undeclared exception!
      try { 
        Range.scale(range3, (-4507.650998189661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 447.3846972781);
      Range range1 = Range.expandToInclude(range0, 256.2406289908226);
      Range range2 = Range.combine(range0, range1);
      Range range3 = Range.combineIgnoringNaN(range2, range0);
      Range range4 = Range.combine(range1, range2);
      Range range5 = Range.expand(range4, 0.0, 0.0);
      Range range6 = Range.expand(range3, 447.3846972781, 2988.59702055104);
      Range range7 = Range.shift(range3, 2988.59702055104);
      Range range8 = Range.expand(range7, 0.0, 0.0);
      Range.combineIgnoringNaN(range1, range0);
      Range.combine(range6, range5);
      Range range9 = Range.expandToInclude(range5, 0.0);
      range6.intersects(range3);
      range2.intersects(256.2406289908226, (-3.51235690177));
      range8.getCentralValue();
      Range.combineIgnoringNaN(range9, range3);
      range3.hashCode();
      range7.getUpperBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-2648.65516352), 3227.647288542);
      Range range1 = Range.expand(range0, 1024.9497636949093, 1024.9497636949093);
      Range range2 = Range.combine(range0, range0);
      Range range3 = Range.scale(range2, 1024.9497636949093);
      Range.expand(range0, (-2648.65516352), 2685.6204);
      Range.expandToInclude(range0, 2685.6204);
      Range range4 = Range.expand(range0, (-2648.65516352), 1.0);
      Range range5 = Range.expandToInclude(range1, 731.963);
      Range.shift(range5, (-1.0));
      range2.getLength();
      Range.scale(range0, 1024.9497636949093);
      Range range6 = Range.shift(range4, (-2648.65516352));
      range6.toString();
      range3.intersects((-1.0), (-2648.65516352));
      range1.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(579.296231189, 579.296231189);
      Range range1 = Range.scale(range0, 3.6771533);
      Range range2 = Range.expandToInclude(range1, 0.0);
      Range range3 = Range.combine(range2, range1);
      Range.expandToInclude(range2, 0.0);
      Range.expand(range3, 47.38480508114, 1.0);
      Range range4 = Range.shift(range2, 3.6771533, true);
      Range.scale(range2, 579.296231189);
      Range range5 = Range.combineIgnoringNaN(range3, range4);
      Range.expandToInclude(range1, 1.0);
      Range range6 = Range.shift(range2, 0.0);
      range6.toString();
      Range range7 = Range.shift(range6, 706.609, true);
      range0.contains(1469.76676);
      range1.getUpperBound();
      range3.contains((-136.75036522));
      range0.getLength();
      range3.toString();
      range0.toString();
      Range range8 = Range.combine(range3, range7);
      range5.equals(range8);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-369.12679683), (-369.12679683));
      Range range1 = Range.expandToInclude(range0, 646.915840718441);
      Range.expand(range0, (-1.0), 646.915840718441);
      range1.toString();
      Range.expandToInclude(range1, 0.0);
      Range range2 = Range.shift(range1, 0.0);
      Range range3 = Range.expand(range1, 646.915840718441, (-369.12679683));
      Range range4 = Range.combine(range3, range1);
      Range.combineIgnoringNaN(range3, range3);
      range3.toString();
      range4.equals(range0);
      Range range5 = Range.expandToInclude(range3, 0.0);
      Range range6 = Range.combineIgnoringNaN(range5, range1);
      range2.getLowerBound();
      range6.constrain(0.0);
      range2.getLength();
      range3.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.shift(range0, 2945.0, false);
      Range range3 = Range.scale(range1, 1.0);
      Range.expandToInclude(range1, (-1.0));
      Range range4 = Range.expandToInclude(range3, 3986.3934226);
      range4.toString();
      range4.equals(range3);
      range3.getLength();
      range0.hashCode();
      Range range5 = Range.expand(range0, (-1.0), (-1.0));
      Range.combineIgnoringNaN(range5, range1);
      range3.getLowerBound();
      range3.getLength();
      range2.getLength();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 2.0);
      Range range1 = Range.combine(range0, range0);
      Range range2 = Range.shift(range1, 2.0);
      range2.contains(0.0);
      range2.getLowerBound();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-959.828671273), (-959.828671273));
      Range range1 = Range.expand(range0, 0.0, 0.0);
      Range range2 = Range.combineIgnoringNaN(range1, range1);
      range2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-4121.31273382), (-1274.856233));
      Range range1 = Range.combine(range0, range0);
      Range range2 = Range.combineIgnoringNaN(range1, range0);
      Range range3 = Range.expand(range2, (-4121.31273382), (-4121.31273382));
      // Undeclared exception!
      try { 
        Range.scale(range3, (-1274.856233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-951.6226404), (-153.8));
      Range.shift(range0, 138.9524939, false);
      range0.getUpperBound();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(845.1389042, 845.1389042);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range1.toString();
      Range range2 = Range.combine(range0, range0);
      Range range3 = Range.expand(range2, (-1.0), (-3260.7734412));
      range2.toString();
      Range range4 = Range.expandToInclude(range1, 0.0);
      Range range5 = Range.shift(range4, (-747.645673648845));
      range0.contains(845.1389042);
      Range.expandToInclude(range0, 2190.43255639);
      Range range6 = Range.expandToInclude(range2, 845.1389042);
      range6.isNaNRange();
      Range.combine(range5, range1);
      range3.getLength();
      range1.isNaNRange();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-3893.325325830593), 2752.44506867);
      Range range1 = Range.expand(range0, 431.86, 2752.44506867);
      Range.shift(range1, 2752.44506867, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(52.15588029942, 52.15588029942);
      Range range1 = Range.expandToInclude(range0, (-299.0652413090093));
      Range range2 = Range.combineIgnoringNaN(range0, range0);
      range1.intersects(0.0, 0.0);
      range0.constrain(0.0);
      range0.intersects(range1);
      range1.getCentralValue();
      range2.getCentralValue();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.shift(range2, (-1.0), true);
      range3.contains((-1.0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(102.656828901574, 713.0);
      Range range1 = Range.shift(range0, 713.0, false);
      range0.getLowerBound();
      range0.getUpperBound();
      Range range2 = Range.scale(range1, 365.46);
      Range range3 = Range.combine(range2, range2);
      range3.toString();
      range3.toString();
      range0.getLength();
      Range range4 = Range.shift(range1, 0.0, false);
      Range.scale(range4, 102.656828901574);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(1591.81424, 1591.81424);
      Range range1 = Range.shift(range0, 0.0);
      Range.combine(range1, range1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(1390.80545073, 1390.80545073);
      Range range1 = Range.shift(range0, 0.0, true);
      range0.equals(range1);
      Range range2 = Range.combine(range0, range1);
      range1.toString();
      range2.toString();
      Range range3 = Range.shift(range0, (-532.4720991), true);
      Range.combineIgnoringNaN(range0, range1);
      Range range4 = Range.combineIgnoringNaN(range0, range3);
      range1.toString();
      range3.getCentralValue();
      Range.scale(range1, 0.0);
      Range range5 = Range.combineIgnoringNaN(range1, range2);
      Range range6 = new Range((-532.4720991), 4023.89154330604);
      Range.shift(range6, (-341.56773107503), false);
      Range range7 = Range.combine(range5, range4);
      Range.expand(range1, (-532.4720991), 349.7720579415076);
      Range range8 = Range.expandToInclude(range1, (-1.0));
      range7.isNaNRange();
      range6.contains((-341.56773107503));
      range8.getLowerBound();
      range4.equals(range1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.combineIgnoringNaN((Range) null, (Range) null);
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(3333.895701, 3333.895701);
      Range range1 = Range.expandToInclude(range0, (-72.4268792559114));
      Range range2 = Range.expand(range1, (-690.7878155251992), (-690.7878155251992));
      Range range3 = Range.combineIgnoringNaN(range2, range2);
      range3.getCentralValue();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = null;
      Range.combineIgnoringNaN((Range) null, (Range) null);
      double double0 = 0.0;
      Range range1 = Range.expandToInclude((Range) null, 0.0);
      double double1 = 0.0;
      Range.expandToInclude((Range) null, 0.0);
      Range.shift(range1, 0.0);
      boolean boolean0 = true;
      Range.expandToInclude((Range) null, (-6926.74));
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-6926.74), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-778.1652433619));
      Range range1 = Range.combineIgnoringNaN(range0, (Range) null);
      Range.scale(range1, 540.9178868077945);
      Range.shift(range1, (-778.1652433619));
      Range.combine((Range) null, range0);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-3594.3836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(0.0, 1392.32339);
      Range range1 = Range.combine(range0, range0);
      range1.equals(range0);
      Range.expand(range1, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, (-1265.993593798));
      Range.shift(range1, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.expand(range0, (-1.0), (-1.0));
      range1.constrain(0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combineIgnoringNaN(range0, range0);
      range1.toString();
      Range range2 = Range.expandToInclude(range0, 0.0);
      Range range3 = Range.shift(range0, 0.0, false);
      Range range4 = Range.expand(range0, 0.0, 1321.8);
      Range.expand(range1, 0.0, 1413.0);
      Range.scale(range0, 1321.8);
      Range range5 = Range.expand(range2, 1321.8, 0.0);
      Range range6 = new Range(0.0, 0.0);
      Range.combine(range3, range6);
      Range.combine(range3, range4);
      Range.expand(range1, 0.0, 0.0);
      range4.getCentralValue();
      range3.contains(0.0);
      Range.combineIgnoringNaN(range6, range0);
      range5.constrain(0.0);
      range1.intersects(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, 0.0);
      range2.contains(0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 1111.837329242;
      double double1 = (-1455.90508);
      Range range0 = null;
      try {
        range0 = new Range(1111.837329242, (-1455.90508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1111.837329242) <= upper (-1455.90508).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 2.43882932595197;
      double double1 = 0.0;
      Range range0 = null;
      try {
        range0 = new Range(2.43882932595197, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2.43882932595197) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(953.09835329, 953.09835329);
      Range range1 = Range.scale(range0, 953.09835329);
      range0.toString();
      Range range2 = Range.shift(range1, 980.04114895453);
      Range range3 = Range.expand(range2, 0.0, 0.0);
      range2.toString();
      range1.equals("CC");
      Range range4 = Range.expand(range1, 953.09835329, 953.09835329);
      range1.getLowerBound();
      Range range5 = Range.scale(range1, 908396.4710441097);
      Range range6 = Range.expand(range5, (-175.787934), 980.04114895453);
      range6.getLowerBound();
      Range range7 = Range.combine(range3, range4);
      range1.intersects(range7);
      range2.equals("Range[953.09835329,953.09835329]");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(1330.7980893513181, 1330.7980893513181);
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.combineIgnoringNaN(range1, range0);
      range2.contains(1330.7980893513181);
      range1.equals(range0);
      range0.getCentralValue();
      Range.combine(range0, range0);
      range1.isNaNRange();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-778.1652433619));
      Range range1 = Range.combineIgnoringNaN(range0, (Range) null);
      Range range2 = Range.scale(range1, 540.9178868077945);
      Range.shift(range1, (-778.1652433619));
      Range range3 = Range.combine((Range) null, range0);
      range2.isNaNRange();
      Range.scale(range3, 540.9178868077945);
      Range.combine(range2, (Range) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = null;
      Range.combine((Range) null, (Range) null);
      double double0 = 0.0;
      Range range1 = Range.expandToInclude((Range) null, 0.0);
      Range.combineIgnoringNaN((Range) null, range1);
      Range.combine(range1, range1);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-955.639678326016), (-478.02467708849133));
      Range range1 = Range.combine(range0, range0);
      range0.constrain((-478.02467708849133));
      range0.intersects((-2513.2), (-478.02467708849133));
      range0.getUpperBound();
      Range range2 = Range.combineIgnoringNaN(range0, range1);
      Range range3 = Range.expandToInclude(range0, (-478.02467708849133));
      Range.expandToInclude(range2, (-478.02467708849133));
      Range.combine(range2, range1);
      range3.toString();
      Range.expand(range1, (-2326.2), (-478.02467708849133));
      Range range4 = Range.expand(range1, (-478.02467708849133), (-478.02467708849133));
      range4.toString();
      Range range5 = null;
      try {
        range5 = new Range(0.0, (-478.02467708849133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-478.02467708849133).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.scale(range0, 0.0);
      Range range2 = Range.shift(range1, 4497.67943, false);
      Range.shift(range2, 0.0);
      Range.combineIgnoringNaN(range0, range0);
      Range range3 = Range.shift(range0, (-1.0), true);
      Range.shift(range0, 0.0);
      range0.hashCode();
      range0.constrain((-115.29291266969));
      range3.isNaNRange();
      Range.expandToInclude(range2, 4497.67943);
      range3.hashCode();
      range3.getLowerBound();
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 4497.67943);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.combine((Range) null, (Range) null);
      Range range0 = Range.expandToInclude((Range) null, 933.34064);
      Range.combine((Range) null, (Range) null);
      Range range1 = Range.shift(range0, (-1304.0), false);
      Range.combineIgnoringNaN((Range) null, (Range) null);
      Range range2 = Range.expand(range1, 0.0, 0.0);
      range2.getLength();
      range2.constrain(933.34064);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(2234.359585013, 2234.359585013);
      Range range1 = Range.scale(range0, 2234.359585013);
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.expand(range2, 1835.16, 989.7);
      Range range4 = Range.scale(range0, 255.2766127);
      Range range5 = Range.expand(range0, 1835.16, 255.2766127);
      Range.scale(range4, 141.89655);
      Range.expand(range5, (-1003.6254), 2234.359585013);
      Range range6 = Range.shift(range4, 2251.591, true);
      Range range7 = Range.expandToInclude(range4, 2234.359585013);
      Range range8 = Range.shift(range3, (-1.0), true);
      range8.constrain(0.0);
      Range.combineIgnoringNaN(range6, range3);
      range8.intersects(1835.16, 2840.741602886238);
      range0.isNaNRange();
      range0.intersects((-654.7789823798373), 2.0);
      range7.isNaNRange();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-778.1652433619));
      Range range1 = Range.combineIgnoringNaN(range0, (Range) null);
      Range.combineIgnoringNaN((Range) null, range0);
      Range.shift(range1, (-778.1652433619));
      Range.combine((Range) null, range0);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-3594.3836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      Range range2 = Range.shift(range0, 0.0);
      Range range3 = Range.shift(range2, 153.4641263391, true);
      Range range4 = Range.expandToInclude(range0, 0.0);
      Range range5 = Range.combineIgnoringNaN(range4, range4);
      range5.toString();
      Range range6 = Range.expand(range0, 0.0, 1844.141195735204);
      Range.expandToInclude(range0, 0.0);
      Range range7 = Range.shift(range1, 0.0, true);
      range1.getUpperBound();
      Range range8 = Range.expandToInclude(range6, 939.34975444);
      Range range9 = Range.combine(range8, range0);
      range2.intersects(1844.141195735204, 0.0);
      range8.toString();
      Range range10 = Range.expand(range7, 0.0, 153.4641263391);
      Range.scale(range10, 0.0);
      range9.intersects(0.0, 1.0);
      range2.toString();
      Range.expandToInclude(range3, 0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(3333.895701, 3333.895701);
      Range range1 = Range.expandToInclude(range0, (-71.47080908994425));
      Range range2 = Range.combineIgnoringNaN(range1, range1);
      range2.getCentralValue();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.scale(range0, 1274.942);
      range1.getCentralValue();
      Range range2 = Range.scale(range0, 1274.942);
      range0.equals(range1);
      Range range3 = Range.expandToInclude(range1, 0.0);
      Range range4 = Range.scale(range3, 1274.942);
      Range range5 = Range.combineIgnoringNaN(range1, range3);
      Range range6 = Range.expandToInclude(range3, 0.0);
      range6.toString();
      range0.getLength();
      range0.getLength();
      Range.expandToInclude(range1, 1.0);
      Range range7 = Range.combineIgnoringNaN(range3, range5);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      
      Range range8 = Range.combine(range2, range4);
      Range range9 = Range.expandToInclude(range0, 1.0);
      String string0 = range9.toString();
      assertEquals("Range[0.0,1.0]", string0);
      
      Range range10 = Range.shift(range0, 1274.942, false);
      assertEquals(0.0, range10.getLength(), 0.01);
      assertEquals(1274.942, range10.getCentralValue(), 0.01);
      
      Range.scale(range9, 0.0);
      Range range11 = Range.shift(range9, 0.0, true);
      range0.hashCode();
      range0.getCentralValue();
      range3.hashCode();
      double double0 = range4.constrain((-1.0));
      assertEquals(0.0, double0, 0.01);
      
      range1.intersects(range8);
      range2.getLength();
      range4.getLowerBound();
      boolean boolean0 = range11.equals(range3);
      assertTrue(range9.equals((Object)range11));
      assertNotSame(range3, range7);
      assertFalse(boolean0);
  }
}
