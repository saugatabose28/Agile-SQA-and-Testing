/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:45:32 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.KeyToGroupMap;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyToGroupMap_ESTest extends KeyToGroupMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      keyToGroupMap0.getGroupCount();
      Integer integer0 = Integer.valueOf(1);
      keyToGroupMap0.getGroupIndex(integer0);
      keyToGroupMap0.getGroupIndex(1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "Q7U{]1", "c)", "(=OYk9iF,ew<%saF[D", "c)").when(comparable1).toString();
      keyToGroupMap0.mapKeyToGroup(comparable1, comparable1);
      Object object0 = new Object();
      Comparable<KeyToGroupMap> comparable2 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "Q7U{]1").when(comparable2).toString();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(comparable2);
      keyToGroupMap0.equals(keyToGroupMap1);
      keyToGroupMap0.equals(object0);
      keyToGroupMap1.mapKeyToGroup(integer0, integer0);
      Integer integer1 = Integer.valueOf((-1626));
      Integer integer2 = Integer.getInteger((String) null, integer0);
      keyToGroupMap0.mapKeyToGroup(integer2, integer0);
      keyToGroupMap0.mapKeyToGroup(integer1, integer1);
      keyToGroupMap0.getGroups();
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getKeyCount(comparable3);
      keyToGroupMap1.mapKeyToGroup(integer2, integer1);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.mapKeyToGroup("", "");
      keyToGroupMap1.mapKeyToGroup("", "");
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroups();
      Comparable comparable4 = keyToGroupMap1.getGroup(integer0);
      keyToGroupMap0.getGroupIndex(integer0);
      keyToGroupMap0.getGroupIndex(comparable4);
      KeyToGroupMap keyToGroupMap2 = (KeyToGroupMap)keyToGroupMap0.clone();
      keyToGroupMap2.clone();
      keyToGroupMap1.equals(integer2);
      Comparable<Object> comparable5 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroup(comparable5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable comparable1 = keyToGroupMap0.getGroup(comparable0);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.clone();
      keyToGroupMap0.getKeyCount(comparable1);
      Integer integer0 = new Integer(1);
      Integer.sum(1, 1);
      keyToGroupMap0.equals(integer0);
      keyToGroupMap0.equals(integer0);
      keyToGroupMap0.mapKeyToGroup(integer0, integer0);
      keyToGroupMap0.clone();
      Integer.divideUnsigned(721, 1);
      Integer.getInteger("");
      keyToGroupMap0.equals("");
      keyToGroupMap0.getGroups();
      Comparable comparable2 = keyToGroupMap0.getGroup(comparable1);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.mapKeyToGroup("", integer0);
      keyToGroupMap0.getGroupCount();
      Comparable<KeyToGroupMap> comparable3 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable3).toString();
      keyToGroupMap0.mapKeyToGroup(integer0, comparable3);
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(integer0);
      keyToGroupMap0.equals(keyToGroupMap1);
      keyToGroupMap0.mapKeyToGroup(comparable1, comparable2);
      keyToGroupMap0.clone();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable comparable2 = keyToGroupMap0.getGroup(comparable1);
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      keyToGroupMap1.mapKeyToGroup(comparable2, comparable2);
      keyToGroupMap1.getGroupIndex(comparable2);
      keyToGroupMap0.equals(keyToGroupMap1);
      keyToGroupMap0.getGroup(comparable0);
      String string0 = "key";
      try { 
        Integer.decode("key");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"key\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroupIndex((Comparable) null);
      keyToGroupMap0.mapKeyToGroup(comparable1, comparable1);
      keyToGroupMap0.equals("");
      keyToGroupMap0.mapKeyToGroup("", (Comparable) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroupIndex(comparable0);
      Comparable<Integer> comparable1 = null;
      // Undeclared exception!
      try { 
        keyToGroupMap0.getGroup((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1827);
      Integer.toUnsignedString(1827);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      keyToGroupMap0.getGroups();
      keyToGroupMap0.equals("1827");
      keyToGroupMap0.getGroups();
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroupIndex(integer0);
      Integer.toUnsignedString((-1165));
      keyToGroupMap0.clone();
      Comparable comparable0 = keyToGroupMap0.getGroup(integer0);
      keyToGroupMap0.getGroupIndex(integer0);
      keyToGroupMap0.mapKeyToGroup(integer0, integer0);
      keyToGroupMap0.mapKeyToGroup(integer0, integer0);
      keyToGroupMap0.mapKeyToGroup(comparable0, "1827");
      Comparable comparable1 = keyToGroupMap0.getGroup("1827");
      keyToGroupMap0.getGroupIndex(comparable1);
      keyToGroupMap0.getGroups();
      keyToGroupMap0.getGroupCount();
      Comparable comparable2 = keyToGroupMap0.getGroup(comparable0);
      keyToGroupMap0.mapKeyToGroup("1827", integer0);
      keyToGroupMap0.getKeyCount(comparable2);
      keyToGroupMap0.getGroups();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      keyToGroupMap0.clone();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Integer integer0 = Integer.valueOf(1);
      keyToGroupMap0.getGroupIndex(integer0);
      String string0 = "+@HxP{8n3>p";
      Integer.getInteger("+@HxP{8n3>p", (-1));
      Integer.sum(1, (-1));
      keyToGroupMap0.getGroupIndex("+@HxP{8n3>p");
      Integer.sum((-568), (-568));
      Integer.min(1, (-1));
      keyToGroupMap0.getGroup(integer0);
      keyToGroupMap0.getGroups();
      Comparable<KeyToGroupMap> comparable0 = null;
      // Undeclared exception!
      try { 
        keyToGroupMap0.getKeyCount((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.mapKeyToGroup(comparable2, comparable2);
      Comparable<Object> comparable3 = null;
      // Undeclared exception!
      try { 
        keyToGroupMap0.mapKeyToGroup((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<String> comparable0 = null;
      KeyToGroupMap keyToGroupMap0 = null;
      try {
        keyToGroupMap0 = new KeyToGroupMap((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'defaultGroup' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroups();
      Comparable comparable1 = keyToGroupMap0.getGroup(comparable0);
      Comparable comparable2 = keyToGroupMap0.getGroup(comparable1);
      Object object0 = keyToGroupMap0.clone();
      Comparable comparable3 = keyToGroupMap0.getGroup(comparable2);
      keyToGroupMap0.clone();
      keyToGroupMap0.equals(object0);
      Comparable<String> comparable4 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getKeyCount(comparable4);
      keyToGroupMap0.clone();
      keyToGroupMap0.getKeyCount(comparable3);
      keyToGroupMap0.getKeyCount(comparable1);
      keyToGroupMap0.clone();
      keyToGroupMap0.getKeyCount(comparable1);
      keyToGroupMap0.mapKeyToGroup(comparable2, comparable1);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.getGroupCount();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      keyToGroupMap0.getGroupCount();
      Integer integer0 = Integer.valueOf(1);
      keyToGroupMap0.getGroupIndex(integer0);
      keyToGroupMap0.getGroupIndex(1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable1).toString();
      keyToGroupMap0.mapKeyToGroup(comparable1, comparable1);
      Object object0 = new Object();
      Comparable<KeyToGroupMap> comparable2 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable2).toString();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(comparable2);
      keyToGroupMap0.equals(keyToGroupMap1);
      keyToGroupMap0.equals(object0);
      keyToGroupMap1.mapKeyToGroup(integer0, integer0);
      Integer integer1 = Integer.valueOf((-1626));
      Integer integer2 = Integer.getInteger("", integer1);
      keyToGroupMap0.mapKeyToGroup(integer2, integer0);
      keyToGroupMap0.mapKeyToGroup(integer1, integer1);
      keyToGroupMap0.getGroups();
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getKeyCount(comparable3);
      keyToGroupMap1.mapKeyToGroup(integer2, integer1);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.mapKeyToGroup("", "");
      keyToGroupMap1.mapKeyToGroup("", "");
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroups();
      keyToGroupMap0.mapKeyToGroup(integer1, "");
      Comparable comparable4 = keyToGroupMap1.getGroup(integer0);
      keyToGroupMap0.getGroupIndex(integer0);
      keyToGroupMap0.getGroupIndex(comparable4);
      keyToGroupMap0.clone();
      keyToGroupMap0.clone();
      keyToGroupMap1.equals(integer2);
      Comparable<Object> comparable5 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroup(comparable5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroups();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable comparable2 = keyToGroupMap0.getGroup(comparable1);
      Comparable comparable3 = keyToGroupMap0.getGroup(comparable0);
      Comparable<Object> comparable4 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getKeyCount(comparable4);
      Comparable comparable5 = keyToGroupMap0.getGroup(comparable3);
      keyToGroupMap0.equals("");
      keyToGroupMap0.getKeyCount("");
      keyToGroupMap0.mapKeyToGroup("", "");
      keyToGroupMap0.equals(comparable2);
      Comparable comparable6 = keyToGroupMap0.getGroup("");
      keyToGroupMap0.getKeyCount("");
      keyToGroupMap0.getGroupIndex("");
      keyToGroupMap0.equals(keyToGroupMap0);
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroup(comparable3);
      keyToGroupMap0.mapKeyToGroup("", "");
      keyToGroupMap0.equals(keyToGroupMap0);
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      keyToGroupMap1.getGroupIndex(comparable6);
      keyToGroupMap0.equals(keyToGroupMap1);
      keyToGroupMap0.getGroups();
      keyToGroupMap0.getGroups();
      keyToGroupMap1.getGroupCount();
      keyToGroupMap1.getGroups();
      KeyToGroupMap keyToGroupMap2 = new KeyToGroupMap(comparable5);
      keyToGroupMap0.equals(keyToGroupMap2);
      Object object0 = new Object();
      keyToGroupMap0.equals(object0);
      keyToGroupMap2.equals((Object) null);
      keyToGroupMap1.getKeyCount("");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.mapKeyToGroup(comparable0, comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroup(comparable1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<KeyToGroupMap> comparable0 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap1.getGroup(comparable1);
      keyToGroupMap0.equals(keyToGroupMap1);
      keyToGroupMap0.clone();
      Comparable<KeyToGroupMap> comparable2 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getKeyCount(comparable2);
      Comparable<KeyToGroupMap> comparable3 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap1.getKeyCount(comparable3);
      Comparable<Object> comparable4 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap1.getGroup(comparable4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroups();
      Object object0 = keyToGroupMap0.clone();
      keyToGroupMap0.equals(object0);
      keyToGroupMap0.clone();
      keyToGroupMap0.getGroups();
      keyToGroupMap0.equals("Exception.");
      List list0 = keyToGroupMap0.getGroups();
      keyToGroupMap0.getKeyCount("Exception.");
      List list1 = keyToGroupMap0.getGroups();
      keyToGroupMap0.equals(list0);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.getGroups();
      keyToGroupMap0.mapKeyToGroup("Exception.", "Exception.");
      keyToGroupMap0.mapKeyToGroup("Exception.", "Exception.");
      keyToGroupMap0.getGroups();
      keyToGroupMap0.equals(list1);
      keyToGroupMap0.getGroupIndex("Exception.");
      keyToGroupMap0.mapKeyToGroup("Exception.", "Exception.");
      keyToGroupMap0.clone();
      keyToGroupMap0.mapKeyToGroup("Exception.", "Exception.");
      keyToGroupMap0.getKeyCount("Exception.");
      keyToGroupMap0.clone();
      keyToGroupMap0.getKeyCount("Exception.");
      keyToGroupMap0.getKeyCount("Exception.");
      Comparable comparable1 = keyToGroupMap0.getGroup("Exception.");
      Integer.getInteger("^If^Go/#>\u0007CGwsGMi");
      keyToGroupMap0.mapKeyToGroup("Exception.", (Comparable) null);
      keyToGroupMap0.mapKeyToGroup("^If^Go/#>\u0007CGwsGMi", "Exception.");
      Comparable comparable2 = keyToGroupMap0.getGroup(comparable1);
      keyToGroupMap0.getGroupCount();
      keyToGroupMap0.getGroup("Exception.");
      int int0 = keyToGroupMap0.getGroupIndex(comparable2);
      assertEquals(2, keyToGroupMap0.getGroupCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(") to be in the range ", ") to be in the range ", ") to be in the range ").when(comparable0).toString();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.mapKeyToGroup(comparable1, comparable1);
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(") to be in the range ", ") to be in the range ").when(comparable2).toString();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(comparable2);
      keyToGroupMap0.equals(keyToGroupMap1);
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.getGroupIndex(comparable3);
      keyToGroupMap1.equals(keyToGroupMap0);
      Comparable<String> comparable4 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap0.mapKeyToGroup(comparable4, comparable4);
      Comparable<KeyToGroupMap> comparable5 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable6 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap1.getGroupIndex(comparable6);
      keyToGroupMap0.getGroup(comparable5);
      keyToGroupMap1.clone();
      keyToGroupMap0.getGroupCount();
      Comparable<KeyToGroupMap> comparable7 = (Comparable<KeyToGroupMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      keyToGroupMap1.mapKeyToGroup(comparable7, comparable7);
      // Undeclared exception!
      try { 
        keyToGroupMap0.getKeyCount((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      keyToGroupMap0.getGroups();
      Object object0 = keyToGroupMap1.clone();
      boolean boolean0 = keyToGroupMap0.equals(keyToGroupMap1);
      assertNotSame(keyToGroupMap1, object0);
      assertTrue(keyToGroupMap1.equals((Object)object0));
      assertTrue(boolean0);
  }
}
