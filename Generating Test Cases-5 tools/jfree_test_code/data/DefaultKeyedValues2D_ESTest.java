/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:36:27 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DefaultKeyedValues2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValues2D_ESTest extends DefaultKeyedValues2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Integer integer0 = new Integer((-1042));
      assertEquals((-1042), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2D0.setValue(integer0, integer0, integer0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.getColumnIndex(integer0);
      assertEquals(0, int0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      List list0 = defaultKeyedValues2D0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      defaultKeyedValues2D0.removeColumn((Comparable) integer0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(integer0.equals((Object)int0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(int1 == int0);
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      defaultKeyedValues2D0.removeValue(integer0, integer0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      int int2 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      List list1 = defaultKeyedValues2D0.getColumnKeys();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(list1.equals((Object)list0));
      
      int int3 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = defaultKeyedValues2D0.getColumnIndex(integer0);
      assertEquals((-1), int4);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      
      List list2 = defaultKeyedValues2D0.getRowKeys();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) integer0, (Comparable) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: -1042
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      int int1 = defaultKeyedValues2D1.getRowCount();
      assertEquals(0, int1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(int1 == int0);
      
      int int2 = defaultKeyedValues2D0.getRowIndex(0);
      assertEquals((-1), int2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((-1), comparable1, comparable1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      defaultKeyedValues2D0.removeRow(0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      int int3 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(1, int3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue(1, comparable2, comparable3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      DefaultKeyedValues2D defaultKeyedValues2D2 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D2);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D2.getColumnCount());
      assertEquals(1, defaultKeyedValues2D2.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      
      int int4 = defaultKeyedValues2D0.hashCode();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      Comparable<String> comparable4 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable4).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) 553243519, (Comparable) comparable4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      int int0 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D0.getColumnIndex(comparable1);
      assertEquals((-1), int1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int1 == int0);
      
      int int2 = defaultKeyedValues2D0.getRowIndex((-1));
      assertEquals((-1), int2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparable2).compareTo(anyString());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable2).toString();
      defaultKeyedValues2D0.setValue((-1), comparable2, comparable2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      int int3 = defaultKeyedValues2D0.hashCode();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = defaultKeyedValues2D0.getRowCount();
      assertEquals(1, int4);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable3).toString();
      defaultKeyedValues2D0.setValue(1, comparable3, comparable3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      Integer integer0 = (Integer)defaultKeyedValues2D0.getValue(0, 0);
      assertEquals((-1), (int)integer0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotNull(integer0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      
      Comparable comparable4 = defaultKeyedValues2D0.getColumnKey(0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotNull(comparable4);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      int int5 = defaultKeyedValues2D0.getRowIndex(comparable4);
      assertEquals(0, int5);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean1 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(boolean1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(boolean1 == boolean0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      defaultKeyedValues2D0.removeValue(comparable4, comparable4);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      defaultKeyedValues2D0.removeColumn(0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      int int6 = defaultKeyedValues2D0.getRowCount();
      assertEquals(1, int6);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(comparable4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1580).when(comparable0).compareTo(any());
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeValue(comparable0, comparable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      String string0 = "";
      int int0 = defaultKeyedValues2D0.getColumnIndex("");
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.addValue((-1), "", "");
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      Integer integer0 = (Integer)defaultKeyedValues2D0.getValue((Comparable) "", (Comparable) "");
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals("");
      assertFalse(boolean0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) integer0, (Comparable) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised rowKey: -1
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      List list0 = defaultKeyedValues2D0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int1 = (-1823);
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) "Q<M(T)R-p3bb", (Comparable) "Q<M(T)R-p3bb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: Q<M(T)R-p3bb
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D0.getColumnIndex(comparable1);
      assertEquals((-1), int1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(int1 == int0);
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = defaultKeyedValues2D0.getRowIndex(comparable2);
      assertEquals((-1), int2);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-2059), (-1)).when(comparable3).compareTo(any());
      defaultKeyedValues2D0.addValue((-1), comparable3, comparable3);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      Comparable<String> comparable4 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int3 = defaultKeyedValues2D0.getRowIndex(comparable4);
      assertEquals((-2), int3);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      Comparable<String> comparable5 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((-2), comparable5, comparable5);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      DefaultKeyedValues2D defaultKeyedValues2D2 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D2);
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      
      defaultKeyedValues2D2.hashCode();
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      
      int int0 = defaultKeyedValues2D2.getRowCount();
      assertEquals(0, int0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      
      int int1 = defaultKeyedValues2D0.getRowIndex(0);
      assertEquals((-1), int1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertFalse(int1 == int0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D1.setValue(871, (-1), comparable0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D2);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D2));
      
      int int2 = defaultKeyedValues2D1.getColumnCount();
      assertEquals(1, int2);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D2);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 1
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getRowIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      List list0 = defaultKeyedValues2D0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowKey((-1629));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.hashCode();
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int1 = defaultKeyedValues2D0.getRowIndex(0);
      assertEquals((-1), int1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(int1 == int0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue(871, (-1), comparable0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = defaultKeyedValues2D0.getRowIndex(comparable1);
      assertEquals((-1), int2);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      DefaultKeyedValues2D defaultKeyedValues2D2 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D2);
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      
      Comparable<DefaultKeyedValues2D> comparable2 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int3 = defaultKeyedValues2D2.getColumnIndex(comparable2);
      assertEquals((-1), int3);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.addValue((-1), (Comparable) null, comparable3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<DefaultKeyedValues2D> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getColumnKey((-601));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.hashCode();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.getRowIndex(871);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Integer> comparable1 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.setValue((-1), comparable0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<DefaultKeyedValues2D> comparable2 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue((Number) null, comparable1, comparable2);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      Number number0 = defaultKeyedValues2D0.getValue(0, 0);
      assertNull(number0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      int int1 = defaultKeyedValues2D1.getColumnIndex(0);
      assertEquals((-1), int1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(int1 == int0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.removeValue((-1), comparable0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<DefaultKeyedValues2D> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue(0, comparable0, comparable0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D0.hashCode();
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(int1 == int0);
      
      int int2 = defaultKeyedValues2D0.getRowCount();
      assertEquals(1, int2);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(int2 == int0);
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue(1, comparable2, comparable2);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue((-1012959958), comparable3, comparable3);
      assertEquals(3, defaultKeyedValues2D0.getRowCount());
      assertEquals(3, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.removeValue(comparable1, comparable1);
      assertEquals(3, defaultKeyedValues2D0.getRowCount());
      assertEquals(3, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      List list0 = defaultKeyedValues2D0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getRowIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int1 = defaultKeyedValues2D0.getColumnIndex((-1));
      assertEquals((-1), int1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(int1 == int0);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultKeyedValues2D0.equals(list0);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getRowKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      String string0 = null;
      boolean boolean1 = defaultKeyedValues2D0.equals((Object) null);
      assertFalse(boolean1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      int int0 = (-3347);
      int int1 = 0;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((-3347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int0 = 1614;
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D1.getValue((-1491), 1614);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int0 = 2672;
      int int1 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(int1 == int0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Integer> comparable1 = null;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      List list0 = defaultKeyedValues2D0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int1 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(int1 == int0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue(0, comparable0, comparable0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = defaultKeyedValues2D0.getRowIndex(comparable1);
      assertEquals((-1), int2);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = defaultKeyedValues2D0.getColumnIndex((-1));
      assertEquals((-1), int3);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      Number number0 = defaultKeyedValues2D0.getValue(0, 0);
      assertEquals(0, number0);
      assertNotNull(number0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(number0.equals((Object)int2));
      assertFalse(number0.equals((Object)int3));
      assertTrue(number0.equals((Object)int0));
      assertTrue(number0.equals((Object)int1));
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue((Comparable) 0, (Comparable) comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultKeyedValues2D1.setValue((Number) null, comparable0, comparable0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue(2212, 2212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2212, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int0 = 1851;
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn((Comparable) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.hashCode();
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((Comparable) 871);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 871
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.removeValue(0, comparable0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Integer integer0 = new Integer((-1605));
      assertEquals((-1605), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2D0.setValue(integer0, integer0, integer0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.hashCode();
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getRowIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      defaultKeyedValues2D0.setValue(integer1, integer1, integer1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      int int1 = defaultKeyedValues2D0.getRowIndex((-1));
      assertEquals(1, int1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertFalse(int1 == int0);
      
      defaultKeyedValues2D0.removeValue(integer1, integer0);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.removeValue((-1370923), comparable1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.removeValue(integer0, integer1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.removeValue(integer0, comparable2);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      int int2 = defaultKeyedValues2D0.getRowIndex(integer1);
      assertEquals(1, int2);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      List list0 = defaultKeyedValues2D0.getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D1.getRowCount());
      assertEquals(2, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      int int3 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(2, int3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(2, int4);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = defaultKeyedValues2D0.getRowCount();
      assertEquals(2, int5);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      
      int int6 = defaultKeyedValues2D0.getRowIndex(integer0);
      assertEquals(0, int6);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      
      List list1 = defaultKeyedValues2D0.getColumnKeys();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(list1.equals((Object)list0));
      
      defaultKeyedValues2D0.removeRow((Comparable) integer1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int5));
      
      defaultKeyedValues2D0.removeValue(integer0, integer1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int6));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int5));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(list1);
      assertFalse(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(list1, list0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(list1.equals((Object)list0));
      
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.removeValue(integer1, comparable3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int5));
      
      defaultKeyedValues2D0.removeRow((Comparable) integer0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int6));
      
      List list2 = defaultKeyedValues2D0.getColumnKeys();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      
      int int7 = defaultKeyedValues2D0.getColumnIndex(integer0);
      assertEquals(0, int7);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int6));
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      
      int int8 = defaultKeyedValues2D0.getRowIndex(integer0);
      assertEquals((-1), int8);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int6));
      assertTrue(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      
      defaultKeyedValues2D0.removeColumn((Comparable) integer0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int8));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int6));
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow((Comparable) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: -1
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.getColumnIndex("");
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.addValue((-1), "", "");
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      Number number0 = defaultKeyedValues2D0.getValue((Comparable) "", (Comparable) "");
      assertEquals((-1), number0);
      assertNotNull(number0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(number0.equals((Object)int0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals("");
      assertFalse(boolean0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      boolean boolean1 = defaultKeyedValues2D0.equals("org.jfree.data.DefaultKeyedValues2D");
      assertFalse(boolean1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(boolean1 == boolean0);
      
      defaultKeyedValues2D0.addValue(number0, "", "");
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(number0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      DefaultKeyedValues2D defaultKeyedValues2D2 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertNotNull(defaultKeyedValues2D2);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D2);
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      
      List list0 = defaultKeyedValues2D0.getColumnKeys();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      List list1 = defaultKeyedValues2D0.getRowKeys();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(list1.equals((Object)list0));
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D0.getRowIndex(comparable1);
      assertEquals((-1), int1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(int1 == int0);
      
      int int2 = defaultKeyedValues2D2.hashCode();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((-1), 871, comparable2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      
      boolean boolean1 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertFalse(boolean1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D2));
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(boolean1 == boolean0);
      
      int int3 = 1;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      int int0 = 3468;
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeColumn(3468);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3468, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(false);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      defaultKeyedValues2D0.setValue(0, comparable0, comparable0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D1);
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D0.hashCode();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int1 == int0);
      
      int int2 = defaultKeyedValues2D0.getRowCount();
      assertEquals(1, int2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(int2 == int0);
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue(1, comparable2, comparable2);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.setValue(419690647, comparable3, comparable3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(3, defaultKeyedValues2D0.getColumnCount());
      assertEquals(3, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      defaultKeyedValues2D0.removeValue(comparable1, comparable1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(3, defaultKeyedValues2D0.getColumnCount());
      assertEquals(3, defaultKeyedValues2D0.getRowCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      defaultKeyedValues2D0.clear();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      
      int int3 = defaultKeyedValues2D0.getRowCount();
      assertEquals(0, int3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      List list0 = defaultKeyedValues2D0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(true);
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      Comparable<DefaultKeyedValues2D> comparable1 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable1).compareTo(any(org.jfree.data.DefaultKeyedValues2D.class));
      defaultKeyedValues2D1.setValue((Number) null, comparable1, comparable1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultKeyedValues2D1.getRowIndex(comparable2);
      assertEquals(0, int1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(int1 == int0);
      
      int int2 = defaultKeyedValues2D1.hashCode();
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = defaultKeyedValues2D0.getRowIndex(1561376349);
      assertEquals((-1), int3);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      DefaultKeyedValues2D defaultKeyedValues2D2 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertNotNull(defaultKeyedValues2D2);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      
      boolean boolean0 = defaultKeyedValues2D0.equals(defaultKeyedValues2D2);
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D2);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D2, defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D2.getRowCount());
      assertEquals(0, defaultKeyedValues2D2.getColumnCount());
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D2));
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D2.equals((Object)defaultKeyedValues2D0));
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D1.getColumnKey(48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2D0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      defaultKeyedValues2D0.getColumnCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.getRowKeys();
      defaultKeyedValues2D0.setValue((Number) null, comparable0, comparable0);
      defaultKeyedValues2D0.hashCode();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues2D0.addValue((Number) null, 247297330, comparable1);
      defaultKeyedValues2D0.clear();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      defaultKeyedValues2D0.setValue((Number) null, 0, comparable2);
      defaultKeyedValues2D0.removeColumn(0);
      defaultKeyedValues2D0.hashCode();
      defaultKeyedValues2D0.clear();
      defaultKeyedValues2D0.getRowCount();
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable3).toString();
      defaultKeyedValues2D0.addValue((Number) null, comparable3, comparable3);
      Comparable comparable4 = defaultKeyedValues2D0.getRowKey(0);
      defaultKeyedValues2D0.addValue((Number) null, comparable4, comparable4);
      defaultKeyedValues2D0.setValue((Number) null, comparable4, comparable4);
      Comparable comparable5 = defaultKeyedValues2D0.getColumnKey(0);
      defaultKeyedValues2D0.removeRow(comparable4);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.removeValue(comparable4, comparable5);
      defaultKeyedValues2D0.clear();
      defaultKeyedValues2D0.addValue((Number) null, comparable5, comparable4);
      defaultKeyedValues2D0.clear();
      defaultKeyedValues2D0.getColumnKeys();
      defaultKeyedValues2D0.setValue((Number) null, comparable5, comparable4);
      defaultKeyedValues2D0.clear();
      defaultKeyedValues2D0.getColumnKeys();
      defaultKeyedValues2D0.removeValue(comparable4, comparable4);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
  }
}
