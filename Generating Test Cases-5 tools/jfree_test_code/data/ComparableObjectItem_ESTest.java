/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:48:09 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparableObjectItem_ESTest extends ComparableObjectItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-161)).when(comparable0).compareTo(anyString());
      doReturn("org.jfree.data.ComparableObjectItem", "org.jfree.data.ComparableObjectItem", "cx").when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      assertNotNull(comparableObjectItem0);
      
      ComparableObjectItem comparableObjectItem1 = (ComparableObjectItem)comparableObjectItem0.clone();
      assertNotNull(comparableObjectItem1);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertTrue(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      comparableObjectItem0.setObject(comparableObjectItem1);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      assertNotNull(comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      
      int int0 = comparableObjectItem0.compareTo(comparableObjectItem2);
      assertEquals(0, int0);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      
      boolean boolean0 = comparableObjectItem0.equals("");
      assertFalse(boolean0);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      
      int int1 = comparableObjectItem0.hashCode();
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(int1 == int0);
      
      comparableObjectItem0.setObject(comparableObjectItem1);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      
      Comparable comparable1 = comparableObjectItem0.getComparable();
      assertNotNull(comparable1);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      
      boolean boolean1 = comparableObjectItem0.equals(comparableObjectItem2);
      assertFalse(boolean1);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      assertTrue(boolean1 == boolean0);
      
      ComparableObjectItem comparableObjectItem3 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem1);
      assertNotNull(comparableObjectItem3);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem2));
      
      boolean boolean2 = comparableObjectItem1.equals("");
      assertFalse(boolean2);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      comparableObjectItem3.setObject("");
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertNotSame(comparableObjectItem3, comparableObjectItem0);
      assertNotSame(comparableObjectItem3, comparableObjectItem1);
      assertNotSame(comparableObjectItem3, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem2));
      
      int int2 = comparableObjectItem0.compareTo("");
      assertEquals(1, int2);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(int2 == int0);
      
      comparableObjectItem0.setObject(comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertNotSame(comparableObjectItem3, comparableObjectItem0);
      assertNotSame(comparableObjectItem3, comparableObjectItem1);
      assertNotSame(comparableObjectItem3, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem2));
      
      boolean boolean3 = comparableObjectItem2.equals(comparableObjectItem3);
      assertFalse(boolean3);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertNotSame(comparableObjectItem2, comparableObjectItem3);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertNotSame(comparableObjectItem3, comparableObjectItem0);
      assertNotSame(comparableObjectItem3, comparableObjectItem1);
      assertNotSame(comparableObjectItem3, comparableObjectItem2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem2));
      
      boolean boolean4 = comparableObjectItem0.equals(comparableObjectItem0);
      assertTrue(boolean4);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      
      comparableObjectItem0.setObject(comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertNotSame(comparableObjectItem3, comparableObjectItem0);
      assertNotSame(comparableObjectItem3, comparableObjectItem1);
      assertNotSame(comparableObjectItem3, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem2));
      
      Comparable comparable2 = comparableObjectItem1.getComparable();
      assertNotNull(comparable2);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertSame(comparable2, comparable1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      
      String string0 = (String)comparableObjectItem3.getObject();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertNotSame(comparableObjectItem3, comparableObjectItem0);
      assertNotSame(comparableObjectItem3, comparableObjectItem1);
      assertNotSame(comparableObjectItem3, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem3.equals((Object)comparableObjectItem2));
      
      ComparableObjectItem comparableObjectItem4 = (ComparableObjectItem)comparableObjectItem1.getObject();
      assertNotNull(comparableObjectItem4);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem3);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem3);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem4.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem4.equals((Object)comparableObjectItem3));
      assertFalse(comparableObjectItem4.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem4.equals((Object)comparableObjectItem0));
      
      // Undeclared exception!
      try { 
        comparableObjectItem4.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1279)).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      assertNotNull(comparableObjectItem0);
      
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, "");
      assertNotNull(comparableObjectItem1);
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      Object object0 = comparableObjectItem1.clone();
      assertNotNull(object0);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(object0, comparableObjectItem1);
      assertNotSame(object0, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(object0.equals((Object)comparableObjectItem0));
      assertTrue(object0.equals((Object)comparableObjectItem1));
      
      int int0 = comparableObjectItem0.compareTo(comparableObjectItem1);
      assertEquals((-1279), int0);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, object0);
      assertFalse(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      Object object1 = comparableObjectItem0.getObject();
      assertNotNull(object1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      
      Object object2 = comparableObjectItem1.getObject();
      assertNotNull(object2);
      assertEquals("", object2);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, object0);
      assertFalse(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      assertNotNull(comparableObjectItem0);
      
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, "]G7! 1;d`dV");
      assertNotNull(comparableObjectItem1);
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      boolean boolean0 = comparableObjectItem0.equals(comparableObjectItem1);
      assertFalse(boolean0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparable0, comparableObjectItem0);
      assertNotNull(comparableObjectItem2);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      
      boolean boolean1 = comparableObjectItem0.equals(comparableObjectItem2);
      assertFalse(boolean1);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      assertTrue(boolean1 == boolean0);
      
      comparableObjectItem2.hashCode();
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      
      Comparable comparable1 = comparableObjectItem2.getComparable();
      assertNotNull(comparable1);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      
      comparableObjectItem0.setObject(comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      
      Object object0 = comparableObjectItem2.clone();
      assertNotNull(object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, object0);
      assertNotSame(object0, comparableObjectItem0);
      assertNotSame(object0, comparableObjectItem2);
      assertNotSame(object0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      assertTrue(object0.equals((Object)comparableObjectItem2));
      assertFalse(object0.equals((Object)comparableObjectItem1));
      
      Comparable comparable2 = comparableObjectItem0.getComparable();
      assertNotNull(comparable2);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertSame(comparable2, comparable1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      
      Object object1 = comparableObjectItem2.clone();
      assertNotNull(object1);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, object0);
      assertNotSame(comparableObjectItem2, object1);
      assertNotSame(object1, comparableObjectItem0);
      assertNotSame(object1, object0);
      assertNotSame(object1, comparableObjectItem2);
      assertNotSame(object1, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem2.equals((Object)object0));
      assertFalse(object1.equals((Object)comparableObjectItem1));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)comparableObjectItem2));
      
      Object object2 = comparableObjectItem2.clone();
      assertNotNull(object2);
      assertNotSame(comparableObjectItem0, comparableObjectItem2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem2, object2);
      assertNotSame(comparableObjectItem2, comparableObjectItem0);
      assertNotSame(comparableObjectItem2, comparableObjectItem1);
      assertNotSame(comparableObjectItem2, object0);
      assertNotSame(comparableObjectItem2, object1);
      assertNotSame(object2, comparableObjectItem2);
      assertNotSame(object2, object1);
      assertNotSame(object2, comparableObjectItem1);
      assertNotSame(object2, object0);
      assertNotSame(object2, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem2.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem2.equals((Object)object1));
      assertTrue(comparableObjectItem2.equals((Object)object0));
      assertFalse(object2.equals((Object)comparableObjectItem1));
      assertTrue(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)comparableObjectItem2));
      assertTrue(object2.equals((Object)object1));
      
      // Undeclared exception!
      try { 
        comparableObjectItem0.equals(object2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, (Object) null);
      assertNotNull(comparableObjectItem0);
      
      comparableObjectItem0.hashCode();
      Object object0 = comparableObjectItem0.getObject();
      assertNull(object0);
      
      Comparable comparable1 = comparableObjectItem0.getComparable();
      assertNotNull(comparable1);
      
      boolean boolean0 = comparableObjectItem0.equals(comparable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      assertNotNull(comparableObjectItem0);
      
      Object object0 = comparableObjectItem0.clone();
      assertNotNull(object0);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object0, comparableObjectItem0);
      assertTrue(object0.equals((Object)comparableObjectItem0));
      
      comparableObjectItem0.hashCode();
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      
      int int0 = comparableObjectItem0.compareTo("e]?Y5jF");
      assertEquals(1, int0);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem("e]?Y5jF", comparableObjectItem0);
      assertNotNull(comparableObjectItem1);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      int int1 = comparableObjectItem0.compareTo(comparableObjectItem1);
      assertEquals(0, int1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = comparableObjectItem1.equals("e]?Y5jF");
      assertFalse(boolean0);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      boolean boolean1 = comparableObjectItem1.equals(comparableObjectItem0);
      assertFalse(boolean1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = comparableObjectItem0.equals("e]?Y5jF");
      assertFalse(boolean2);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object object1 = comparableObjectItem0.getObject();
      assertNotNull(object1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      
      Comparable comparable1 = comparableObjectItem1.getComparable();
      assertNotNull(comparable1);
      assertEquals("e]?Y5jF", comparable1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      int int2 = comparableObjectItem1.compareTo(comparable1);
      assertEquals(1, int2);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      comparableObjectItem1.setObject("e]?Y5jF");
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      // Undeclared exception!
      try { 
        comparableObjectItem1.compareTo(comparableObjectItem0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyString());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      assertNotNull(comparableObjectItem0);
      
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      assertNotNull(comparableObjectItem1);
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      int int0 = comparableObjectItem0.compareTo(comparableObjectItem1);
      assertEquals(0, int0);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      
      int int1 = comparableObjectItem0.compareTo("C%}Iu+G|P");
      assertEquals(1, int1);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, (Object) null);
      assertNotNull(comparableObjectItem0);
      
      comparableObjectItem0.hashCode();
      comparableObjectItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparable0).compareTo(anyString());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      assertNotNull(comparableObjectItem0);
      
      Object object0 = comparableObjectItem0.clone();
      assertNotNull(object0);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object0, comparableObjectItem0);
      assertTrue(object0.equals((Object)comparableObjectItem0));
      
      int int0 = comparableObjectItem0.compareTo(object0);
      assertEquals(0, int0);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object0, comparableObjectItem0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(object0.equals((Object)comparableObjectItem0));
      
      String string0 = "";
      String string1 = "k^ ]$2Y!tS-W9i>";
      int int1 = comparableObjectItem0.compareTo("k^ ]$2Y!tS-W9i>");
      assertEquals(1, int1);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(int1 == int0);
      
      int int2 = comparableObjectItem0.compareTo("");
      assertEquals(1, int2);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string2 = null;
      int int3 = comparableObjectItem0.compareTo((Object) null);
      assertEquals(1, int3);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      Object object1 = comparableObjectItem0.clone();
      assertNotNull(object1);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object1, object0);
      assertNotSame(object1, comparableObjectItem0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(object1.equals((Object)comparableObjectItem0));
      assertTrue(object1.equals((Object)object0));
      
      Comparable comparable1 = comparableObjectItem0.getComparable();
      assertNotNull(comparable1);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(comparableObjectItem0.equals((Object)object1));
      
      Object object2 = comparableObjectItem0.clone();
      assertNotNull(object2);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object2, object0);
      assertNotSame(object2, comparableObjectItem0);
      assertNotSame(object2, object1);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(comparableObjectItem0.equals((Object)object1));
      assertTrue(object2.equals((Object)comparableObjectItem0));
      assertTrue(object2.equals((Object)object0));
      assertTrue(object2.equals((Object)object1));
      
      int int4 = comparableObjectItem0.compareTo((Object) null);
      assertEquals(1, int4);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(comparableObjectItem0.equals((Object)object2));
      assertTrue(comparableObjectItem0.equals((Object)object1));
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = comparableObjectItem0.compareTo(comparable1);
      assertEquals(1, int5);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, object0);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(comparableObjectItem0.equals((Object)object2));
      assertTrue(comparableObjectItem0.equals((Object)object1));
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparable1, comparableObjectItem0);
      assertNotNull(comparableObjectItem1);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(comparableObjectItem0.equals((Object)object2));
      assertTrue(comparableObjectItem0.equals((Object)object1));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)object2));
      assertFalse(comparableObjectItem1.equals((Object)object1));
      
      int int6 = comparableObjectItem1.compareTo(object1);
      assertEquals(0, int6);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object1, object0);
      assertNotSame(object1, comparableObjectItem1);
      assertNotSame(object1, comparableObjectItem0);
      assertNotSame(object1, object2);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, object2);
      assertNotSame(comparableObjectItem1, object1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(comparableObjectItem0.equals((Object)object0));
      assertTrue(comparableObjectItem0.equals((Object)object2));
      assertTrue(comparableObjectItem0.equals((Object)object1));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertTrue(object1.equals((Object)comparableObjectItem0));
      assertFalse(object1.equals((Object)comparableObjectItem1));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)object2));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)object2));
      assertFalse(comparableObjectItem1.equals((Object)object1));
      
      comparableObjectItem0.setObject(comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, object2);
      assertNotSame(comparableObjectItem1, object1);
      assertFalse(comparableObjectItem0.equals((Object)object1));
      assertFalse(comparableObjectItem0.equals((Object)object2));
      assertFalse(comparableObjectItem0.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)object2));
      assertFalse(comparableObjectItem1.equals((Object)object1));
      
      Comparable comparable2 = comparableObjectItem0.getComparable();
      assertNotNull(comparable2);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertSame(comparable2, comparable1);
      assertFalse(comparableObjectItem0.equals((Object)object1));
      assertFalse(comparableObjectItem0.equals((Object)object2));
      assertFalse(comparableObjectItem0.equals((Object)object0));
      
      comparableObjectItem1.setObject(object1);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertNotSame(object1, object0);
      assertNotSame(object1, comparableObjectItem1);
      assertNotSame(object1, comparableObjectItem0);
      assertNotSame(object1, object2);
      assertSame(comparable1, comparable2);
      assertNotSame(comparableObjectItem1, object0);
      assertNotSame(comparableObjectItem1, comparableObjectItem0);
      assertNotSame(comparableObjectItem1, object2);
      assertNotSame(comparableObjectItem1, object1);
      assertFalse(comparableObjectItem0.equals((Object)object1));
      assertFalse(comparableObjectItem0.equals((Object)object2));
      assertFalse(comparableObjectItem0.equals((Object)object0));
      assertFalse(object1.equals((Object)comparableObjectItem1));
      assertFalse(object1.equals((Object)comparableObjectItem0));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)object2));
      assertFalse(comparableObjectItem1.equals((Object)object0));
      assertFalse(comparableObjectItem1.equals((Object)comparableObjectItem0));
      assertFalse(comparableObjectItem1.equals((Object)object2));
      assertFalse(comparableObjectItem1.equals((Object)object1));
      
      Comparable comparable3 = comparableObjectItem0.getComparable();
      assertNotNull(comparable3);
      assertNotSame(comparableObjectItem0, object1);
      assertNotSame(comparableObjectItem0, object2);
      assertNotSame(comparableObjectItem0, comparableObjectItem1);
      assertNotSame(comparableObjectItem0, object0);
      assertSame(comparable3, comparable1);
      assertSame(comparable3, comparable2);
      assertFalse(comparableObjectItem0.equals((Object)object1));
      assertFalse(comparableObjectItem0.equals((Object)object2));
      assertFalse(comparableObjectItem0.equals((Object)comparableObjectItem1));
      assertFalse(comparableObjectItem0.equals((Object)object0));
      
      ComparableObjectItem comparableObjectItem2 = null;
      try {
        comparableObjectItem2 = new ComparableObjectItem((Comparable) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, "&D7R4,e#!");
      assertNotNull(comparableObjectItem0);
      
      boolean boolean0 = comparableObjectItem0.equals("&D7R4,e#!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(anyString());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      Object object0 = comparableObjectItem0.clone();
      comparableObjectItem0.setObject(object0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, comparableObjectItem0);
      comparableObjectItem0.compareTo(comparableObjectItem1);
      comparableObjectItem0.equals("");
      Comparable comparable1 = comparableObjectItem0.getComparable();
      comparableObjectItem0.setObject(comparable1);
      comparableObjectItem0.compareTo(comparable1);
      comparableObjectItem0.hashCode();
      assertTrue(comparableObjectItem0.equals((Object)object0));
      
      comparableObjectItem0.setObject(object0);
      comparableObjectItem0.getComparable();
      ComparableObjectItem comparableObjectItem2 = new ComparableObjectItem(comparable1, comparableObjectItem0);
      comparableObjectItem0.equals(comparableObjectItem2);
      ComparableObjectItem comparableObjectItem3 = new ComparableObjectItem(comparableObjectItem2, object0);
      comparableObjectItem2.equals("");
      comparableObjectItem3.setObject("");
      comparableObjectItem2.compareTo("");
      comparableObjectItem0.setObject(comparableObjectItem3);
      comparableObjectItem2.equals(comparableObjectItem3);
      comparableObjectItem2.equals(comparableObjectItem0);
      comparableObjectItem0.setObject(comparableObjectItem3);
      comparableObjectItem2.getComparable();
      comparableObjectItem3.getObject();
      Object object1 = comparableObjectItem2.getObject();
      boolean boolean0 = comparableObjectItem0.equals(object1);
      assertFalse(comparableObjectItem0.equals((Object)object0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, "4%!Z;Mi|AVNMI");
      comparableObjectItem0.setObject("4%!Z;Mi|AVNMI");
      comparableObjectItem0.compareTo("4%!Z;Mi|AVNMI");
      comparableObjectItem0.clone();
      Object object0 = comparableObjectItem0.clone();
      comparableObjectItem0.equals(object0);
      Object object1 = comparableObjectItem0.clone();
      comparableObjectItem0.clone();
      comparableObjectItem0.getComparable();
      comparableObjectItem0.getObject();
      comparableObjectItem0.getObject();
      comparableObjectItem0.hashCode();
      comparableObjectItem0.getComparable();
      assertTrue(comparableObjectItem0.equals((Object)object0));
      
      comparableObjectItem0.setObject(object1);
      assertFalse(object1.equals((Object)comparableObjectItem0));
  }
}
