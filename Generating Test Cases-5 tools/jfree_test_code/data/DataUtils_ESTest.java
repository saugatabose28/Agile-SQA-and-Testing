/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:44:45 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DataUtils;
import org.jfree.data.KeyedValues;
import org.jfree.data.Values2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataUtils_ESTest extends DataUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 676.9369915398064;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1280.0);
      doubleArray0[4] = (-5035.0243769);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      DataUtils.createNumberArray(doubleArray0);
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn("DESCENDING", (Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null).when(keyedValues0).getKey(anyInt());
      doReturn((-2649), 5, 0, 0, 0).when(keyedValues0).getItemCount();
      doReturn(1.0, (Number) null, (Number) null, (Number) null, (Number) null).when(keyedValues0).getValue(anyInt());
      DataUtils.getCumulativePercentages(keyedValues0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DataUtils.clone((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1817.62;
      doubleArray0[1] = 1839.8090191545032;
      doubleArray0[2] = (-1995.062665538674);
      doubleArray0[3] = 2579.6050704414624;
      doubleArray0[4] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DataUtils.clone(doubleArray1);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, (-24));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-24)).when(values2D1).getColumnCount();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      DataUtils.calculateRowTotal(values2D1, (-1), intArray0);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(49).when(values2D2).getRowCount();
      doReturn(1817.62).when(values2D2).getValue(anyInt() , anyInt());
      int[] intArray1 = new int[1];
      intArray1[0] = (-1);
      DataUtils.calculateColumnTotal(values2D2, (-1), intArray1);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(2507).when(values2D3).getRowCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D3).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D3, (-1));
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = 1839.8090191545032;
      doubleArray2[3] = 2579.6050704414624;
      doubleArray2[4] = 1817.62;
      doubleArray2[5] = 2579.6050704414624;
      DataUtils.createNumberArray(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 4930.68720217515;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 3195.758517;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 4930.68720217515;
      doubleArray3[4] = 4930.68720217515;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 4930.68720217515;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 4930.68720217515;
      doubleArray0[4] = doubleArray5;
      DataUtils.createNumberArray2D(doubleArray0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(1430).when(values2D0).getColumnCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D0, (-1));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(2286).when(values2D1).getColumnCount();
      doReturn((-1.0)).when(values2D1).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      DataUtils.calculateRowTotal(values2D1, 1, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 486.86183848;
      doubleArray2[1] = 999.576106;
      doubleArray2[2] = (-1711.950796257);
      doubleArray2[1] = 2262.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2262.0;
      doubleArray3[1] = 486.86183848;
      doubleArray3[2] = 486.86183848;
      doubleArray0[2] = doubleArray3;
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.createNumberArray(doubleArray1);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(values2D0).getColumnCount();
      doReturn(2262.0, 486.86183848, 2262.0, 486.86183848, 2262.0).when(values2D0).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D0, (-3));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      DataUtils.calculateColumnTotal(values2D1, 18);
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(18, 18, 475, (-3), (-3)).when(keyedValues0).getItemCount();
      doReturn(2262.0, 486.86183848, 0.0).when(keyedValues0).getValue(anyInt());
      DataUtils.getCumulativePercentages(keyedValues0);
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.clone(doubleArray0);
      double[][] doubleArray4 = DataUtils.clone(doubleArray0);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-559)).when(values2D2).getRowCount();
      DataUtils.calculateColumnTotal(values2D2, (-3));
      DataUtils.clone(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2599.6);
      doubleArray0[2] = (-525.1921703793);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 714.5;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      DataUtils.equal(doubleArray1, doubleArray1);
      double[][] doubleArray2 = new double[8][1];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray2);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, 1);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(678).when(values2D1).getColumnCount();
      doReturn((-2599.6), (-525.1921703793), 0.0, 714.5, 0.0).when(values2D1).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D1, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 29;
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 29;
      intArray0[1] = 29;
      intArray0[2] = 29;
      intArray0[3] = 29;
      DataUtils.calculateColumnTotal(values2D0, 29, intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(29).when(values2D1).getRowCount();
      doReturn(0.0, 29, 29, 29, 29).when(values2D1).getValue(anyInt() , anyInt());
      int int1 = (-334);
      DataUtils.calculateColumnTotal(values2D1, (-334));
      int int2 = 3314;
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(29).when(values2D2).getColumnCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D2).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D2, 3314);
      Values2D values2D3 = null;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) null, (-334), intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-533)).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, (-22));
      int[] intArray0 = new int[6];
      intArray0[0] = (-22);
      intArray0[1] = (-22);
      intArray0[2] = (-22);
      intArray0[3] = 1;
      intArray0[4] = (-22);
      intArray0[5] = (-22);
      KeyedValues<Integer> keyedValues0 = (KeyedValues<Integer>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn((-22)).when(keyedValues0).getKey(anyInt());
      doReturn((-22), 80, (-730)).when(keyedValues0).getItemCount();
      doReturn((-22)).when(keyedValues0).getValue(anyInt());
      DataUtils.getCumulativePercentages(keyedValues0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, 27);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      DataUtils.calculateColumnTotal(values2D1, 27);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getColumnCount();
      int[] intArray0 = new int[6];
      intArray0[0] = 27;
      intArray0[1] = 27;
      intArray0[2] = 27;
      intArray0[3] = 27;
      intArray0[4] = 27;
      intArray0[5] = 27;
      DataUtils.calculateRowTotal(values2D2, 27, intArray0);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(values2D3).getColumnCount();
      doReturn(0.0, 0.0, 0.0, 27, 27).when(values2D3).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D3, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      Values2D values2D4 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-3733)).when(values2D4).getColumnCount();
      DataUtils.calculateRowTotal(values2D4, 0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-138)).when(values2D0).getColumnCount();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DataUtils.calculateRowTotal(values2D0, 0, intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      int int0 = 3331;
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(3331).when(values2D2).getRowCount();
      doReturn(0).when(values2D2).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D2, 0, intArray0);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(831).when(values2D3).getColumnCount();
      doReturn(0, 0, 0, 0, 0).when(values2D3).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D3, 0);
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(keyedValues0).getKey(anyInt());
      doReturn(569, 0, 657).when(keyedValues0).getItemCount();
      doReturn(0, (Number) null).when(keyedValues0).getValue(anyInt());
      // Undeclared exception!
      try { 
        DataUtils.getCumulativePercentages(keyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, 1);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(values2D1).getColumnCount();
      doReturn(0.0).when(values2D1).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D1, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1561;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      doReturn((Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[5];
      intArray0[0] = 29;
      intArray0[1] = (-645);
      intArray0[2] = 29;
      intArray0[3] = 29;
      intArray0[4] = (-645);
      DataUtils.calculateColumnTotal(values2D0, 29, intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-645)).when(values2D1).getColumnCount();
      doReturn(0.0, 29, 29, 29).when(values2D1).getValue(anyInt() , anyInt());
      int[] intArray1 = new int[9];
      intArray1[0] = (-741);
      intArray1[1] = (-741);
      intArray1[2] = 0;
      intArray1[3] = (-741);
      intArray1[4] = (-741);
      DataUtils.calculateRowTotal(values2D1, (-741), intArray1);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getColumnCount();
      doReturn((Number) null, (Number) null).when(values2D2).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D2, (-541), intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, (-334));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, (-1));
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getColumnCount();
      DataUtils.calculateRowTotal(values2D2, 1866);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D3).getRowCount();
      DataUtils.calculateColumnTotal(values2D3, 1866);
      Values2D values2D4 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(values2D4).getRowCount();
      doReturn(0.0, 0.0, 0.0, (Number) null, (Number) null).when(values2D4).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-334);
      intArray0[2] = 0;
      intArray0[3] = (-334);
      intArray0[4] = (-334);
      intArray0[5] = (-2196);
      intArray0[6] = (-334);
      intArray0[7] = 0;
      intArray0[8] = 0;
      DataUtils.calculateColumnTotal(values2D4, 0, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1550.354;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 999.46257972;
      doubleArray2[6] = 2380.25;
      doubleArray2[7] = (-2047.0352803608);
      doubleArray0[1] = doubleArray2;
      DataUtils.createNumberArray2D(doubleArray0);
      KeyedValues<Integer> keyedValues0 = (KeyedValues<Integer>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn((-460), (-460)).when(keyedValues0).getItemCount();
      DataUtils.getCumulativePercentages(keyedValues0);
      DataUtils.equal(doubleArray0, doubleArray0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-460)).when(values2D0).getColumnCount();
      int[] intArray0 = new int[7];
      intArray0[0] = 4091;
      intArray0[1] = 4091;
      intArray0[2] = 4091;
      intArray0[3] = 4091;
      intArray0[4] = 4091;
      intArray0[5] = 4091;
      intArray0[6] = 4091;
      DataUtils.calculateRowTotal(values2D0, 4091, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-533)).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, (-3960), intArray0);
      KeyedValues<Integer> keyedValues0 = (KeyedValues<Integer>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(keyedValues0).getKey(anyInt());
      doReturn(1, 80, 0, 0, 0).when(keyedValues0).getItemCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(keyedValues0).getValue(anyInt());
      // Undeclared exception!
      try { 
        DataUtils.getCumulativePercentages(keyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-114)).when(values2D0).getColumnCount();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DataUtils.calculateRowTotal(values2D0, 0, intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(3331).when(values2D2).getRowCount();
      doReturn((Number) null).when(values2D2).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D2, 0, intArray0);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(831).when(values2D3).getColumnCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D3).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D3, 0);
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(569, 0, 0).when(keyedValues0).getItemCount();
      doReturn((Number) null).when(keyedValues0).getValue(anyInt());
      DataUtils.getCumulativePercentages(keyedValues0);
      double[][] doubleArray0 = new double[4][6];
      DataUtils.createNumberArray2D(doubleArray0);
      Values2D values2D4 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(3331).when(values2D4).getRowCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D4).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D4, 1);
      DataUtils.calculateColumnTotal(values2D1, (-543));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(27).when(values2D0).getColumnCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-3733)).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(4853).when(values2D0).getColumnCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D0, (-1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-260.322290650064);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-708.10077929);
      doubleArray1[3] = 71.8285025855864;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-260.322290650064);
      doubleArray2[1] = (-708.10077929);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-708.10077929);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-708.10077929);
      doubleArray3[7] = (-708.10077929);
      doubleArray3[8] = (-708.10077929);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-708.10077929);
      doubleArray4[1] = (-708.10077929);
      doubleArray4[2] = (-260.322290650064);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-708.10077929);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-260.322290650064);
      doubleArray6[2] = (-708.10077929);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-708.10077929);
      doubleArray7[1] = 71.8285025855864;
      doubleArray7[2] = 1880.9139638;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 71.8285025855864;
      doubleArray7[5] = (-260.322290650064);
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 71.8285025855864;
      doubleArray8[1] = (-260.322290650064);
      doubleArray8[2] = 1880.9139638;
      doubleArray8[3] = (-260.322290650064);
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      DataUtils.equal(doubleArray0, (double[][]) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(keyedValues0).getItemCount();
      DataUtils.getCumulativePercentages(keyedValues0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      int int0 = 0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal(values2D0, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.DataUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      DataUtils.calculateRowTotal(values2D0, 0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, (-1156));
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getColumnCount();
      doReturn((Number) null, (Number) null).when(values2D2).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1156);
      intArray0[2] = 272;
      intArray0[3] = 272;
      intArray0[4] = (-1156);
      DataUtils.calculateRowTotal(values2D2, 272, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      int int0 = (-604);
      DataUtils.calculateRowTotal(values2D0, (-604));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal(values2D1, (-604), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.DataUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      int int0 = 991;
      DataUtils.calculateRowTotal(values2D0, 991);
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      double[][] doubleArray1 = DataUtils.clone(doubleArray0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, (-3700));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      DataUtils.calculateColumnTotal(values2D1, (-3700));
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getRowCount();
      DataUtils.calculateColumnTotal(values2D2, (-3700));
      DataUtils.clone(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-564.258);
      doubleArray1[1] = (-2800.69450745);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 664.0386021;
      doubleArray1[4] = (-1518.37849307);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 522.1125459990755;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2800.69450745);
      doubleArray2[3] = (-1518.37849307);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 634.6298929;
      doubleArray3[1] = (-1518.37849307);
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = DataUtils.clone(doubleArray0);
      DataUtils.equal(doubleArray4, doubleArray0);
      DataUtils.clone(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtils.getCumulativePercentages((KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2967.617629024113);
      doubleArray1[1] = 99.156315757;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 99.156315757;
      doubleArray2[1] = (-2967.617629024113);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2967.617629024113);
      doubleArray3[1] = (-2967.617629024113);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 420.3317650759;
      doubleArray3[4] = (-2967.617629024113);
      doubleArray3[5] = 99.156315757;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-2967.617629024113);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 99.156315757;
      doubleArray4[4] = 3796.435278824599;
      doubleArray4[5] = (-2967.617629024113);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 420.3317650759;
      doubleArray5[1] = (-2967.617629024113);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-2967.617629024113);
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 99.156315757;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 99.156315757;
      doubleArray6[4] = 99.156315757;
      doubleArray0[5] = doubleArray6;
      double[][] doubleArray7 = new double[4][0];
      doubleArray7[0] = doubleArray2;
      doubleArray7[1] = doubleArray1;
      doubleArray7[2] = doubleArray4;
      doubleArray7[3] = doubleArray2;
      DataUtils.equal(doubleArray0, doubleArray7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KeyedValues<Integer> keyedValues0 = (KeyedValues<Integer>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(keyedValues0).getItemCount();
      KeyedValues keyedValues1 = DataUtils.getCumulativePercentages(keyedValues0);
      double[][] doubleArray0 = new double[0][2];
      DataUtils.equal((double[][]) null, doubleArray0);
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.getCumulativePercentages(keyedValues1);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, 843);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      int int0 = (-2874);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2874);
      intArray0[1] = (-2874);
      intArray0[2] = (-2874);
      intArray0[3] = (-2874);
      intArray0[4] = (-2874);
      DataUtils.calculateColumnTotal(values2D0, (-2874), intArray0);
      double[][] doubleArrayArray0 = null;
      DataUtils.equal((double[][]) null, (double[][]) null);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, 0);
      DataUtils.equal((double[][]) null, (double[][]) null);
      // Undeclared exception!
      try { 
        DataUtils.createNumberArray2D((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-872.36422933);
      doubleArray1[1] = 1181.43499281895;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 3323.7;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DataUtils.equal(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      double[][] doubleArray1 = new double[1][4];
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-64.76349982);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 422.98530805067;
      doubleArray2[4] = 1656.7492;
      doubleArray1[0] = doubleArray2;
      DataUtils.equal(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DataUtils.createNumberArray(doubleArray0);
      DataUtils.equal((double[][]) null, (double[][]) null);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      int int0 = 0;
      DataUtils.calculateRowTotal(values2D0, 0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      int int1 = 1477;
      DataUtils.calculateColumnTotal(values2D1, 1477);
      DataUtils.createNumberArray(doubleArray0);
      // Undeclared exception!
      try { 
        DataUtils.clone((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 934.319400770731;
      doubleArray0[0] = doubleArray1;
      DataUtils.clone(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      doReturn((Number) null, (Number) null, (Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[5];
      intArray0[0] = (-741);
      intArray0[1] = (-741);
      intArray0[2] = 0;
      intArray0[3] = (-741);
      intArray0[4] = (-741);
      DataUtils.calculateRowTotal(values2D0, (-741), intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      DataUtils.calculateColumnTotal(values2D0, 0, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      doReturn((Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-125);
      intArray0[2] = 1;
      DataUtils.calculateColumnTotal(values2D0, (-125), intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, 3497);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, (-3801));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3801);
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-3801);
      doubleArray2[2] = (double) (-3801);
      doubleArray2[3] = (double) (-3801);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-3801);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (double) (-3801);
      doubleArray2[8] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      double[][] doubleArray3 = DataUtils.clone(doubleArray1);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, (-3801));
      DataUtils.createNumberArray2D(doubleArray3);
      DataUtils.clone(doubleArray3);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getRowCount();
      DataUtils.calculateColumnTotal(values2D2, 0);
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, 1);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      DataUtils.calculateColumnTotal(values2D1, 1, intArray0);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getColumnCount();
      int int0 = (-3960);
      DataUtils.calculateRowTotal(values2D2, (-3960), intArray0);
      KeyedValues<Integer> keyedValues0 = (KeyedValues<Integer>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(keyedValues0).getItemCount();
      DataUtils.getCumulativePercentages(keyedValues0);
      Values2D values2D3 = null;
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) null, (-3960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      int[] intArray0 = new int[2];
      intArray0[0] = 637;
      intArray0[1] = 637;
      DataUtils.calculateRowTotal(values2D0, 637, intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(keyedValues0).getItemCount();
      DataUtils.getCumulativePercentages(keyedValues0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      DataUtils.calculateRowTotal(values2D0, (-612));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      DataUtils.calculateColumnTotal(values2D0, (-1170));
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      doReturn((Number) null).when(values2D1).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[1];
      intArray0[0] = (-1170);
      DataUtils.calculateRowTotal(values2D1, (-1170), intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1727.446742;
      doubleArray0[1] = (-932.7495958772093);
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DataUtils.createNumberArray2D(doubleArray1);
      DataUtils.createNumberArray(doubleArray0);
      // Undeclared exception!
      try { 
        DataUtils.calculateRowTotal((Values2D) null, 1839, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      doReturn((Number) null, (Number) null, (Number) null).when(values2D0).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      DataUtils.calculateColumnTotal(values2D0, (-1), intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, 840);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      int[] intArray0 = new int[3];
      intArray0[0] = 1734;
      intArray0[1] = 1734;
      intArray0[2] = 1734;
      DataUtils.calculateColumnTotal(values2D0, 1734, intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getRowCount();
      int[] intArray0 = new int[0];
      DataUtils.calculateColumnTotal(values2D0, (-802), intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2106;
      // Undeclared exception!
      try { 
        DataUtils.calculateColumnTotal((Values2D) null, 2106, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1293.435767069446;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1041.19467881015;
      doubleArray1[4] = (-832.450008999053);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1041.19467881015;
      doubleArray3[1] = (-832.450008999053);
      doubleArray3[2] = (-832.450008999053);
      doubleArray0[2] = doubleArray3;
      DataUtils.equal(doubleArray0, doubleArray0);
      DataUtils.createNumberArray2D(doubleArray0);
      double[][] doubleArray4 = new double[6][0];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray1;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1041.19467881015;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1041.19467881015;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray4[2] = doubleArray5;
      doubleArray4[3] = doubleArray3;
      doubleArray4[4] = doubleArray2;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 1041.19467881015;
      doubleArray6[2] = 936.07;
      doubleArray6[3] = (-832.450008999053);
      doubleArray6[4] = 1041.19467881015;
      doubleArray4[5] = doubleArray6;
      DataUtils.clone(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      DataUtils.calculateRowTotal(values2D0, (-1847));
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1847);
      doubleArray1[1] = (double) (-1847);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-1847);
      doubleArray2[1] = (double) (-1847);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-1847);
      doubleArray2[4] = (double) (-1847);
      doubleArray2[5] = (double) (-1847);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (double) (-1847);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) (-1847);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (double) (-1847);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (double) (-1847);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) (-1847);
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      DataUtils.createNumberArray2D(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 486.86183848;
      doubleArray2[1] = 999.576106;
      doubleArray2[2] = (-1711.950796257);
      doubleArray2[3] = 2262.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2262.0;
      doubleArray3[1] = 486.86183848;
      doubleArray3[2] = 486.86183848;
      doubleArray0[2] = doubleArray3;
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.createNumberArray(doubleArray1);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(values2D0).getColumnCount();
      doReturn(486.86183848, 486.86183848, 2262.0, 486.86183848, 486.86183848).when(values2D0).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D0, (-3));
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(18, 18, (-3), (-3)).when(keyedValues0).getItemCount();
      doReturn(2262.0, 2262.0).when(keyedValues0).getValue(anyInt());
      DataUtils.getCumulativePercentages(keyedValues0);
      DataUtils.createNumberArray2D(doubleArray0);
      DataUtils.clone(doubleArray0);
      double[][] doubleArray4 = DataUtils.clone(doubleArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-559)).when(values2D1).getRowCount();
      DataUtils.calculateColumnTotal(values2D1, (-3));
      DataUtils.clone(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      DataUtils.calculateRowTotal(values2D0, 0);
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-722.163);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-722.163);
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-722.163);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (-1289.6831563114254);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-722.163);
      doubleArray7[1] = (-1289.6831563114254);
      doubleArray7[2] = (-722.163);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-1289.6831563114254);
      doubleArray7[5] = (-722.163);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-1289.6831563114254);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = 1.0;
      doubleArray9[2] = (double) 0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = (-722.163);
      doubleArray0[8] = doubleArray9;
      DataUtils.clone(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 676.9369915398064;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1280.0);
      doubleArray0[4] = (-5035.0243769);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DataUtils.clone((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(values2D0).getRowCount();
      int[] intArray0 = new int[3];
      intArray0[0] = 1311;
      intArray0[1] = (-1);
      intArray0[2] = 1311;
      DataUtils.calculateColumnTotal(values2D0, 1311, intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getRowCount();
      doReturn((Number) null).when(values2D1).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D1, 1145, intArray0);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getRowCount();
      doReturn((Number) null, (Number) null, (Number) null).when(values2D2).getValue(anyInt() , anyInt());
      int[] intArray1 = new int[6];
      intArray1[0] = (-1);
      intArray1[1] = 1145;
      intArray1[2] = 1145;
      intArray1[3] = 1311;
      intArray1[4] = (-1);
      intArray1[5] = (-1);
      DataUtils.calculateColumnTotal(values2D2, 1311, intArray1);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(614).when(values2D3).getRowCount();
      doReturn(0.0, 0.0, (-1), 1145, (-1)).when(values2D3).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D3, 1311);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1311;
      doubleArray0[2] = (double) 1311;
      doubleArray0[3] = (double) 1311;
      doubleArray0[4] = (double) 1311;
      doubleArray0[5] = (double) 1311;
      doubleArray0[6] = (double) 1311;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[][] doubleArray2 = DataUtils.clone(doubleArray1);
      KeyedValues<String> keyedValues0 = (KeyedValues<String>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0).when(keyedValues0).getItemCount();
      KeyedValues keyedValues1 = DataUtils.getCumulativePercentages(keyedValues0);
      double[][] doubleArray3 = DataUtils.clone(doubleArray2);
      Values2D values2D4 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(5179).when(values2D4).getColumnCount();
      doReturn(1311.0, 1311.0, (-1.0), 1311.0, 1311.0).when(values2D4).getValue(anyInt() , anyInt());
      DataUtils.calculateRowTotal(values2D4, 764);
      Values2D values2D5 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-77)).when(values2D5).getColumnCount();
      DataUtils.calculateRowTotal(values2D5, (-1));
      DataUtils.createNumberArray2D(doubleArray3);
      DataUtils.getCumulativePercentages(keyedValues1);
      Values2D values2D6 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(1311).when(values2D6).getRowCount();
      doReturn((-1)).when(values2D6).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D6, 1311, intArray0);
      DataUtils.equal(doubleArray3, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1817.62;
      doubleArray0[1] = 1839.8090191545032;
      doubleArray0[2] = (-1995.062665538674);
      doubleArray0[3] = 2579.6050704414624;
      doubleArray0[4] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DataUtils.clone(doubleArray1);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D0).getColumnCount();
      doReturn(0.0).when(values2D0).getValue(anyInt() , anyInt());
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      DataUtils.calculateRowTotal(values2D0, (-1), intArray0);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, (-1));
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D2).getRowCount();
      doReturn(0.0).when(values2D2).getValue(anyInt() , anyInt());
      DataUtils.calculateColumnTotal(values2D2, (-1), intArray0);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(values2D3).getRowCount();
      int[] intArray1 = new int[1];
      intArray1[0] = (-1);
      DataUtils.calculateColumnTotal(values2D3, (-1), intArray1);
      Values2D values2D4 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = 1839.8090191545032;
      doubleArray2[3] = 2579.6050704414624;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2579.6050704414624;
      DataUtils.createNumberArray(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      DataUtils.equal((double[][]) null, (double[][]) null);
      // Undeclared exception!
      try { 
        DataUtils.clone((double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 220.3110452;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 783.8632887341818;
      doubleArray0[5] = 1618.19;
      doubleArray0[6] = 0.0;
      DataUtils.createNumberArray(doubleArray0);
      Values2D values2D0 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-168)).when(values2D0).getColumnCount();
      DataUtils.calculateRowTotal(values2D0, 965);
      Values2D values2D1 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-168)).when(values2D1).getColumnCount();
      DataUtils.calculateRowTotal(values2D1, 965);
      Values2D values2D2 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-168)).when(values2D2).getColumnCount();
      DataUtils.calculateRowTotal(values2D2, 965);
      Values2D values2D3 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(values2D3).getRowCount();
      int[] intArray0 = new int[0];
      DataUtils.calculateColumnTotal(values2D3, 1702, intArray0);
      KeyedValues<Integer> keyedValues0 = (KeyedValues<Integer>) mock(KeyedValues.class, new ViolatedAssumptionAnswer());
      doReturn(1, 357, 0, 0).when(keyedValues0).getItemCount();
      doReturn((Number) null, (Number) null).when(keyedValues0).getValue(anyInt());
      DataUtils.getCumulativePercentages(keyedValues0);
      Values2D values2D4 = mock(Values2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(values2D4).getRowCount();
      int int0 = 0;
      DataUtils.calculateColumnTotal(values2D4, int0, intArray0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DataUtils.clone(doubleArrayArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
