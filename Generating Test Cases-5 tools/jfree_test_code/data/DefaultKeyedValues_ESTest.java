/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:18:39 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValues_ESTest extends DefaultKeyedValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      double double0 = (-3284.0);
      Double double1 = new Double((-3284.0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-3284.0), (double)double1, 0.01);
      
      DefaultKeyedValues<Long> defaultKeyedValues2 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      long long0 = 1360L;
      // Undeclared exception!
      try { 
        defaultKeyedValues2.sortByKeys((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      defaultKeyedValues0.addValue("", (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(1, int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.addValue(float0, (Number) float0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Float float1 = new Float((float) 1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      defaultKeyedValues1.setValue(float1, 0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2, defaultKeyedValues1.getItemCount());
      
      Number number0 = defaultKeyedValues1.getValue(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues2 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.removeValue((-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      int int0 = defaultKeyedValues0.getIndex("");
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int1 = defaultKeyedValues0.getItemCount();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float1 = new Float((float) 0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      defaultKeyedValues1.addValue(float1, (Number) float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Float float2 = new Float((float) 0);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      defaultKeyedValues1.setValue(float2, (double) (-1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Number number0 = defaultKeyedValues1.getValue(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(number0);
      assertEquals((-1.0), number0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues2 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.removeValue((-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues1 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.addValue("9>V.ku#>B_s%/", 1205.8);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      String string0 = defaultKeyedValues1.getKey(0);
      assertNotNull(string0);
      assertEquals("9>V.ku#>B_s%/", string0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues2 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues2.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.clear();
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      boolean boolean0 = defaultKeyedValues2.equals("N-|>lScVlGb<ZpRH(V;");
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Integer integer0 = new Integer(2285);
      assertNotNull(integer0);
      assertEquals(2285, (int)integer0);
      
      defaultKeyedValues2.setValue(integer0, 0.0);
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      List<String> list0 = defaultKeyedValues1.getKeys();
      assertTrue(list0.contains("9>V.ku#>B_s%/"));
      assertFalse(list0.contains("N-|>lScVlGb<ZpRH(V;"));
      assertNotNull(list0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Number number0 = defaultKeyedValues1.getValue(0);
      assertNotNull(number0);
      assertEquals(1205.8, number0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues3 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultKeyedValues3.sortByValues(sortOrder1);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues3.getKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      defaultKeyedValues0.insertValue(0, byte0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      List<Byte> list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.contains((byte)39));
      assertNotNull(list0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.sortByKeys(sortOrder1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.addValue(";E!Zs", (-1473.1903868901131));
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.setValue("org.jfree.data.KeyedValueComparatorType", 0.0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues3 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      defaultKeyedValues3.clear();
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      Double double0 = new Double((-1473.1903868901131));
      assertNotNull(double0);
      assertEquals((-1473.1903868901131), (double)double0, 0.01);
      
      defaultKeyedValues2.insertValue(0, "org.jfree.data.KeyedValueComparatorType", (double) 0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues1.insertValue(0, double0, 0.0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.setValue(double0, (Number) double0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      String string0 = defaultKeyedValues2.getKey(0);
      assertNotNull(string0);
      assertEquals("org.jfree.data.KeyedValueComparatorType", string0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues4 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues4);
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      Float float0 = new Float(400.7326F);
      assertNotNull(float0);
      assertEquals(400.7326F, (float)float0, 0.01F);
      
      int int0 = defaultKeyedValues4.getIndex(float0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues4.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float0 = new Float((-1899.189460801664));
      assertNotNull(float0);
      assertEquals((-1899.1895F), (float)float0, 0.01F);
      
      defaultKeyedValues1.addValue(float0, (-4284.9001));
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Number number0 = defaultKeyedValues1.getValue(float0);
      assertNotNull(number0);
      assertEquals((-4284.9001), number0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues1.getKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      defaultKeyedValues0.addValue("", (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getIndex("");
      assertEquals(0, int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int1 = defaultKeyedValues0.getItemCount();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float1 = new Float((float) 1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      defaultKeyedValues1.setValue(float1, 0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Number number0 = defaultKeyedValues1.getValue(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues2 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.removeValue((-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.hashCode();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = (-1185);
      Integer integer0 = new Integer((-1185));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1185), (int)integer0);
      
      defaultKeyedValues0.setValue(integer0, (Number) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues2 = (DefaultKeyedValues)defaultKeyedValues1.clone();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
      assertFalse(boolean0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues3 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues3.removeValue((-1185));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues<Short> defaultKeyedValues0 = new DefaultKeyedValues<Short>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float((-3298.0711));
      assertNotNull(float0);
      assertEquals((-3298.071F), (float)float0, 0.01F);
      
      defaultKeyedValues0.addValue(float0, (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Number number0 = defaultKeyedValues0.getValue(0);
      assertNotNull(number0);
      assertEquals((-3298.071F), number0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.hashCode();
      assertEquals(0, defaultKeyedValues1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.addValue((Integer) null, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValues<Short> defaultKeyedValues0 = new DefaultKeyedValues<Short>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getIndex((Short) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte)104);
      assertNotNull(byte0);
      assertEquals((byte)104, (byte)byte0);
      
      defaultKeyedValues0.setValue(byte0, (Number) byte0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.removeValue(0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Long> defaultKeyedValues1 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.clear();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultKeyedValues2.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int0 = defaultKeyedValues0.getIndex(integer0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Double double0 = new Double(2683.8263);
      assertNotNull(double0);
      assertEquals(2683.8263, (double)double0, 0.01);
      
      defaultKeyedValues1.setValue(double0, (Number) double0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Double double1 = new Double(2683.8263);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2683.8263, (double)double1, 0.01);
      
      Number number0 = defaultKeyedValues1.getValue(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(number0.equals((Object)double1));
      assertNotNull(number0);
      assertEquals(2683.8263, number0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues2 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.getValue(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultKeyedValues0.setValue(integer0, (Number) integer0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues1 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      int int0 = defaultKeyedValues1.getItemCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues2 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      defaultKeyedValues2.setValue(double0, (Number) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      boolean boolean0 = defaultKeyedValues2.equals(defaultKeyedValues1);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues3 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      defaultKeyedValues3.clear();
      assertEquals(0, defaultKeyedValues3.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      defaultKeyedValues0.insertValue(0, byte0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      List<Byte> list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.contains(byte0));
      assertNotNull(list0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.sortByKeys(sortOrder1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.addValue(";E!Zs", (-1473.1903868901131));
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.setValue("org.jfree.data.KeyedValueComparatorType", 0.0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues3 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      defaultKeyedValues3.clear();
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      Double double0 = new Double((-1473.1903868901131));
      assertNotNull(double0);
      assertEquals((-1473.1903868901131), (double)double0, 0.01);
      
      defaultKeyedValues1.insertValue(0, double0, 0.0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.setValue(double0, (Number) double0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      String string0 = defaultKeyedValues2.getKey(0);
      assertNotNull(string0);
      assertEquals(";E!Zs", string0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues4 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues4);
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      Float float0 = new Float(400.7326F);
      assertNotNull(float0);
      assertEquals(400.7326F, (float)float0, 0.01F);
      
      int int0 = defaultKeyedValues4.getIndex(float0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues4.getItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      defaultKeyedValues0.setValue("KeyedValueComparatorType.BY_KEY", (Number) long0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues1 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues2 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues3 = (DefaultKeyedValues)defaultKeyedValues2.clone();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues3);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
      assertEquals(0, defaultKeyedValues3.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      defaultKeyedValues0.setValue(float0, (double) 0.0F);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      defaultKeyedValues0.removeValue(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      int int0 = defaultKeyedValues0.getIndex(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues1 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues2 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues1.insertValue((-1), byte0, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = defaultKeyedValues0.equals(short0);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      int int0 = defaultKeyedValues2.getIndex("2wS~VlI?\"RI}0");
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      List<String> list0 = defaultKeyedValues2.getKeys();
      assertFalse(list0.contains("2wS~VlI?\"RI}0"));
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DefaultKeyedValues<Long> defaultKeyedValues3 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues3.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.removeValue((-505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultKeyedValues0.addValue(integer0, 0.0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int1 = (-1295);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getKey((-1295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      defaultKeyedValues0.insertValue((int) (byte)0, byte1, (-360.09061074351));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.addValue(byte1, (double) (byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      List<Byte> list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.contains(byte0));
      assertNotNull(list0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      defaultKeyedValues0.hashCode();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues1 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = 2;
      DefaultKeyedValues defaultKeyedValues2 = (DefaultKeyedValues)defaultKeyedValues1.clone();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues1.insertValue(2, integer0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte) (-103));
      assertNotNull(byte0);
      assertEquals((byte) (-103), (byte)byte0);
      
      defaultKeyedValues0.setValue(byte0, (Number) byte0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(1, int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      boolean boolean0 = defaultKeyedValues0.equals(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(boolean0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer(1052);
      assertNotNull(integer0);
      assertEquals(1052, (int)integer0);
      
      defaultKeyedValues0.setValue(integer0, (double) 1052);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      defaultKeyedValues0.setValue(integer1, (Number) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, defaultKeyedValues0.getItemCount());
      
      List<Integer> list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.contains(integer1));
      assertNotNull(list0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues1);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertEquals(2, defaultKeyedValues1.getItemCount());
      
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      defaultKeyedValues0.removeValue(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues2 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Float float0 = new Float((-473.9));
      assertNotNull(float0);
      assertEquals((-473.9F), (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.removeValue(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (-473.9) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      defaultKeyedValues0.insertValue(0, double0, (double) 0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue(2193);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2193, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      byte byte0 = (byte)0;
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      defaultKeyedValues0.addValue(byte1, (double) (byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues1 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultKeyedValues1.setValue(integer0, 0.0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues1.setValue((Integer) null, (double) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Long> defaultKeyedValues1 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues1.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      defaultKeyedValues1.setValue(long0, 0.0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue((Double) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Double double0 = new Double(1109.7221);
      assertNotNull(double0);
      assertEquals(1109.7221, (double)double0, 0.01);
      
      defaultKeyedValues0.setValue(double0, (Number) double0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      defaultKeyedValues0.insertValue(0, double1, (Number) double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float0 = new Float((-1338.7965F));
      assertNotNull(float0);
      assertEquals((-1338.7965F), (float)float0, 0.01F);
      
      int int0 = defaultKeyedValues1.getIndex(float0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float1 = new Float((-1338.7965F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1338.7965F), (float)float1, 0.01F);
      
      DefaultKeyedValues<Integer> defaultKeyedValues2 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.getValue((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte)110);
      assertNotNull(byte0);
      assertEquals((byte)110, (byte)byte0);
      
      defaultKeyedValues0.setValue(byte0, (Number) byte0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.hashCode();
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Long> defaultKeyedValues1 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues1.addValue((Long) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.hashCode();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      defaultKeyedValues0.setValue(byte0, (double) (byte)0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues2 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues2.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Byte byte1 = new Byte((byte) (-118));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-118), (byte)byte1);
      
      defaultKeyedValues0.setValue(byte1, (Number) byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(2, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues2.equals(defaultKeyedValues0);
      assertFalse(boolean0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List<Float> list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.setValue((Double) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = defaultKeyedValues0.getIndex(integer0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      defaultKeyedValues0.setValue(float0, (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(1, int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Long> defaultKeyedValues1 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Long long0 = new Long((-2728L));
      assertNotNull(long0);
      assertEquals((-2728L), (long)long0);
      
      boolean boolean0 = defaultKeyedValues1.equals(long0);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Double double0 = new Double((-4106.5030069558));
      assertNotNull(double0);
      assertEquals((-4106.5030069558), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues1.removeValue(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (-4106.5030069558) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultKeyedValues<Long> defaultKeyedValues0 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Long long0 = new Long((-1819L));
      assertNotNull(long0);
      assertEquals((-1819L), (long)long0);
      
      defaultKeyedValues0.setValue(long0, (Number) long0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-1), long0, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.addValue(integer0, (Number) integer0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.insertValue(0, integer0, (-66.80317137));
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Integer integer1 = defaultKeyedValues0.getKey(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues1 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Byte byte0 = new Byte((byte) (-33));
      assertNotNull(byte0);
      assertEquals((byte) (-33), (byte)byte0);
      
      defaultKeyedValues1.insertValue(0, byte0, (Number) integer1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Integer integer2 = (Integer)defaultKeyedValues1.getValue(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      int int0 = defaultKeyedValues1.getIndex(byte0);
      assertEquals(0, int0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.addValue(byte0, 0.0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues1 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      String string0 = "9>V.ku#>B_s%/";
      // Undeclared exception!
      try { 
        defaultKeyedValues1.getValue("g+S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: g+S
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (0.0) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      boolean boolean0 = defaultKeyedValues1.equals(float0);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues1 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues2 = (DefaultKeyedValues)defaultKeyedValues1.clone();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues2);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues1 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      Double double0 = new Double(2268.509034);
      assertNotNull(double0);
      assertEquals(2268.509034, (double)double0, 0.01);
      
      defaultKeyedValues0.insertValue(0, double0, (Number) double0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues1 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.setValue("", (Number) double0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      List<String> list0 = defaultKeyedValues1.getKeys();
      assertTrue(list0.contains(""));
      assertNotNull(list0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      defaultKeyedValues1.addValue("", (double) 0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.insertValue(0, "XEc8QU{!#75)", (Number) double0);
      assertEquals(2, defaultKeyedValues1.getItemCount());
      
      int int1 = defaultKeyedValues1.getIndex("");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues2 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues2.insertValue(1, integer0, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      defaultKeyedValues0.addValue(float0, 1.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultKeyedValues<Long> defaultKeyedValues0 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultKeyedValues<Double> defaultKeyedValues0 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = (-1341);
      Double double0 = new Double((-709.042926));
      assertNotNull(double0);
      assertEquals((-709.042926), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-1341), double0, (Number) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues1 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      int int0 = defaultKeyedValues1.getItemCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Long> defaultKeyedValues2 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      defaultKeyedValues2.insertValue(0, long0, (double) 0);
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      defaultKeyedValues2.insertValue(0, long1, 802.6);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues3 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues3.removeValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      float float0 = 2141.67F;
      Float float1 = new Float(2141.67F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2141.67F, (float)float1, 0.01F);
      
      List<Float> list0 = defaultKeyedValues0.getKeys();
      assertFalse(list0.contains(float0));
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultKeyedValues0.addValue(float1, (double) 2141.67F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(1, int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues1 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      List<Byte> list1 = defaultKeyedValues1.getKeys();
      assertNotNull(list1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(1, float1, (Number) float1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultKeyedValues<Float> defaultKeyedValues0 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      boolean boolean0 = defaultKeyedValues2.equals(defaultKeyedValues1);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      List<Float> list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      defaultKeyedValues2.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      List<String> list1 = defaultKeyedValues2.getKeys();
      assertNotNull(list1);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      DefaultKeyedValues<Double> defaultKeyedValues3 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Float float0 = new Float(1201.4585028);
      assertNotNull(float0);
      assertEquals(1201.4585F, (float)float0, 0.01F);
      
      defaultKeyedValues3.setValue(double0, (Number) float0);
      assertEquals(1, defaultKeyedValues3.getItemCount());
      
      DefaultKeyedValues<Long> defaultKeyedValues4 = new DefaultKeyedValues<Long>();
      assertNotNull(defaultKeyedValues4);
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean1 = defaultKeyedValues4.equals(long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      defaultKeyedValues4.setValue(long0, 0.0);
      assertEquals(1, defaultKeyedValues4.getItemCount());
      
      List<Long> list2 = defaultKeyedValues4.getKeys();
      assertTrue(list2.contains(long0));
      assertNotNull(list2);
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertEquals(1, defaultKeyedValues4.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues5 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues5);
      assertEquals(0, defaultKeyedValues5.getItemCount());
      
      int int1 = defaultKeyedValues5.getItemCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, defaultKeyedValues5.getItemCount());
      
      Byte byte0 = new Byte((byte) (-101));
      assertNotNull(byte0);
      assertEquals((byte) (-101), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultKeyedValues<Short> defaultKeyedValues0 = new DefaultKeyedValues<Short>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List<Short> list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(689, short0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultKeyedValues<String> defaultKeyedValues0 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      defaultKeyedValues0.addValue("", (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getIndex("");
      assertEquals(0, int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int1 = defaultKeyedValues0.getItemCount();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Float float1 = new Float((float) 1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      defaultKeyedValues1.addValue(float1, (Number) float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Float float2 = new Float((float) 1);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      defaultKeyedValues1.setValue(float2, 0.0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      Number number0 = defaultKeyedValues1.getValue(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Byte> defaultKeyedValues2 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      byte byte0 = (byte) (-9);
      Byte byte1 = new Byte((byte) (-9));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-9), (byte)byte1);
      
      int int0 = defaultKeyedValues0.getIndex(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      DefaultKeyedValues<Float> defaultKeyedValues2 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      int int1 = defaultKeyedValues2.hashCode();
      assertFalse(int1 == int0);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues3 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultKeyedValues3.setValue("", 1717.18382);
      assertEquals(1, defaultKeyedValues3.getItemCount());
      
      defaultKeyedValues3.sortByKeys(sortOrder1);
      assertEquals(1, defaultKeyedValues3.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      defaultKeyedValues3.addValue("", (Number) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, defaultKeyedValues3.getItemCount());
      
      int int2 = defaultKeyedValues3.hashCode();
      assertFalse(int2 == int0);
      assertEquals(1, defaultKeyedValues3.getItemCount());
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      boolean boolean0 = defaultKeyedValues1.equals(short0);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues4 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues4);
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues4.removeValue(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (-1) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultKeyedValues<Integer> defaultKeyedValues0 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.clear();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultKeyedValues0.insertValue(0, integer0, 0.0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues1 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      boolean boolean0 = defaultKeyedValues1.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Double> defaultKeyedValues3 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues4 = (DefaultKeyedValues)defaultKeyedValues3.clone();
      assertNotNull(defaultKeyedValues4);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      boolean boolean1 = defaultKeyedValues2.equals(defaultKeyedValues4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      assertEquals(0, defaultKeyedValues3.getItemCount());
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultKeyedValues2.removeValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultKeyedValues<Byte> defaultKeyedValues0 = new DefaultKeyedValues<Byte>();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List<Byte> list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      DefaultKeyedValues<Double> defaultKeyedValues1 = new DefaultKeyedValues<Double>();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.sortByKeys(sortOrder1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertSame(sortOrder1, sortOrder0);
      
      DefaultKeyedValues<String> defaultKeyedValues2 = new DefaultKeyedValues<String>();
      assertNotNull(defaultKeyedValues2);
      assertEquals(0, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.addValue(";E!Zs", (-1473.1903868901131));
      assertEquals(1, defaultKeyedValues2.getItemCount());
      
      defaultKeyedValues2.setValue("org.jfree.data.KeyedValueComparatorType", 0.0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Integer> defaultKeyedValues3 = new DefaultKeyedValues<Integer>();
      assertNotNull(defaultKeyedValues3);
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      defaultKeyedValues3.clear();
      assertEquals(0, defaultKeyedValues3.getItemCount());
      
      Double double0 = new Double((-1473.1903868901131));
      assertNotNull(double0);
      assertEquals((-1473.1903868901131), (double)double0, 0.01);
      
      defaultKeyedValues1.insertValue(0, double0, 0.0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues1.setValue(double0, (Number) double0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      String string0 = defaultKeyedValues2.getKey(0);
      assertNotNull(string0);
      assertEquals(";E!Zs", string0);
      assertEquals(2, defaultKeyedValues2.getItemCount());
      
      DefaultKeyedValues<Float> defaultKeyedValues4 = new DefaultKeyedValues<Float>();
      assertNotNull(defaultKeyedValues4);
      assertEquals(0, defaultKeyedValues4.getItemCount());
      
      Float float0 = new Float(400.7326F);
      assertNotNull(float0);
      assertEquals(400.7326F, (float)float0, 0.01F);
      
      int int0 = defaultKeyedValues4.getIndex(float0);
      assertEquals((-1), int0);
      assertEquals(0, defaultKeyedValues4.getItemCount());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Float float0 = new Float(1.0);
      Float float1 = new Float((-3216.130593571708));
      DefaultKeyedValues<Long> defaultKeyedValues0 = new DefaultKeyedValues<Long>();
      Long long0 = new Long(1924L);
      DefaultKeyedValues<String> defaultKeyedValues1 = new DefaultKeyedValues<String>();
      defaultKeyedValues1.setValue("", (Number) long0);
      DefaultKeyedValues<Integer> defaultKeyedValues2 = new DefaultKeyedValues<Integer>();
      Integer integer0 = new Integer(1680);
      defaultKeyedValues2.getIndex(integer0);
      defaultKeyedValues2.addValue(integer0, (Number) null);
      defaultKeyedValues2.equals(long0);
      defaultKeyedValues2.getKeys();
      defaultKeyedValues2.getIndex(integer0);
      defaultKeyedValues2.hashCode();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValues1.sortByValues(sortOrder0);
      defaultKeyedValues1.removeValue("");
      DefaultKeyedValues<Byte> defaultKeyedValues3 = new DefaultKeyedValues<Byte>();
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        defaultKeyedValues3.getValue(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }
}
