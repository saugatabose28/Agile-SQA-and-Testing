/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:42:54 GMT 2023
 */

package org.jfree.data.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.StandardChartTheme;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlidingCategoryDataset_ESTest extends SlidingCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-48);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-48), (-48));
      int int1 = 230;
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnKey(230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(categoryDataset0).toString();
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1707, 1707);
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.getColumnKey(3240);
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getValue(1707, 3240);
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getUnderlyingDataset();
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.equals(object0);
      slidingCategoryDataset0.clone();
      CategoryDataset categoryDataset1 = slidingCategoryDataset0.getUnderlyingDataset();
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getColumnKey(157);
      slidingCategoryDataset0.validateObject();
      slidingCategoryDataset0.equals(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 7, 0);
      slidingCategoryDataset0.getValue(4062, 4074);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("").when(categoryDataset1).toString();
      doReturn((-1), 3081).when(categoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn("").when(categoryDataset1).getColumnKey(anyInt());
      doReturn(4077, 4071).when(categoryDataset1).getColumnCount();
      doReturn((Number) null).when(categoryDataset1).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(categoryDataset1, 1707, 1707);
      slidingCategoryDataset1.clone();
      slidingCategoryDataset1.getColumnCount();
      Comparable comparable0 = slidingCategoryDataset1.getColumnKey(3240);
      slidingCategoryDataset1.getColumnIndex(comparable0);
      slidingCategoryDataset1.getValue(1707, 3240);
      slidingCategoryDataset1.getColumnIndex(comparable0);
      slidingCategoryDataset1.getUnderlyingDataset();
      Object object0 = slidingCategoryDataset1.clone();
      slidingCategoryDataset1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      int int0 = 5;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 10, 5);
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.getColumnKey(0);
      slidingCategoryDataset0.getRowKey(10);
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getValue((-1247), 10);
      slidingCategoryDataset0.setMaximumCategoryCount(10);
      slidingCategoryDataset0.getColumnKey((-480));
      slidingCategoryDataset0.clone();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-24);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-24), (-24));
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset((CategoryDataset) null, (-24), 2497);
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getColumnCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(categoryDataset0).toString();
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0, 0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2730), (-2730));
      slidingCategoryDataset0.getRowCount();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.hasListener(eventListener0);
      slidingCategoryDataset0.getRowKey((-127));
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.getUnderlyingDataset();
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.removeChangeListener(datasetChangeListener0);
      slidingCategoryDataset0.getRowKey((-1540));
      slidingCategoryDataset0.getMaximumCategoryCount();
      slidingCategoryDataset0.getValue(0, (-1642));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0, 0, 0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null, (List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 6, 433);
      slidingCategoryDataset0.getRowKeys();
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.equals(object0);
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getRowIndex(0);
      slidingCategoryDataset0.getColumnKeys();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowIndex(comparable0);
      slidingCategoryDataset0.getFirstCategoryIndex();
      Comparable<DefaultIntervalCategoryDataset> comparable1 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<StandardChartTheme> comparable2 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(comparable1, comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(categoryDataset0).toString();
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0, 0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1707, 1707);
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.getColumnKey(3240);
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getValue(1707, 3240);
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getUnderlyingDataset();
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.equals(object0);
      slidingCategoryDataset0.clone();
      CategoryDataset categoryDataset1 = slidingCategoryDataset0.getUnderlyingDataset();
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getColumnKey(157);
      slidingCategoryDataset0.validateObject();
      slidingCategoryDataset0.equals(categoryDataset1);
      slidingCategoryDataset0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 255).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, (-1704));
      slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getValue(3624, (-1704));
      slidingCategoryDataset0.setMaximumCategoryCount(1);
      slidingCategoryDataset0.setMaximumCategoryCount(1);
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.equals((Object) null);
      slidingCategoryDataset0.getFirstCategoryIndex();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<StandardChartTheme> comparable0 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 2776, 2776);
      slidingCategoryDataset0.getValue(1588, 0);
      Comparable<DefaultCategoryDataset> comparable1 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.getColumnIndex(comparable2);
      slidingCategoryDataset0.getRowIndex(comparable1);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.addChangeListener(datasetChangeListener0);
      slidingCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      slidingCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      slidingCategoryDataset0.validateObject();
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.equals(slidingCategoryDataset0);
      slidingCategoryDataset0.getRowKey((-1));
      slidingCategoryDataset0.getRowCount();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "ity*)<+IfTA.%5pW3";
      int int0 = 0;
      int int1 = 4;
      int int2 = 8;
      int int3 = (-25);
      int int4 = 14;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 4, 4);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(1349, (-1763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-439), (-554));
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(categoryDataset0).toString();
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.hasListener(eventListener0);
      DatasetGroup datasetGroup0 = slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getValue(1, 1);
      slidingCategoryDataset0.getRowKey(1);
      slidingCategoryDataset0.getRowIndex((Comparable) null);
      slidingCategoryDataset0.getUnderlyingDataset();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(categoryDataset0).getRowCount();
      int int0 = 1;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 0);
      slidingCategoryDataset0.getRowKey(3737);
      slidingCategoryDataset0.getColumnKey(0);
      slidingCategoryDataset0.clone();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getRowIndex(comparable1);
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getColumnKey((-1));
      slidingCategoryDataset0.equals((Object) null);
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex((-2324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-3708), (-1691));
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.addChangeListener(datasetChangeListener1);
      slidingCategoryDataset0.removeChangeListener(datasetChangeListener0);
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.getRowIndex(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      slidingCategoryDataset0.getColumnIndex(comparable1);
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.equals(object0);
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getFirstCategoryIndex();
      slidingCategoryDataset0.getValue(7, (-3708));
      slidingCategoryDataset0.getFirstCategoryIndex();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-692), (-692));
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getValue(0, 0);
      slidingCategoryDataset0.setNotify(true);
      slidingCategoryDataset0.setNotify(true);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnIndex(comparable1);
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.setNotify(true);
      slidingCategoryDataset0.validateObject();
      slidingCategoryDataset0.getColumnKey((-1));
      slidingCategoryDataset0.getColumnKey((-692));
      slidingCategoryDataset0.getRowIndex((Comparable) null);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn((List) null, (List) null, (List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      int int0 = (-713);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 3253, (-713));
      slidingCategoryDataset0.getColumnKey(0);
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.setNotify(false);
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getRowCount();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(2434);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 7, 7);
      slidingCategoryDataset0.getValue(1, (-1053));
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1597).when(categoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(1597, 1597, 7).when(categoryDataset1).getRowIndex(any(java.lang.Comparable.class));
      doReturn((-1), 7).when(categoryDataset1).getRowCount();
      doReturn((Number) null, (Number) null).when(categoryDataset1).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(categoryDataset1, 0, 0);
      slidingCategoryDataset1.getRowIndex((Comparable) null);
      Object object0 = slidingCategoryDataset1.clone();
      slidingCategoryDataset1.setNotify(false);
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.getColumnCount();
      slidingCategoryDataset1.getColumnIndex(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.getRowIndex(comparable1);
      slidingCategoryDataset1.equals(object0);
      slidingCategoryDataset1.getRowIndex((Comparable) null);
      Object object1 = slidingCategoryDataset1.clone();
      slidingCategoryDataset1.equals(object1);
      slidingCategoryDataset1.getRowCount();
      slidingCategoryDataset1.validateObject();
      slidingCategoryDataset1.getValue(986, 246);
      slidingCategoryDataset1.getRowCount();
      slidingCategoryDataset1.getMaximumCategoryCount();
      slidingCategoryDataset1.getValue(7, 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 917, (-2537));
      slidingCategoryDataset0.getValue(917, 1487);
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-1106)).when(categoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable<DefaultIntervalCategoryDataset>) null, (Comparable) null, (Comparable) null).when(categoryDataset1).getColumnKey(anyInt());
      doReturn(5005).when(categoryDataset1).getRowIndex(any(java.lang.Comparable.class));
      doReturn((-1106), 1487).when(categoryDataset1).getColumnCount();
      doReturn((Number) null).when(categoryDataset1).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(categoryDataset1, (-1), 3);
      slidingCategoryDataset1.getValue(4, (-1));
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.hasListener(eventListener0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.addChangeListener(datasetChangeListener0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.setNotify(false);
      slidingCategoryDataset1.getColumnIndex(comparable0);
      slidingCategoryDataset1.getColumnCount();
      slidingCategoryDataset1.getColumnKeys();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.getRowIndex(comparable1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0, 0).when(categoryDataset0).getRowCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 14, (-2705));
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.setNotify(false);
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnIndex(comparable0);
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, 14, 4);
      slidingCategoryDataset0.equals(slidingCategoryDataset1);
      CategoryDataset categoryDataset1 = slidingCategoryDataset1.getUnderlyingDataset();
      slidingCategoryDataset1.equals(categoryDataset1);
      slidingCategoryDataset0.getRowKey(509);
      slidingCategoryDataset1.validateObject();
      slidingCategoryDataset1.getRowCount();
      slidingCategoryDataset0.getColumnKey((-2705));
      slidingCategoryDataset1.getColumnKey(255);
      slidingCategoryDataset1.getRowCount();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(categoryDataset0).getRowKey(anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-828));
      slidingCategoryDataset0.getRowKey(509);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(1118).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(comparable0).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(1118).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((-496)).when(categoryDataset0).getColumnCount();
      doReturn(1118).when(categoryDataset0).getRowCount();
      int int0 = (-426);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-426));
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset1.clone();
      Comparable comparable1 = slidingCategoryDataset0.getColumnKey(1);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((-3)).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((-3)).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((-2585), (-2585)).when(categoryDataset0).getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 3103, (-1742));
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.getColumnIndex((-1742));
      int int0 = 0;
      slidingCategoryDataset0.clone();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowIndex(comparable0);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0, 0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0, 0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null, (Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 4560, 4560);
      slidingCategoryDataset0.getRowKey(4560);
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, (-899), 3401);
      slidingCategoryDataset1.validateObject();
      slidingCategoryDataset1.getValue((Comparable) null, (Comparable) null);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.getValue(comparable0, comparable0);
      slidingCategoryDataset0.setMaximumCategoryCount(3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-862);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 7, (-862));
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = null;
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-365);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-365), (-79));
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowKey((-365));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 0);
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, 0, 0);
      slidingCategoryDataset1.clone();
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getRowKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0, 0, 0, 0, 0).when(categoryDataset0).getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1119), 20);
      slidingCategoryDataset0.getColumnIndex(20);
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, 20, 20);
      slidingCategoryDataset0.equals(slidingCategoryDataset1);
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset1.getColumnIndex(comparable0);
      int int0 = (-838);
      slidingCategoryDataset1.getRowKey((-838));
      slidingCategoryDataset1.equals(slidingCategoryDataset0);
      slidingCategoryDataset1.getRowKey((-2703));
      Comparable<StandardChartTheme> comparable1 = (Comparable<StandardChartTheme>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        slidingCategoryDataset1.getValue((Comparable) 20, (Comparable) comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 1422044976
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(categoryDataset0).toString();
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      slidingCategoryDataset0.getColumnCount();
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getUnderlyingDataset();
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, 0, 0);
      slidingCategoryDataset0.equals(slidingCategoryDataset1);
      slidingCategoryDataset0.getRowKey(1);
      slidingCategoryDataset0.getFirstCategoryIndex();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, 0);
      slidingCategoryDataset0.getMaximumCategoryCount();
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1205, 1205);
      slidingCategoryDataset0.getFirstCategoryIndex();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 14, (-1301));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowIndex(comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0, 0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1), 1043);
      DatasetGroup datasetGroup0 = slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      slidingCategoryDataset0.getMaximumCategoryCount();
      slidingCategoryDataset0.getColumnKey(1043);
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.setMaximumCategoryCount(1338);
      slidingCategoryDataset0.getColumnIndex(1338);
      slidingCategoryDataset0.clone();
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getRowKey((-1));
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-5181), 0);
      slidingCategoryDataset0.getColumnCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) 0, (Comparable) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Mock for Comparable, hashCode: 1578700569
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, 10);
      slidingCategoryDataset0.setMaximumCategoryCount(3172);
      slidingCategoryDataset0.getColumnKey(10);
      slidingCategoryDataset0.getRowCount();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(530);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1926, 1926);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(1926);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 12;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 12, 12);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, 0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getColumnIndex(comparable0);
      slidingCategoryDataset0.getColumnKey(0);
      slidingCategoryDataset0.equals("");
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-3289), (-3289));
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(slidingCategoryDataset0, (-3289), 0);
      slidingCategoryDataset1.getColumnCount();
      slidingCategoryDataset0.validateObject();
      slidingCategoryDataset0.getFirstCategoryIndex();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getRowCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1969), (-1515));
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setMaximumCategoryCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      int int0 = (-235);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-235), (-235));
      slidingCategoryDataset0.getColumnKey((-235));
      slidingCategoryDataset0.getColumnKeys();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex((-235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 775;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 775, 775);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setMaximumCategoryCount((-1672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2038), (-2038));
      slidingCategoryDataset0.getValue((-2038), 14);
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.setNotify(true);
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn(0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      int int0 = 200;
      int int1 = 6;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 200, 6);
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.clone();
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.equals(object0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.hasListener(eventListener0);
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowIndex(comparable0);
      slidingCategoryDataset0.getRowKey(0);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0, 0).when(categoryDataset0).getRowCount();
      int int0 = 1;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 0);
      slidingCategoryDataset0.getRowKey(3737);
      slidingCategoryDataset0.getColumnKey(0);
      slidingCategoryDataset0.clone();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getRowIndex(comparable0);
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getRowCount();
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      List list0 = slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getColumnIndex((Comparable) null);
      slidingCategoryDataset0.getColumnKey((-1));
      slidingCategoryDataset0.equals(list0);
      slidingCategoryDataset0.setMaximumCategoryCount(0);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.setFirstCategoryIndex((-2324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null, (Comparable) null).when(categoryDataset0).getColumnKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0).when(categoryDataset0).getRowCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2029), 0);
      slidingCategoryDataset0.getColumnKeys();
      slidingCategoryDataset0.validateObject();
      DatasetGroup datasetGroup0 = slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.setGroup(datasetGroup0);
      DatasetGroup datasetGroup1 = slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.setGroup(datasetGroup1);
      slidingCategoryDataset0.getRowKeys();
      slidingCategoryDataset0.getRowCount();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1835), (-1835));
      slidingCategoryDataset0.getValue(477, (-2730));
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn("G}9+", "org.jfree.data.category.SlidingCategoryDataset").when(categoryDataset1).toString();
      doReturn((-1835), (-1835)).when(categoryDataset1).getColumnIndex(any(java.lang.Comparable.class));
      doReturn("G}9+").when(categoryDataset1).getColumnKey(anyInt());
      doReturn((-1249)).when(categoryDataset1).getColumnCount();
      doReturn((Number) null).when(categoryDataset1).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(categoryDataset1, 1707, 1707);
      slidingCategoryDataset1.clone();
      slidingCategoryDataset1.getColumnCount();
      Comparable comparable0 = slidingCategoryDataset1.getColumnKey(3240);
      slidingCategoryDataset1.getColumnIndex(comparable0);
      slidingCategoryDataset1.getValue(1707, 3240);
      slidingCategoryDataset1.getColumnIndex(comparable0);
      slidingCategoryDataset1.getUnderlyingDataset();
      Object object0 = slidingCategoryDataset1.clone();
      slidingCategoryDataset1.equals(object0);
      slidingCategoryDataset1.clone();
      slidingCategoryDataset1.getUnderlyingDataset();
      SlidingCategoryDataset slidingCategoryDataset2 = (SlidingCategoryDataset)slidingCategoryDataset1.clone();
      // Undeclared exception!
      try { 
        slidingCategoryDataset2.setMaximumCategoryCount((-1835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'max' >= 0.
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-2578), (-2578));
      slidingCategoryDataset0.getFirstCategoryIndex();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-242), (-242));
      slidingCategoryDataset0.getValue((-242), (-1072));
      CategoryDataset categoryDataset1 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset1).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset1 = new SlidingCategoryDataset(categoryDataset1, 506, (-507));
      slidingCategoryDataset1.getValue((-507), (-3884));
      CategoryDataset categoryDataset2 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(categoryDataset2).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset2 = new SlidingCategoryDataset(categoryDataset2, 0, 0);
      slidingCategoryDataset2.getValue(0, 3911);
      slidingCategoryDataset0.equals(slidingCategoryDataset2);
      slidingCategoryDataset1.clone();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn((Comparable) null).when(categoryDataset0).getRowKey(anyInt());
      doReturn((List) null).when(categoryDataset0).getRowKeys();
      doReturn(0, 0).when(categoryDataset0).getColumnCount();
      doReturn(0).when(categoryDataset0).getRowCount();
      doReturn((Number) null).when(categoryDataset0).getValue(anyInt() , anyInt());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 2776, 2776);
      slidingCategoryDataset0.getValue(1588, 0);
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.getRowKeys();
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      
      int int0 = slidingCategoryDataset0.getColumnIndex(comparable1);
      assertEquals((-1), int0);
      
      slidingCategoryDataset0.getRowIndex(comparable0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      slidingCategoryDataset0.addChangeListener(datasetChangeListener0);
      Object object0 = slidingCategoryDataset0.clone();
      slidingCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      slidingCategoryDataset0.validateObject();
      int int1 = slidingCategoryDataset0.getColumnCount();
      assertEquals(0, int1);
      
      boolean boolean0 = slidingCategoryDataset0.equals(object0);
      assertTrue(boolean0);
      
      slidingCategoryDataset0.getRowKey((-1));
      slidingCategoryDataset0.getRowCount();
      assertEquals(2776, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2776, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(slidingCategoryDataset0, object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryDataset categoryDataset0 = mock(CategoryDataset.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(categoryDataset0).getColumnIndex(any(java.lang.Comparable.class));
      doReturn(0).when(categoryDataset0).getRowIndex(any(java.lang.Comparable.class));
      doReturn(255, 0).when(categoryDataset0).getColumnCount();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      DatasetGroup datasetGroup0 = slidingCategoryDataset0.getGroup();
      slidingCategoryDataset0.setFirstCategoryIndex(0);
      slidingCategoryDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: null
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }
}
