/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:18:37 GMT 2023
 */

package org.jfree.data.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultHeatMapDatasetTest;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeEvent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryToPieDataset_ESTest extends CategoryToPieDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = null;
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = null;
      try {
        categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, (TableOrder) null, (-1208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'extract' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2297), (-2297));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-2297), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2297), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, (-2297));
      assertNotNull(categoryToPieDataset0);
      assertEquals((-2297), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2297), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals((-2297), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-3609.55);
      doubleArray1[1] = 345.9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3609.55);
      doubleArray2[1] = (-3609.55);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 2364.6;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 345.9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3609.55);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1411.003331;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2334.485546;
      doubleArray4[1] = 1411.003331;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1411.003331;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 2334.485546;
      doubleArray6[1] = 2364.6;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = (-1626.05474);
      doubleArray6[4] = 1411.003331;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 345.9;
      doubleArray7[1] = 2334.485546;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 1.0;
      doubleArray8[1] = 2334.485546;
      doubleArray8[2] = 2334.485546;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (-1626.05474);
      doubleArray9[2] = 2364.6;
      doubleArray9[3] = (-3609.55);
      doubleArray9[4] = 0.0;
      doubleArray9[5] = 2334.485546;
      doubleArray9[6] = 0.0;
      doubleArray9[7] = 2042.89502874;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-185), 1639);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1639, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-185), slidingCategoryDataset0.getFirstCategoryIndex());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 1639);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1639, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-185), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1639, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((Comparable) 345.9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 29);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(29, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3782.684749);
      doubleArray1[3] = (-3646.7424872939);
      doubleArray1[4] = 5.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3782.684749);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3782.684749);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-3782.684749);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 5.0;
      doubleArray3[2] = (-3646.7424872939);
      doubleArray3[3] = 5.0;
      doubleArray3[4] = (-3646.7424872939);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 34);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(34, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertEquals(3, doubleArray0.length);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(34, categoryToPieDataset1.getExtractIndex());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(34, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.equals(categoryToPieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 937.35617611884;
      doubleArray1[1] = 1632.82;
      doubleArray1[2] = 2746.15;
      doubleArray1[3] = (-2.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 937.35617611884;
      doubleArray2[1] = 937.35617611884;
      doubleArray2[2] = 937.35617611884;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = 1632.82;
      doubleArray2[5] = (-2.0);
      doubleArray2[6] = (-2.0);
      doubleArray2[7] = 937.35617611884;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-2.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 2746.15;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = 2746.15;
      doubleArray5[3] = 937.35617611884;
      doubleArray5[4] = 937.35617611884;
      doubleArray5[5] = 1014.2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 2746.15;
      doubleArray6[1] = 2746.15;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1014.2;
      doubleArray7[1] = 937.35617611884;
      doubleArray7[2] = 1632.82;
      doubleArray7[3] = 1632.82;
      doubleArray7[4] = 174.3258;
      doubleArray7[5] = 1632.82;
      doubleArray7[6] = Double.POSITIVE_INFINITY;
      doubleArray7[7] = 2746.15;
      doubleArray7[8] = 2746.15;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = (-2.0);
      doubleArray8[1] = 174.3258;
      doubleArray8[2] = 1014.2;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      
      doubleArray9[0] = (-2.0);
      doubleArray9[1] = 1632.82;
      doubleArray9[2] = 2746.15;
      doubleArray9[3] = 937.35617611884;
      doubleArray9[4] = Double.POSITIVE_INFINITY;
      doubleArray9[5] = (-2.0);
      doubleArray9[6] = 1014.2;
      doubleArray9[7] = 2746.15;
      doubleArray9[8] = (-2.0);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Comparable comparable0 = categoryToPieDataset0.getKey(0);
      assertNotNull(comparable0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("Category 1", comparable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jfree.data.DefaultKeyedValues";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = categoryToPieDataset0.hasListener(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) tableOrder0);
      assertNull(number0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      
      boolean boolean0 = categoryToPieDataset0.equals(categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      assertTrue(boolean0);
      
      categoryToPieDataset0.setNotify(true);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      CategoryDataset categoryDataset0 = categoryToPieDataset0.getUnderlyingDataset();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNull(categoryDataset0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      defaultKeyedValuesDataset0.setValue((Comparable) tableOrder0, (-430.839));
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      defaultKeyedValuesDataset0.addChangeListener(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset2 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset2.equals((Object)categoryToPieDataset0));
      assertTrue(categoryToPieDataset2.equals((Object)categoryToPieDataset1));
      assertNotNull(categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset2.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset2.getExtractType());
      assertEquals(0, categoryToPieDataset2.getExtractIndex());
      
      boolean boolean1 = categoryToPieDataset0.equals(defaultKeyedValuesDataset0);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset2));
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 1469);
      assertNotNull(slidingCategoryDataset0);
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1469, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 5);
      assertNotNull(categoryToPieDataset0);
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1469, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getIndex(tableOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      DatasetGroup datasetGroup0 = categoryToPieDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("NOID", datasetGroup0.getID());
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder1, 237);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(237, categoryToPieDataset1.getExtractIndex());
      
      int int0 = categoryToPieDataset1.getItemCount();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(237, categoryToPieDataset1.getExtractIndex());
      assertEquals(0, int0);
      
      int int1 = categoryToPieDataset1.getExtractIndex();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertFalse(int1 == int0);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(237, categoryToPieDataset1.getExtractIndex());
      assertEquals(237, int1);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotNull(list0);
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int2 = categoryToPieDataset1.getIndex(tableOrder1);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(237, categoryToPieDataset1.getExtractIndex());
      assertEquals((-1), int2);
      
      TableOrder tableOrder2 = categoryToPieDataset0.getExtractType();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertSame(tableOrder0, tableOrder2);
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertSame(tableOrder2, tableOrder0);
      assertSame(tableOrder2, tableOrder1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder2.toString());
      assertEquals(TableOrder.BY_ROW, tableOrder2);
      
      boolean boolean0 = categoryToPieDataset1.hasListener(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertSame(tableOrder0, tableOrder2);
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertSame(tableOrder1, tableOrder0);
      assertSame(tableOrder1, tableOrder2);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(237, categoryToPieDataset1.getExtractIndex());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey(237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': 237
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 1073, (-2135));
      assertNotNull(slidingCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1073, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2135), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 1073);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1073, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2135), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1073, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      int int0 = categoryToPieDataset0.getIndex(tableOrder0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1073, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2135), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(1073, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "UbYC";
      stringArray0[2] = ",F]L";
      stringArray0[3] = "_N5Eu=GMOyi@Fb C0";
      stringArray0[4] = "org.jfree.data.DefaultKeyedValues2D";
      String string0 = "z&t;#Qy6TSQHs%4o]>0";
      stringArray0[5] = "z&t;#Qy6TSQHs%4o]>0";
      stringArray0[6] = "0%g4\"o{k0\"E9X]j,YP ";
      stringArray0[7] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 230);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(230, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-3141));
      assertNotNull(categoryToPieDataset0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-3141), categoryToPieDataset0.getExtractIndex());
      
      slidingCategoryDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(230, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-3141), categoryToPieDataset0.getExtractIndex());
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset1);
      assertEquals(8, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(230, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      
      List list0 = categoryToPieDataset1.getKeys();
      assertNotNull(list0);
      assertEquals(8, stringArray0.length);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(230, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      
      List list1 = categoryToPieDataset1.getKeys();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(8, stringArray0.length);
      assertNotSame(list1, list0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(230, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getEndValue((Comparable) "UbYC", (Comparable) "org.jfree.data.DefaultKeyedValues2D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = 401;
      int int1 = defaultIntervalCategoryDataset0.indexOf(tableOrder0);
      assertFalse(int1 == int0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-1), int1);
      
      int int2 = defaultIntervalCategoryDataset0.indexOf(tableOrder0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-1), int2);
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultIntervalCategoryDataset0.setNotify(true);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 401);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(401, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      DefaultHeatMapDatasetTest defaultHeatMapDatasetTest0 = new DefaultHeatMapDatasetTest();
      assertNotNull(defaultHeatMapDatasetTest0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultHeatMapDatasetTest0.datasetChanged(datasetChangeEvent0);
      defaultHeatMapDatasetTest0.testSerialization();
      defaultHeatMapDatasetTest0.testEquals();
      boolean boolean0 = categoryToPieDataset0.equals(defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(401, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertFalse(boolean0);
      
      defaultHeatMapDatasetTest0.testCloning();
      categoryToPieDataset0.addChangeListener(defaultHeatMapDatasetTest0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(401, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      boolean boolean1 = categoryToPieDataset0.equals(tableOrder0);
      assertTrue(boolean1 == boolean0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(401, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertFalse(boolean1);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(401, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertEquals(401, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.equals(categoryToPieDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-4292));
      assertNotNull(categoryToPieDataset0);
      assertEquals((-4292), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals((-4292), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-4292), categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      
      boolean boolean0 = categoryToPieDataset0.equals(categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals((-4292), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-4292), categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      assertTrue(boolean0);
      
      CategoryToPieDataset categoryToPieDataset2 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset2.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset2.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset1);
      assertEquals((-4292), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-4292), categoryToPieDataset2.getExtractIndex());
      assertTrue(categoryToPieDataset2.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset2.getExtractType());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset2));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals((-4292), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      int int0 = categoryToPieDataset0.getItemCount();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset2));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals((-4292), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, int0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultKeyedValuesDataset0.getKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1276.0749742);
      doubleArray1[2] = 345.9;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2819.14;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      int int0 = categoryToPieDataset0.getExtractIndex();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(0, int0);
      
      TableOrder tableOrder1 = categoryToPieDataset0.getExtractType();
      assertEquals(1, doubleArray0.length);
      assertSame(tableOrder0, tableOrder1);
      assertSame(tableOrder1, tableOrder0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(TableOrder.BY_COLUMN, tableOrder1);
      
      TableOrder tableOrder2 = categoryToPieDataset0.getExtractType();
      assertEquals(1, doubleArray0.length);
      assertSame(tableOrder0, tableOrder1);
      assertSame(tableOrder0, tableOrder2);
      assertSame(tableOrder2, tableOrder1);
      assertSame(tableOrder2, tableOrder0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals("TableOrder.BY_COLUMN", tableOrder2.toString());
      assertEquals(TableOrder.BY_COLUMN, tableOrder2);
      
      Number number0 = categoryToPieDataset0.getValue(0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertSame(tableOrder0, tableOrder1);
      assertSame(tableOrder0, tableOrder2);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(0.0, number0);
      
      boolean boolean0 = categoryToPieDataset0.equals("TableOrder.BY_COLUMN");
      assertEquals(1, doubleArray0.length);
      assertSame(tableOrder0, tableOrder1);
      assertSame(tableOrder0, tableOrder2);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jfree.data.UnknownKeyException";
      stringArray0[1] = "org.jfree.data.category.DefaultCategoryDataset";
      stringArray0[2] = "";
      stringArray0[3] = "org.jfree.data.category.CategoryToPieDataset";
      stringArray0[4] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = 6;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 6);
      assertNotNull(categoryToPieDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(6, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      categoryToPieDataset0.validateObject();
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(6, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertEquals(5, stringArray0.length);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(6, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(6, categoryToPieDataset1.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((Comparable) "org.jfree.data.category.CategoryToPieDataset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.validateObject();
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-4291);
      defaultCategoryDataset0.setValue((double) (-4291), (Comparable) tableOrder0, (Comparable) tableOrder0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-4291));
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals((-4291), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((Comparable) tableOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 798);
      assertNotNull(slidingCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 798);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      categoryToPieDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) tableOrder0);
      assertNull(number0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      defaultCategoryDataset0.setValue((-5121.749086765), (Comparable) tableOrder0, (Comparable) tableOrder0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.removeChangeListener(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = categoryToPieDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      slidingCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryToPieDataset0.validateObject();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(798, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(slidingCategoryDataset0.getNotify());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(798, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(798, categoryToPieDataset1.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((Comparable) tableOrder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 798, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 2412);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(2412, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      int int0 = categoryToPieDataset0.getItemCount();
      assertSame(tableOrder0, tableOrder1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(2412, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(0, int0);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder1, 3647);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(3647, categoryToPieDataset1.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      
      categoryToPieDataset0.addChangeListener(categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(2412, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertEquals(3647, categoryToPieDataset1.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      
      boolean boolean0 = categoryToPieDataset0.equals(defaultCategoryDataset0);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(2412, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      categoryToPieDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      
      CategoryDataset categoryDataset1 = categoryToPieDataset0.getUnderlyingDataset();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNull(categoryDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      TableOrder tableOrder1 = categoryToPieDataset0.getExtractType();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertSame(tableOrder1, tableOrder0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertEquals(TableOrder.BY_ROW, tableOrder1);
      
      categoryToPieDataset0.validateObject();
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      boolean boolean0 = categoryToPieDataset0.equals((Object) null);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      int int1 = 1487;
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      
      boolean boolean0 = categoryToPieDataset0.equals(categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue(1487);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      categoryToPieDataset0.validateObject();
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      int int0 = categoryToPieDataset0.getIndex(tableOrder0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((-4318));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-852));
      assertNotNull(categoryToPieDataset0);
      assertEquals((-852), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      int int0 = categoryToPieDataset0.getExtractIndex();
      assertEquals((-852), categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals((-852), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      defaultIntervalCategoryDataset0.validateObject();
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 953);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(953, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(953, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(953, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(953, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      List list1 = defaultIntervalCategoryDataset0.getRowKeys();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey(953);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      int int0 = defaultCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, int0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)categoryToPieDataset0.getUnderlyingDataset();
      assertNotNull(defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertTrue(defaultCategoryDataset1.getNotify());
      
      int int1 = categoryToPieDataset0.getExtractIndex();
      assertFalse(int1 == int0);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(1, int1);
      
      List list1 = categoryToPieDataset0.getKeys();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(list1, list0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 809.277;
      doubleArray1[3] = (-5516.674394133);
      doubleArray1[4] = (-1803.6374775617496);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-821.5711583455);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-821.5711583455);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 809.277;
      doubleArray2[3] = 809.277;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-5516.674394133);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1803.6374775617496);
      doubleArray3[5] = 809.277;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-5516.674394133);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = (-821.5711583455);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = (-1803.6374775617496);
      doubleArray6[8] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-5516.674394133);
      doubleArray7[1] = 809.277;
      doubleArray7[2] = (-821.5711583455);
      doubleArray7[3] = 1.0;
      doubleArray7[4] = (-5516.674394133);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 809.277;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      Comparable comparable0 = categoryToPieDataset0.getKey(0);
      assertNotNull(comparable0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals("Series 1", comparable0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 3196);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      
      DatasetGroup datasetGroup0 = categoryToPieDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryToPieDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryToPieDataset0.datasetChanged((DatasetChangeEvent) null);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      
      int int0 = categoryToPieDataset0.getExtractIndex();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertEquals(3196, int0);
      
      TableOrder tableOrder1 = categoryToPieDataset0.getExtractType();
      assertSame(tableOrder0, tableOrder1);
      assertSame(tableOrder1, tableOrder0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(TableOrder.BY_COLUMN, tableOrder1);
      
      int int1 = categoryToPieDataset0.getItemCount();
      assertFalse(int1 == int0);
      assertSame(tableOrder0, tableOrder1);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, int1);
      
      List list1 = categoryToPieDataset0.getKeys();
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(tableOrder0, tableOrder1);
      assertNotSame(list1, list0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)categoryToPieDataset0.getUnderlyingDataset();
      assertNotNull(defaultCategoryDataset1);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(tableOrder0, tableOrder1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(3196, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultCategoryDataset1.getNotify());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 387.904;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 387.904;
      doubleArray2[1] = 387.904;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 387.904;
      doubleArray3[1] = 387.904;
      doubleArray3[2] = 387.904;
      doubleArray3[3] = 387.904;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 387.904;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = 387.904;
      doubleArray4[3] = 387.904;
      doubleArray4[4] = 387.904;
      doubleArray4[5] = 1552.8328071182366;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 224.46;
      doubleArray5[1] = Double.NaN;
      doubleArray5[2] = 387.904;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-2612));
      assertNotNull(categoryToPieDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-2612), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      int int0 = categoryToPieDataset0.getItemCount();
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals((-2612), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-1905));
      assertNotNull(categoryToPieDataset0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals((-1905), categoryToPieDataset0.getExtractIndex());
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) tableOrder0);
      assertNull(number0);
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals((-1905), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': -1
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      Number number0 = categoryToPieDataset0.getValue((Comparable) tableOrder0);
      assertNull(number0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': 0
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 11);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(11, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset0.getNotify());
      
      defaultCategoryDataset0.setNotify(true);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue(2371);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.validateObject();
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = (-4291);
      defaultCategoryDataset0.setValue((double) (-4291), (Comparable) tableOrder0, (Comparable) tableOrder0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-4291));
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals((-4291), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((Comparable) tableOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.clear();
      assertTrue(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.validateObject();
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-4291);
      defaultCategoryDataset0.setValue((double) (-4291), (Comparable) tableOrder0, (Comparable) tableOrder0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-4291));
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertEquals((-4291), categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((Comparable) tableOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 961);
      assertNotNull(categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      DatasetGroup datasetGroup0 = categoryToPieDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryToPieDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals("NOID", datasetGroup0.getID());
      
      DefaultHeatMapDatasetTest defaultHeatMapDatasetTest0 = new DefaultHeatMapDatasetTest();
      assertNotNull(defaultHeatMapDatasetTest0);
      
      categoryToPieDataset0.addChangeListener(defaultHeatMapDatasetTest0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      categoryToPieDataset0.validateObject();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = categoryToPieDataset0.getItemCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(0, int0);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(961, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      assertEquals(961, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey(303);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': 303
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3782.684749);
      doubleArray1[3] = (-3646.7424872939);
      doubleArray1[4] = 5.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3782.684749);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3782.684749);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[0] = 0.0;
      doubleArray2[8] = (-3782.684749);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 5.0;
      doubleArray3[2] = (-3646.7424872939);
      doubleArray3[3] = 5.0;
      doubleArray3[4] = (-3646.7424872939);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 34);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(34, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertEquals(3, doubleArray0.length);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset1.getExtractType());
      assertEquals(34, categoryToPieDataset1.getExtractIndex());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(34, categoryToPieDataset0.getExtractIndex());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(TableOrder.BY_COLUMN, categoryToPieDataset0.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.equals(categoryToPieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset0.getNotify());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-2297);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow((Comparable) tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: TableOrder.BY_ROW
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3782.684749);
      doubleArray1[3] = (-3646.7424872939);
      doubleArray1[4] = 5.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3782.684749);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3782.684749);
      doubleArray2[6] = 0.0;
      doubleArray2[0] = 0.0;
      doubleArray2[8] = (-3782.684749);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 5.0;
      doubleArray3[2] = (-3646.7424872939);
      doubleArray3[3] = 5.0;
      doubleArray3[4] = (-3646.7424872939);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 34);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(34, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotNull(categoryToPieDataset1);
      assertEquals(3, doubleArray0.length);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset0.getNotify());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(categoryToPieDataset0.getNotify());
      assertEquals(34, categoryToPieDataset0.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset0.getExtractType());
      assertTrue(categoryToPieDataset1.getNotify());
      assertEquals(34, categoryToPieDataset1.getExtractIndex());
      assertEquals(TableOrder.BY_ROW, categoryToPieDataset1.getExtractType());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.equals(categoryToPieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultHeatMapDatasetTest defaultHeatMapDatasetTest0 = new DefaultHeatMapDatasetTest();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-1);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1));
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 0);
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryToPieDataset1.datasetChanged(datasetChangeEvent0);
      categoryToPieDataset1.getItemCount();
      categoryToPieDataset1.getUnderlyingDataset();
      // Undeclared exception!
      try { 
        categoryToPieDataset1.getKey((-1301));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': -1301
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      defaultIntervalCategoryDataset0.hasListener(categoryToPieDataset0);
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, 1511);
      categoryToPieDataset1.getValue((Comparable) tableOrder1);
      categoryToPieDataset1.clone();
      categoryToPieDataset1.setNotify(true);
      categoryToPieDataset1.getExtractIndex();
      categoryToPieDataset1.getIndex(tableOrder1);
      categoryToPieDataset1.getUnderlyingDataset();
      Object object0 = categoryToPieDataset1.clone();
      categoryToPieDataset1.equals(object0);
      // Undeclared exception!
      try { 
        categoryToPieDataset1.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      DatasetGroup datasetGroup0 = categoryToPieDataset0.getGroup();
      categoryToPieDataset0.getIndex(tableOrder0);
      categoryToPieDataset0.getExtractType();
      categoryToPieDataset0.getItemCount();
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      categoryToPieDataset0.getKeys();
      categoryToPieDataset0.getExtractType();
      categoryToPieDataset0.setGroup(datasetGroup0);
      categoryToPieDataset0.equals((Object) null);
      categoryToPieDataset0.getExtractIndex();
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': 0
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = 1517;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1517);
      categoryToPieDataset0.getKeys();
      TableOrder tableOrder1 = null;
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The 'item' index is out of bounds.
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][7];
      Number[] numberArray1 = new Number[2];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$0]5";
      stringArray0[2] = "";
      stringArray0[5] = "V2";
      stringArray0[6] = ">njnE>jcR4K";
      stringArray0[7] = ";>|";
      stringArray0[8] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }
}
