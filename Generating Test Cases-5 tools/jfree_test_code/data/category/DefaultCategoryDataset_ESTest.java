/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:53:58 GMT 2023
 */

package org.jfree.data.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DefaultKeyedValues2D;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultCategoryDataset_ESTest extends DefaultCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getColumnKeys();
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "}hv2", "", "").when(comparable0).toString();
      defaultCategoryDataset0.setValue((-3308.54691038), comparable0, comparable0);
      String string0 = "'MgCLz_y?i-kr4q";
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("}hv2", "'MgCLz_y?i-kr4q", "}hv2", "").when(comparable1).toString();
      defaultCategoryDataset0.setValue((Number) null, comparable1, comparable1);
      defaultCategoryDataset0.getColumnCount();
      defaultCategoryDataset0.getValue(1, 1);
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable2).toString();
      Object object0 = defaultCategoryDataset0.clone();
      defaultCategoryDataset0.equals(object0);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((-453.93680618458217), comparable1, comparable1);
      defaultCategoryDataset0.getRowIndex(comparable0);
      defaultCategoryDataset0.getRowIndex((-1));
      defaultCategoryDataset0.removeColumn(0);
      defaultCategoryDataset0.getColumnCount();
      Comparable<DefaultIntervalCategoryDataset> comparable2 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue(comparable2, comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: Mock for Comparable, hashCode: 2081225789
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetGroup datasetGroup0 = defaultCategoryDataset0.getGroup();
      defaultCategoryDataset0.setGroup(datasetGroup0);
      defaultCategoryDataset0.validateObject();
      defaultCategoryDataset0.validateObject();
      defaultCategoryDataset0.validateObject();
      defaultCategoryDataset0.equals(defaultCategoryDataset0);
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getRowCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      defaultCategoryDataset0.clear();
      defaultCategoryDataset0.addValue((Number) null, comparable0, comparable0);
      Comparable<DefaultCategoryDataset> comparable1 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.setValue(3923.538706, comparable2, comparable2);
      defaultCategoryDataset0.addValue((Number) null, comparable1, comparable1);
      defaultCategoryDataset0.getRowCount();
      defaultCategoryDataset0.removeRow(0);
      defaultCategoryDataset0.getColumnCount();
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeValue(3, comparable3);
      Comparable comparable4 = defaultCategoryDataset0.getColumnKey(0);
      defaultCategoryDataset0.equals(comparable4);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow(comparable4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: Mock for Comparable, hashCode: 8729014
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      double double0 = 846.3715;
      defaultCategoryDataset0.getRowKeys();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      Comparable<Object> comparable1 = null;
      defaultCategoryDataset0.getColumnCount();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.setValue(846.3715, (Comparable) 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Number number0 = null;
      Comparable<DefaultKeyedValues2D> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.setValue((Number) null, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.hashCode();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.addValue((Number) 871, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = (-2161);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue((-2161), (-2161));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Object object0 = defaultCategoryDataset0.clone();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      defaultCategoryDataset0.addValue((-1276.10372165975), comparable0, comparable0);
      defaultCategoryDataset0.equals(object0);
      Comparable<DefaultIntervalCategoryDataset> comparable1 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      defaultCategoryDataset0.addValue(380.0302261567022, comparable1, comparable1);
      defaultCategoryDataset0.getColumnKeys();
      defaultCategoryDataset0.hashCode();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue(2042, 2042);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2042, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getRowIndex(comparable0);
      Comparable<DefaultCategoryDataset> comparable1 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.setValue(1.0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.validateObject();
      defaultCategoryDataset0.getColumnKeys();
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeValue(comparable0, comparable0);
      defaultCategoryDataset0.getRowCount();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.setValue((Number) 0, (Comparable) comparable1, (Comparable) comparable2);
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getRowIndex(comparable3);
      Comparable<String> comparable4 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<SlidingCategoryDataset> comparable5 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getColumnIndex(comparable5);
      defaultCategoryDataset0.setValue((Number) (-1), (Comparable) comparable4, (Comparable) comparable4);
      Comparable<String> comparable6 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable6).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(comparable6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: Mock for Comparable, hashCode: 1582015127
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.setNotify(false);
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getColumnIndex(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      defaultCategoryDataset0.addValue(11.0, comparable1, comparable1);
      defaultCategoryDataset0.getColumnKeys();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowKey((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getRowIndex(comparable0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((Number) (-1), (Comparable) comparable1, (Comparable) comparable1);
      defaultCategoryDataset0.getRowCount();
      Comparable<SlidingCategoryDataset> comparable2 = null;
      Comparable<String> comparable3 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.clear();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeValue((Comparable) null, comparable3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = null;
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.addValue(0.0, comparable2, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getColumnIndex(comparable0);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow((-1874));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, int0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.incrementValue((-1056.41), 0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: Mock for Comparable, hashCode: 719771382
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset2 = new DefaultCategoryDataset();
      defaultCategoryDataset2.getRowCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset1.addValue(0.0, (Comparable) 0, (Comparable) comparable0);
      defaultCategoryDataset1.hashCode();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow((Comparable) (-2029969202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: -2029969202
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((-1724.1328853305047), comparable0, comparable0);
      int int0 = (-2834);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnKey((-2834));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowKey(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetGroup datasetGroup0 = defaultCategoryDataset0.getGroup();
      defaultCategoryDataset0.clear();
      defaultCategoryDataset0.setGroup(datasetGroup0);
      defaultCategoryDataset0.getRowKeys();
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getColumnIndex(comparable0);
      double double0 = (-1028.649998332);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener0);
      defaultCategoryDataset0.hasListener(eventListener0);
      defaultCategoryDataset0.clear();
      double double0 = 0.0;
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.setValue(0.0, comparable0, comparable0);
      Comparable<Object> comparable1 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getColumnIndex(comparable0);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowKey((-425));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue(0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnKey(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      defaultCategoryDataset0.addValue(0.0, comparable0, comparable0);
      Comparable comparable1 = defaultCategoryDataset0.getRowKey(0);
      defaultCategoryDataset0.incrementValue(0.0, comparable1, comparable1);
      defaultCategoryDataset0.removeRow(comparable1);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow(comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: Mock for Comparable, hashCode: 796689254
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.clear();
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.setValue((-3288.996554850632), comparable0, comparable0);
      defaultCategoryDataset0.validateObject();
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getRowIndex(comparable1);
      defaultCategoryDataset0.getRowCount();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      defaultCategoryDataset0.equals(defaultCategoryDataset1);
      DefaultCategoryDataset defaultCategoryDataset2 = new DefaultCategoryDataset();
      defaultCategoryDataset2.getRowCount();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      defaultCategoryDataset0.setValue((Number) 0, (Comparable) comparable0, (Comparable) comparable0);
      defaultCategoryDataset0.getValue(0, 0);
      Object object0 = defaultCategoryDataset0.clone();
      defaultCategoryDataset0.equals(object0);
      Comparable<Object> comparable1 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      defaultCategoryDataset0.addValue((Number) null, comparable0, comparable0);
      Object object0 = defaultCategoryDataset0.clone();
      defaultCategoryDataset0.equals(object0);
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener0);
      defaultCategoryDataset0.getRowCount();
      defaultCategoryDataset0.getRowIndex(1);
      defaultCategoryDataset0.hashCode();
      defaultCategoryDataset0.removeRow(0);
      defaultCategoryDataset0.getColumnKeys();
      defaultCategoryDataset0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Object object0 = defaultCategoryDataset0.clone();
      defaultCategoryDataset0.equals(object0);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.equals("");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getColumnCount();
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.setValue((Number) 0, (Comparable) comparable0, (Comparable) comparable0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.setValue(881.2250723691627, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getColumnCount();
      defaultCategoryDataset0.getColumnKeys();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.hasListener(eventListener0);
      defaultCategoryDataset0.getColumnCount();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Integer> comparable1 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.getRowKeys();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.hasListener(eventListener0);
      defaultCategoryDataset0.getColumnCount();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue((Comparable) comparable0, (Comparable) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.validateObject();
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 0;
      Comparable<DefaultCategoryDataset> comparable0 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeValue(comparable0, comparable0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.incrementValue(0, comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.incrementValue(0.0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      double double0 = 3481.921239203065;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnKey((-3055));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue(1490, 1490);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1490, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Comparable<SlidingCategoryDataset> comparable0 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeValue(comparable0, comparable0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((-706.66203), comparable0, comparable0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      Comparable<SlidingCategoryDataset> comparable1 = (Comparable<SlidingCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.incrementValue(0.0, comparable1, comparable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getRowCount();
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, int0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      int int1 = defaultCategoryDataset0.hashCode();
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(int1 == int0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn((Comparable) 871);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 871
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      defaultCategoryDataset0.setValue((-3308.54691038), comparable0, comparable0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable1).toString();
      defaultCategoryDataset0.setValue((Number) null, comparable1, comparable1);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable2).toString();
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertEquals(2, defaultCategoryDataset1.getColumnCount());
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      boolean boolean0 = defaultCategoryDataset0.equals(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertEquals(2, defaultCategoryDataset1.getColumnCount());
      assertTrue(boolean0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: null
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Comparable<DefaultKeyedValues2D> comparable0 = (Comparable<DefaultKeyedValues2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("K!yWQG ;,CUI", "K!yWQG ;,CUI", "K!yWQG ;,CUI", "g(\"b#Pr&+dPY~>1c-I").when(comparable0).toString();
      defaultCategoryDataset0.setValue((-3308.54691038), comparable0, comparable0);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Unrecognised rowKey: ", "B", "Unrecognised rowKey: ", "B").when(comparable1).toString();
      defaultCategoryDataset0.setValue((Number) null, comparable1, comparable1);
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Unrecognised rowKey: ").when(comparable2).toString();
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertEquals(2, defaultCategoryDataset1.getColumnCount());
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      boolean boolean0 = defaultCategoryDataset0.equals(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertEquals(2, defaultCategoryDataset1.getColumnCount());
      assertTrue(boolean0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn(comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: Unrecognised rowKey: 
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertNotNull(defaultCategoryDataset1);
      
      boolean boolean0 = defaultCategoryDataset0.equals(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertTrue(defaultCategoryDataset1.getNotify());
      assertTrue(boolean0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeColumn((-240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.addValue((-998.1757465097631), comparable0, comparable0);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.setNotify(false);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertFalse(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.removeValue(comparable1, comparable1);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertFalse(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.hashCode();
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertFalse(defaultCategoryDataset0.getNotify());
      
      defaultCategoryDataset0.setNotify(false);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertFalse(defaultCategoryDataset0.getNotify());
      
      Comparable<DefaultCategoryDataset> comparable2 = (Comparable<DefaultCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.data.category.DefaultCategoryDataset").when(comparable2).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.incrementValue(1.0, comparable2, comparable2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: org.jfree.data.category.DefaultCategoryDataset
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List list1 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      List list2 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.clear();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultCategoryDataset0.getColumnIndex(comparable1);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      
      defaultCategoryDataset0.setValue(5.0, comparable0, comparable0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      defaultCategoryDataset0.clear();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      int int1 = defaultCategoryDataset0.getRowCount();
      assertFalse(int1 == int0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, int1);
      
      Comparable<String> comparable4 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable4).toString();
      defaultCategoryDataset0.setValue((Number) 0, (Comparable) comparable4, (Comparable) comparable4);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      List list3 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertNotNull(list3);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      
      int int2 = defaultCategoryDataset0.hashCode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      int int3 = defaultCategoryDataset0.getColumnCount();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, int3);
      
      int int4 = defaultCategoryDataset0.getRowCount();
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, int4);
      
      int int5 = defaultCategoryDataset0.getRowCount();
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, int5);
      
      Comparable<Object> comparable5 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Unrecognised rowKey: ").when(comparable5).toString();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.incrementValue((-480.786812), 1, comparable5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: Unrecognised rowKey: 
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      assertNotNull(defaultCategoryDataset0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.hashCode();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultCategoryDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.removeRow((Comparable) 871);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 871
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultCategoryDataset0.getGroup();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultCategoryDataset0.setGroup(datasetGroup0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultCategoryDataset0.hashCode();
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultCategoryDataset0.getRowIndex(comparable0);
      assertTrue(defaultCategoryDataset0.getNotify());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnKey(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      DatasetGroup datasetGroup0 = defaultCategoryDataset0.getGroup();
      defaultCategoryDataset0.setGroup(datasetGroup0);
      defaultCategoryDataset0.validateObject();
      defaultCategoryDataset0.equals(defaultCategoryDataset1);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener1);
      DatasetChangeListener datasetChangeListener2 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener2);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("*C/OYV L8;E", "*C/OYV L8;E", "*C/OYV L8;E").when(comparable0).toString();
      defaultCategoryDataset0.addValue((Number) null, comparable0, comparable0);
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      defaultCategoryDataset0.addValue((Number) null, (Comparable) "id", (Comparable) "");
      defaultCategoryDataset1.equals("id");
      defaultCategoryDataset0.equals(defaultCategoryDataset1);
      defaultCategoryDataset0.removeChangeListener(datasetChangeListener0);
      defaultCategoryDataset0.getRowCount();
      defaultCategoryDataset0.getRowIndex(2);
      defaultCategoryDataset0.hashCode();
      defaultCategoryDataset0.removeRow(0);
      defaultCategoryDataset0.getColumnKeys();
      defaultCategoryDataset0.getColumnCount();
      // Undeclared exception!
      try { 
        defaultCategoryDataset1.getRowKey((-795));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
