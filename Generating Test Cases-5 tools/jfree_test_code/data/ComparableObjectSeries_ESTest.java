/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:27:20 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.general.SeriesChangeListener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparableObjectSeries_ESTest extends ComparableObjectSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      
      comparableObjectSeries0.setDescription("PO'f60B^5H?&n){HR");
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals("PO'f60B^5H?&n){HR", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals("PO'f60B^5H?&n){HR", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertFalse(boolean0);
      
      comparableObjectSeries1.setMaximumItemCount(465);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals("PO'f60B^5H?&n){HR", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(465, comparableObjectSeries1.getMaximumItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      
      comparableObjectSeries0.clear();
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals("PO'f60B^5H?&n){HR", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      
      ComparableObjectSeries comparableObjectSeries2 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries2);
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertNull(comparableObjectSeries2.getDescription());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertTrue(comparableObjectSeries2.getNotify());
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(boolean0);
      
      comparableObjectSeries1.add("PO'f60B^5H?&n){HR", comparableObjectSeries2, false);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertNull(comparableObjectSeries2.getDescription());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertTrue(comparableObjectSeries2.getNotify());
      
      boolean boolean1 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(boolean1);
      
      boolean boolean2 = comparableObjectSeries1.equals(comparableObjectSeries2);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertNull(comparableObjectSeries2.getDescription());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertTrue(comparableObjectSeries2.getNotify());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      comparableObjectSeries0.hashCode();
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      
      ComparableObjectSeries comparableObjectSeries2 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries2);
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertNull(comparableObjectSeries2.getDescription());
      assertTrue(comparableObjectSeries2.getNotify());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      
      comparableObjectSeries1.add("PO'f60B^5H?&n){HR", comparableObjectSeries2, false);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertNull(comparableObjectSeries2.getDescription());
      assertTrue(comparableObjectSeries2.getNotify());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      
      ComparableObjectSeries comparableObjectSeries3 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries3);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries3.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries3.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries3.equals((Object)comparableObjectSeries2));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries3);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries3, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries3, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries3, comparableObjectSeries2);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries3.getDescription());
      assertTrue(comparableObjectSeries3.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries3.getNotify());
      assertEquals(1, comparableObjectSeries3.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries3.getMaximumItemCount());
      assertTrue(comparableObjectSeries3.getAutoSort());
      
      comparableObjectSeries1.updateByIndex(0, comparableObjectSeries3);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries3));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries3));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries3.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries3.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries3.equals((Object)comparableObjectSeries2));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries3);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries3);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries3, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries3, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries3, comparableObjectSeries2);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNull(comparableObjectSeries3.getDescription());
      assertTrue(comparableObjectSeries3.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries3.getNotify());
      assertEquals(1, comparableObjectSeries3.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries3.getMaximumItemCount());
      assertTrue(comparableObjectSeries3.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.setMaximumItemCount(0);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.addChangeListener(seriesChangeListener0);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertFalse(boolean0);
      
      comparableObjectSeries1.setMaximumItemCount(465);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertEquals(465, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      comparableObjectSeries0.setNotify(false);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      comparableObjectSeries0.data = null;
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add("", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      int int0 = comparableObjectSeries0.indexOf("");
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals((-1), int0);
      
      comparableObjectSeries0.setNotify(true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.add("", "", true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      ComparableObjectItem comparableObjectItem0 = comparableObjectSeries0.remove("");
      assertNotNull(comparableObjectItem0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      boolean boolean0 = comparableObjectSeries0.getAutoSort();
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.setNotify(false);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add((Comparable) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      
      comparableObjectSeries0.add("", comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(1, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      
      comparableObjectSeries0.setNotify(false);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add("", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.setNotify(true);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.add("", "", false);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.update("", "");
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      
      boolean boolean0 = comparableObjectSeries1.equals(comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.setNotify(false);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.add("", "", true);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      
      int int0 = comparableObjectSeries0.indexOf("");
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem((-1476));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      String string0 = "PO'f60BAvH/&n){HR";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60BAvH/&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.hashCode();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, int0);
      
      int int1 = (-579);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((-579));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      String string0 = "PO'f60B^5H?&n){HR";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.delete(2472, (-6));
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.removePropertyChangeListener(propertyChangeListener0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries1.add((ComparableObjectItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.fireSeriesChanged();
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.add("", "");
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(boolean0);
      
      boolean boolean1 = comparableObjectSeries0.equals("");
      assertTrue(boolean1 == boolean0);
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(boolean1);
      
      boolean boolean2 = comparableObjectSeries0.getAllowDuplicateXValues();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem((-1476));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.delete(2003, 2003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2003, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.setDescription("");
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals("", comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.setNotify(true);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals("", comparableObjectSeries0.getDescription());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals("", comparableObjectSeries0.getDescription());
      assertEquals(0, int0);
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals("", comparableObjectSeries0.getDescription());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.delete((-3007), 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", true, true);
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.add("", "");
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      boolean boolean0 = comparableObjectSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("m>a", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.clear();
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.setMaximumItemCount(45);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(45, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      comparableObjectSeries0.setNotify(false);
      assertFalse(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      comparableObjectSeries0.add("", "", true);
      assertFalse(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      ComparableObjectItem comparableObjectItem0 = comparableObjectSeries0.remove("");
      assertNotNull(comparableObjectItem0);
      assertFalse(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, true);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
      
      comparableObjectSeries0.add("", "");
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.hashCode();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(boolean0);
      
      comparableObjectSeries1.setMaximumItemCount(465);
      assertEquals(465, comparableObjectSeries1.getMaximumItemCount());
      
      comparableObjectSeries0.clear();
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, true);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.add("", "");
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.hashCode();
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.addChangeListener(seriesChangeListener0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.setMaximumItemCount((-468));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      String string0 = "PO'f60B^5H?&n){HR";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      int int0 = comparableObjectSeries0.getMaximumItemCount();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, int0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.add((Comparable) null, "ZP@K`QPjuyRYz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem(1164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1164, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, true);
      assertNotNull(comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.delete(2472, (-1476));
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.add("", "");
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      
      boolean boolean0 = comparableObjectSeries0.getAllowDuplicateXValues();
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR", false, true);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.add("PO'f60B^5H?&n){HR", (Object) null, false);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      ComparableObjectItem comparableObjectItem0 = comparableObjectSeries0.remove("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectItem0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.add(comparableObjectItem0, true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, true);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.add("", "");
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.clear();
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeVetoableChangeListener(vetoableChangeListener0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      boolean boolean0 = comparableObjectSeries0.equals("");
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("org.jfree.data.xy.YIntervalSeriesTest", false, true);
      assertNotNull(comparableObjectSeries0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.add("org.jfree.data.xy.YIntervalSeriesTest", "org.jfree.data.xy.YIntervalSeriesTest");
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.delete(2472, 0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update((Comparable) null, "PO'f60B^5H?&n){HR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.fireSeriesChanged();
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.updateByIndex((-1476), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      comparableObjectSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, int0);
      
      ComparableObjectSeries comparableObjectSeries1 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries1);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      
      ComparableObjectSeries comparableObjectSeries2 = (ComparableObjectSeries)comparableObjectSeries1.clone();
      assertNotNull(comparableObjectSeries2);
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNull(comparableObjectSeries2.getDescription());
      assertTrue(comparableObjectSeries2.getNotify());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.updateByIndex(0, comparableObjectSeries2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, true);
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      int int0 = comparableObjectSeries0.indexOf("");
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals((-1), int0);
      
      ComparableObjectSeries comparableObjectSeries1 = new ComparableObjectSeries((-1));
      assertNotNull(comparableObjectSeries1);
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      
      comparableObjectSeries1.clear();
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("");
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      int int0 = comparableObjectSeries0.getMaximumItemCount();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = comparableObjectSeries0.hashCode();
      assertFalse(int1 == int0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update((Comparable) null, "PO'f60B^5H?&n){HR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      int int0 = comparableObjectSeries0.indexOf("");
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
      
      comparableObjectSeries0.addChangeListener(seriesChangeListener0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
      
      boolean boolean1 = comparableObjectSeries0.getAllowDuplicateXValues();
      assertFalse(boolean1 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.setNotify(true);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.indexOf((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = null;
      try {
        comparableObjectSeries0 = new ComparableObjectSeries((Comparable) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      ComparableObjectSeries comparableObjectSeries0 = null;
      try {
        comparableObjectSeries0 = new ComparableObjectSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      assertNotNull(comparableObjectSeries0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.setNotify(true);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.add("", "", true);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.update("", "");
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      int int0 = comparableObjectSeries0.getMaximumItemCount();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = comparableObjectSeries0.hashCode();
      assertFalse(int1 == int0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.setMaximumItemCount(1569);
      assertEquals(1569, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", true, true);
      assertNotNull(comparableObjectSeries0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.setDescription("");
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("", comparableObjectSeries0.getDescription());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removePropertyChangeListener(propertyChangeListener0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("", comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.add("", "");
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals("", comparableObjectSeries0.getDescription());
      
      comparableObjectSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(1, comparableObjectSeries0.getItemCount());
      assertEquals("", comparableObjectSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.getDataItem(2877);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2877, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("", false, false);
      Object object0 = comparableObjectSeries0.clone();
      comparableObjectSeries0.equals(object0);
      comparableObjectSeries0.setNotify(false);
      comparableObjectSeries0.add("", "", true);
      comparableObjectSeries0.remove("");
      // Undeclared exception!
      try { 
        comparableObjectSeries0.update("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      String string0 = "PO'f60B^5H?&n){HR";
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries("PO'f60B^5H?&n){HR");
      // Undeclared exception!
      try { 
        comparableObjectSeries0.delete((-6), 2472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
  }
}
