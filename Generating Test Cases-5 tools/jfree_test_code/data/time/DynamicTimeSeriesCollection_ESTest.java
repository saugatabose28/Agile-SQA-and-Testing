/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:24:12 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicTimeSeriesCollection_ESTest extends DynamicTimeSeriesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(53, (-4824), regularTimePeriod0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) (-4824);
      floatArray0[6] = (float) 1;
      floatArray0[8] = (float) 2;
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      dynamicTimeSeriesCollection0.getSeriesCount();
      dynamicTimeSeriesCollection0.offsetFromNewest((-1749));
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainLowerBound(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      RegularTimePeriod[] regularTimePeriodArray0 = new RegularTimePeriod[8];
      float[] floatArray0 = new float[0];
      dynamicTimeSeriesCollection0.appendData(floatArray0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      doReturn((String) null).when(regularTimePeriod0).toString();
      regularTimePeriodArray0[0] = regularTimePeriod0;
      regularTimePeriodArray0[1] = regularTimePeriod0;
      regularTimePeriodArray0[2] = regularTimePeriod0;
      regularTimePeriodArray0[3] = regularTimePeriod0;
      regularTimePeriodArray0[4] = regularTimePeriod0;
      regularTimePeriodArray0[5] = regularTimePeriod0;
      regularTimePeriodArray0[6] = regularTimePeriod0;
      regularTimePeriodArray0[7] = regularTimePeriod0;
      dynamicTimeSeriesCollection0.pointsInTime = regularTimePeriodArray0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 8, regularTimePeriod0);
      DatasetGroup datasetGroup0 = dynamicTimeSeriesCollection0.getGroup();
      dynamicTimeSeriesCollection0.setGroup(datasetGroup0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1185;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1185;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 8;
      dynamicTimeSeriesCollection0.appendData(floatArray0, 1, 1);
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence(1185);
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 1;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (float) 8;
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray1;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      dynamicTimeSeriesCollection0.workingCalendar = (Calendar) mockGregorianCalendar0;
      dynamicTimeSeriesCollection_ValueSequence0.enterData(0, 1185);
      dynamicTimeSeriesCollection0.getSeriesCount();
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainLowerBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 59;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(59, (-1586)).when(timeZone0).getOffset(anyLong());
      doReturn(59, 13).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(59, 59, timeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(1, 2);
      dynamicTimeSeriesCollection0.hasListener(dynamicTimeSeriesCollection1);
      dynamicTimeSeriesCollection0.getPosition();
      dynamicTimeSeriesCollection0.getOldestIndex();
      dynamicTimeSeriesCollection1.translateGet(1219);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection1.setTimeBase(regularTimePeriod0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.jfree.data.time.RegularTimePeriod$MockitoMock$700488510
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int int0 = 1377;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1377, 1377);
      int int1 = 863;
      int int2 = 853;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(0, 365, timeZone0);
      dynamicTimeSeriesCollection0.hasListener(dynamicTimeSeriesCollection1);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndX(853, 1016);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      dynamicTimeSeriesCollection0.historyCount = 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      dynamicTimeSeriesCollection0.findMaxValue();
      int int1 = 0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addSeries(floatArray0, (-1165), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1165
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-834)).when(timeZone0).getOffset(anyLong());
      doReturn(45, (-1559)).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 0, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getNewestTime();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1;
      dynamicTimeSeriesCollection0.historyCount = 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      dynamicTimeSeriesCollection0.findMaxValue();
      dynamicTimeSeriesCollection0.historyCount = (-2340);
      dynamicTimeSeriesCollection0.wrapOffset(0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndY(469, 2242);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 469
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(87, 0);
      dynamicTimeSeriesCollection0.getNewestIndex();
      int int0 = 32;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(2209, (-382)).when(timeZone0).getOffset(anyLong());
      doReturn(32, 64).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(32, 2209, timeZone0);
      dynamicTimeSeriesCollection0.hasListener(dynamicTimeSeriesCollection1);
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection1.addSeries((float[]) null, (-4634), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addSeries(): cannot add null array of values.
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      dynamicTimeSeriesCollection0.setPosition(0);
      int int1 = 871;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addValue(871, 0, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addValue(): series #871unspecified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      RegularTimePeriod[] regularTimePeriodArray0 = new RegularTimePeriod[8];
      float[] floatArray0 = new float[0];
      dynamicTimeSeriesCollection0.appendData(floatArray0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      regularTimePeriodArray0[0] = regularTimePeriod0;
      regularTimePeriodArray0[1] = regularTimePeriod0;
      regularTimePeriodArray0[2] = regularTimePeriod0;
      regularTimePeriodArray0[3] = regularTimePeriod0;
      regularTimePeriodArray0[4] = regularTimePeriod0;
      regularTimePeriodArray0[5] = regularTimePeriod0;
      regularTimePeriodArray0[6] = regularTimePeriod0;
      regularTimePeriodArray0[7] = regularTimePeriod0;
      dynamicTimeSeriesCollection0.pointsInTime = regularTimePeriodArray0;
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      dynamicTimeSeriesCollection0.getPosition();
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartY(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(13, 13, timeZone0);
      dynamicTimeSeriesCollection0.translateGet((-2007));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 397;
      int int1 = (-248);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(397, (-248), regularTimePeriod0);
      float[] floatArray0 = new float[2];
      int int2 = (-243);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0, 2000, (-243));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      int int1 = 2042;
      int int2 = 2213;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getY(2042, 2213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2042
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(44, 0, regularTimePeriod0, timeZone0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 44;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 44;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (-1.0F);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 0, timeZone0);
      dynamicTimeSeriesCollection0.setNotify(true);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.advanceTime();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 10;
      int int1 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 0, timeZone0);
      int int2 = (-23);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addValue((-23), (-23), (-1556.18F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 11;
      int int1 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(11, 0, timeZone0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.removeChangeListener(datasetChangeListener0);
      boolean boolean0 = false;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      dynamicTimeSeriesCollection0.addSeries(floatArray0, 0, 2.0F);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 2;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0, 11, (-2010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, (-1), regularTimePeriod0, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainLowerBound(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-3030);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1044, (-3030), regularTimePeriod0, timeZone0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.setTimeBase(regularTimePeriod1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(772, 772, timeZone0);
      DynamicTimeSeriesCollection.ValueSequence[] dynamicTimeSeriesCollection_ValueSequenceArray0 = new DynamicTimeSeriesCollection.ValueSequence[1];
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence();
      dynamicTimeSeriesCollection_ValueSequenceArray0[0] = dynamicTimeSeriesCollection_ValueSequence0;
      dynamicTimeSeriesCollection0.valueHistory = dynamicTimeSeriesCollection_ValueSequenceArray0;
      float[] floatArray0 = new float[1];
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray0;
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getXValue(772, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2286, 2286, timeZone0);
      dynamicTimeSeriesCollection0.findMaxValue();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      int int1 = (-181);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-181), regularTimePeriod0);
      DatasetGroup datasetGroup0 = dynamicTimeSeriesCollection0.getGroup();
      boolean boolean0 = false;
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      dynamicTimeSeriesCollection0.setGroup(datasetGroup0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getSeriesKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 52;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(52, 52, timeZone0);
      dynamicTimeSeriesCollection0.getNewestIndex();
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0, timeZone0);
      dynamicTimeSeriesCollection0.offsetFromNewest((-1038));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, regularTimePeriod0, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getNewestTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 2, timeZone0);
      DynamicTimeSeriesCollection.ValueSequence[] dynamicTimeSeriesCollection_ValueSequenceArray0 = new DynamicTimeSeriesCollection.ValueSequence[2];
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence(2);
      dynamicTimeSeriesCollection_ValueSequenceArray0[0] = dynamicTimeSeriesCollection_ValueSequence0;
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence1 = dynamicTimeSeriesCollection0.new ValueSequence();
      dynamicTimeSeriesCollection_ValueSequenceArray0[1] = dynamicTimeSeriesCollection_ValueSequence1;
      dynamicTimeSeriesCollection0.valueHistory = dynamicTimeSeriesCollection_ValueSequenceArray0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray0;
      dynamicTimeSeriesCollection0.getRangeUpperBound(false);
      int int0 = 2524;
      Comparable<Second> comparable0 = (Comparable<Second>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.setSeriesKey(2524, comparable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2524
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0, timeZone0);
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.indexOf(comparable0);
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence(2);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.addChangeListener(datasetChangeListener0);
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.removeChangeListener(datasetChangeListener1);
      dynamicTimeSeriesCollection_ValueSequence0.enterData(0, 968.0F);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getOldestTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0, timeZone0);
      dynamicTimeSeriesCollection0.invalidateRangeInfo();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.indexOf(comparable0);
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 52;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(52, 52, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 7;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(7, 7, regularTimePeriod0);
      dynamicTimeSeriesCollection0.setPosition(7);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getYValue(7, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // More data than series to put them in
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2000, 2000, regularTimePeriod0, timeZone0);
      int int0 = 0;
      dynamicTimeSeriesCollection0.getSeriesKey(0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2000;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addSeries(floatArray0, 9999, 2000.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addSeries(): cannot add more series than specified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 2;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0, 728, 1317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // More data than series to put them in
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 45, regularTimePeriod0, timeZone0);
      dynamicTimeSeriesCollection0.getItemCount(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      dynamicTimeSeriesCollection0.workingCalendar = (Calendar) mockGregorianCalendar0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // More data than series to put them in
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getSeriesKey(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, regularTimePeriod0);
      float[] floatArray0 = new float[0];
      dynamicTimeSeriesCollection0.historyCount = 0;
      int int0 = DynamicTimeSeriesCollection.START;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addSeries(floatArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addSeries(): cannot add more series than specified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.setTimeBase(regularTimePeriod0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 2000;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 2000);
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addSeries((float[]) null, 2000, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addSeries(): cannot add null array of values.
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0, timeZone0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.setTimeBase(regularTimePeriod1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4745, 4745, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainUpperBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-2530.3228F);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addSeries(floatArray0, 1519, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addSeries(): cannot add more series than specified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      dynamicTimeSeriesCollection0.validateObject();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 0;
      int int0 = 2319;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addSeries(floatArray0, 2319, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addSeries(): cannot add more series than specified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 326;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(326, 326);
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.seriesChanged(seriesChangeEvent0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1590.443F;
      floatArray0[2] = (float) 326;
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray0;
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.advanceTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2000, 2000, regularTimePeriod0, timeZone0);
      Comparable<Millisecond> comparable0 = (Comparable<Millisecond>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.setSeriesKey(1090, comparable0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      int int1 = 4922;
      dynamicTimeSeriesCollection0.offsetFromNewest(4922);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.advanceTime();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0, timeZone0);
      int int2 = 1760;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartX(1760, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      int int1 = 924;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 924, regularTimePeriod0);
      int int2 = (-3677);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndX((-3677), (-3677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1237, 0, timeZone0);
      float[] floatArray0 = new float[0];
      dynamicTimeSeriesCollection0.appendData(floatArray0, 1237, 0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartY((-1277), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1277
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2000;
      int int1 = 1418;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2000, 1418, regularTimePeriod0);
      dynamicTimeSeriesCollection0.clone();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1418;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1418;
      floatArray0[4] = (float) 1418;
      floatArray0[5] = (float) 2000;
      dynamicTimeSeriesCollection0.appendData(floatArray0);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getX((-1), 2000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      dynamicTimeSeriesCollection0.clone();
      dynamicTimeSeriesCollection0.translateGet(0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      dynamicTimeSeriesCollection0.workingCalendar = (Calendar) mockGregorianCalendar0;
      int int1 = 1;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartX(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 11;
      int int1 = 1;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(11, 1, regularTimePeriod0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0, 11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 2733;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2733, 2733, regularTimePeriod0, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1711;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1711, 459, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getYValue(242, 1711);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2243;
      RegularTimePeriod regularTimePeriod0 = null;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2243, 2243, (RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-612);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2349, (-612), regularTimePeriod0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.findDomainLimits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 603;
      int int1 = 1900;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(603, 1900);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(827, 827, regularTimePeriod0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      dynamicTimeSeriesCollection0.removeChangeListener(datasetChangeListener0);
      dynamicTimeSeriesCollection0.getRangeLowerBound(true);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2213, 831);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getYValue(701, 701);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartYValue(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 0;
      int int1 = (-684);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-684), timeZone0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = (-524);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-524), (-524), regularTimePeriod0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2000;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2000, 2000, (RegularTimePeriod) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1322), (-1322), (RegularTimePeriod) null, timeZone0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      int int1 = (-3801);
      float[] floatArray0 = new float[7];
      int int2 = 0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndX((-3801), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(31, 31, regularTimePeriod0);
      dynamicTimeSeriesCollection0.getRangeBounds(false);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(905, 0);
      dynamicTimeSeriesCollection0.getRangeUpperBound(false);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2870, 2870, regularTimePeriod0);
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      dynamicTimeSeriesCollection0.wrapOffset(2870);
      dynamicTimeSeriesCollection0.translateGet(0);
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence();
      dynamicTimeSeriesCollection_ValueSequence0.getData(46);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.findDomainLimits();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 2;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndXValue((-154), (-154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -154
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getX(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(53, (-4824), regularTimePeriod0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) (-4824);
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 53;
      floatArray0[8] = (float) 2;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      int int1 = 0;
      int int2 = (-5455);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addValue(0, (-5455), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addValue(): series #0unspecified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-967);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-967), (-967));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-342.427F);
      floatArray0[2] = 173.034F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getX(1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(279, 3127, regularTimePeriod0, timeZone0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 3127;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = 2673.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (-3179.743F);
      // Undeclared exception!
      dynamicTimeSeriesCollection0.appendData(floatArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-2647), (-2647));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 3189;
      int int1 = (-1503);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3189, (-1503), regularTimePeriod0);
      float[] floatArray0 = new float[4];
      RegularTimePeriod[] regularTimePeriodArray0 = new RegularTimePeriod[4];
      regularTimePeriodArray0[0] = regularTimePeriod0;
      regularTimePeriodArray0[1] = regularTimePeriod0;
      regularTimePeriodArray0[2] = regularTimePeriod0;
      regularTimePeriodArray0[3] = regularTimePeriod0;
      dynamicTimeSeriesCollection0.pointsInTime = regularTimePeriodArray0;
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addValue(44, 0, 3189);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(59, 59, timeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(1, 2);
      dynamicTimeSeriesCollection0.hasListener(dynamicTimeSeriesCollection1);
      dynamicTimeSeriesCollection0.getPosition();
      dynamicTimeSeriesCollection0.getOldestIndex();
      dynamicTimeSeriesCollection1.translateGet(1219);
      int int0 = 732;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection1.getEndY(732, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 732
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(53, (-4824), regularTimePeriod0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) (-4824);
      floatArray0[6] = (float) 1;
      floatArray0[8] = (float) 2;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.appendData(floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-1566);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-1566), regularTimePeriod0);
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      dynamicTimeSeriesCollection0.validateObject();
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.advanceTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 8, regularTimePeriod0);
      DatasetGroup datasetGroup0 = dynamicTimeSeriesCollection0.getGroup();
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      dynamicTimeSeriesCollection0.setGroup(datasetGroup0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1185;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1185;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 8;
      dynamicTimeSeriesCollection0.appendData(floatArray0, 0, 1);
      DynamicTimeSeriesCollection.ValueSequence dynamicTimeSeriesCollection_ValueSequence0 = dynamicTimeSeriesCollection0.new ValueSequence(1185);
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (float) 8;
      dynamicTimeSeriesCollection_ValueSequence0.dataPoints = floatArray1;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      dynamicTimeSeriesCollection0.workingCalendar = (Calendar) mockGregorianCalendar0;
      dynamicTimeSeriesCollection_ValueSequence0.enterData(0, 1185);
      dynamicTimeSeriesCollection0.getSeriesCount();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getDomainLowerBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 53;
      int int1 = (-4824);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(53, (-4824), regularTimePeriod0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.setTimeBase(regularTimePeriod1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, regularTimePeriod0);
      int int1 = 0;
      int int2 = (-5485);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.addValue(0, (-5485), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TimeSeriesDataset.addValue(): series #0unspecified in c'tor
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(879, 879);
      dynamicTimeSeriesCollection0.setPosition(53);
      dynamicTimeSeriesCollection0.getNewestTime();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 879;
      floatArray0[2] = 3166.7861F;
      dynamicTimeSeriesCollection0.fireSeriesChanged();
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 2;
      dynamicTimeSeriesCollection0.addSeries(floatArray0, 53, 1.0F);
      int int0 = dynamicTimeSeriesCollection0.wrapOffset(879);
      assertEquals(1, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, int0);
  }
}
