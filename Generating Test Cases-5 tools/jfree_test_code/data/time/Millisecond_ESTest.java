/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:21:45 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.Instant;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Millisecond_ESTest extends Millisecond_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      millisecond0.previous();
      millisecond0.getFirstMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 999, 0);
      mockGregorianCalendar0.setTime(date0);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      millisecond0.equals(millisecond0);
      millisecond0.getMillisecond();
      millisecond0.getSerialIndex();
      millisecond0.peg(mockGregorianCalendar0);
      Millisecond millisecond1 = new Millisecond(date0);
      millisecond0.compareTo(millisecond1);
      millisecond0.getMillisecond();
      millisecond1.getLastMillisecond();
      millisecond1.next();
      millisecond1.hashCode();
      millisecond1.next();
      millisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Locale locale0 = Locale.GERMAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      millisecond0.peg(calendar0);
      millisecond0.hashCode();
      locale0.getScript();
      millisecond0.hashCode();
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      millisecond0.getSerialIndex();
      millisecond0.compareTo(calendar0);
      Second second0 = new Second();
      second0.next();
      second0.toString();
      int int0 = MonthConstants.OCTOBER;
      millisecond0.hashCode();
      millisecond0.getSecond();
      millisecond0.getFirstMillisecond(calendar0);
      millisecond0.getSerialIndex();
      millisecond0.getSerialIndex();
      millisecond0.getMillisecond();
      Object object0 = new Object();
      millisecond0.equals(object0);
      millisecond0.getFirstMillisecond(calendar0);
      regularTimePeriod0.getLastMillisecond(calendar0);
      millisecond0.getSecond();
      MockDate mockDate0 = new MockDate(1L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Second second1 = new Second(mockDate0, timeZone0, locale0);
      millisecond0.compareTo(second1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.getSecond();
      MockDate mockDate0 = new MockDate(0, 59, 1284);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      millisecond0.compareTo(year0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "U<B%3]oqt}Koorx", (-918), 1506, 728, 0, (-3964), 2508, 1827, (-3964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -918
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-839L));
      Millisecond millisecond0 = new Millisecond();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      millisecond0.getFirstMillisecond(calendar0);
      millisecond0.getSerialIndex();
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      System.setCurrentTimeMillis(41686812419000L);
      millisecond0.compareTo((Object) null);
      System.setCurrentTimeMillis(41686812419000L);
      millisecond0.getMillisecond();
      System.setCurrentTimeMillis(161L);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.getSecond();
      MockDate mockDate0 = new MockDate(1284, 1284, 0, 5, 1506, 59);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      millisecond0.compareTo(year0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "U<B%3]oqt}Koorx", (-918), 1506, 728, 0, (-3964), 2508, 1827, (-3964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -918
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("&K");
      Locale locale0 = Locale.KOREA;
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      millisecond0.getFirstMillisecond(calendar0);
      millisecond0.toString();
      millisecond0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      millisecond0.getMillisecond();
      millisecond0.getSecond();
      millisecond0.getSerialIndex();
      millisecond0.getFirstMillisecond(calendar0);
      regularTimePeriod0.previous();
      millisecond0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      mockDate0.toInstant();
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, (Calendar) null);
      Date date0 = fixedMillisecond0.getTime();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Second second0 = new Second(date0, calendar0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      Millisecond millisecond0 = new Millisecond(17, second0);
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      millisecond0.getSerialIndex();
      millisecond0.next();
      millisecond0.getSerialIndex();
      mockDate0.after(date0);
      millisecond0.hashCode();
      millisecond0.equals(regularTimePeriod0);
      millisecond0.getLastMillisecond();
      millisecond0.next();
      millisecond0.hashCode();
      millisecond0.hashCode();
      millisecond0.previous();
      Object object0 = new Object();
      millisecond0.compareTo(object0);
      millisecond0.next();
      millisecond0.peg(calendar0);
      millisecond0.hashCode();
      millisecond0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Second second0 = millisecond0.getSecond();
      second0.getMiddleMillisecond();
      second0.getMiddleMillisecond();
      millisecond0.getSerialIndex();
      second0.getEnd();
      second0.previous();
      millisecond0.previous();
      millisecond0.toString();
      millisecond0.next();
      millisecond0.compareTo(second0);
      millisecond0.getMillisecond();
      millisecond0.compareTo("Fri Feb 14 20:21:21 GMT 2014");
      millisecond0.getFirstMillisecond();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        millisecond0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Millisecond", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(1645, second0);
      millisecond0.getEnd();
      millisecond0.toString();
      second0.getStart();
      millisecond0.getSerialIndex();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      millisecond0.getLastMillisecond(calendar0);
      millisecond0.peg(calendar0);
      millisecond0.getFirstMillisecond();
      millisecond0.getLastMillisecond();
      millisecond0.getLastMillisecond(calendar0);
      Second.parseSecond("C'");
      millisecond0.previous();
      millisecond0.getLastMillisecond();
      millisecond0.peg(calendar0);
      millisecond0.getSecond();
      millisecond0.next();
      millisecond0.previous();
      millisecond0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.previous();
      millisecond0.getMiddleMillisecond();
      millisecond0.getLastMillisecond();
      Calendar calendar0 = null;
      RegularTimePeriod.getCalendarInstance();
      // Undeclared exception!
      try { 
        millisecond0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Millisecond", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(490L);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      Second second0 = new Second(mockDate0, timeZone0, locale0);
      Date date0 = second0.getStart();
      Millisecond millisecond0 = new Millisecond(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 999, 0);
      millisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 37, 4200, 4200, 37);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4200, 79, 4200);
      mockDate0.toInstant();
      Millisecond millisecond0 = new Millisecond(mockDate0, mockGregorianCalendar0);
      Week week0 = new Week();
      MockDate mockDate1 = new MockDate(0, 53, 1, 0, (-650));
      mockDate0.after(mockDate1);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Year year0 = week0.getYear();
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      week0.getStart();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      week0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      year0.getEnd();
      millisecond0.previous();
      millisecond0.equals(year0);
      millisecond0.previous();
      millisecond0.getSerialIndex();
      millisecond0.peg(mockGregorianCalendar0);
      millisecond0.getSecond();
      millisecond0.getSerialIndex();
      millisecond0.compareTo(mockDate0);
      millisecond0.getLastMillisecond();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.setWeekDate(9999, 276, 4200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid dayOfWeek: 4200
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1738L));
      Date date0 = Date.from(instant0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Locale locale0 = Locale.CHINESE;
      Locale.getISOCountries();
      Locale.forLanguageTag("n?6g/7) 8W0k");
      Millisecond millisecond0 = new Millisecond(date0, timeZone0, locale0);
      millisecond0.getFirstMillisecond();
      millisecond0.getEnd();
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Period period0 = Period.ZERO;
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) period0);
      Date date0 = Date.from(instant1);
      Second second0 = new Second(date0);
      Millisecond millisecond0 = new Millisecond((-2845), second0);
      millisecond0.previous();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        millisecond0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Millisecond", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = null;
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = (-103);
      MockDate mockDate0 = new MockDate(0, 0, (-103), 0, (-103), 0);
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(mockDate0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(274, second0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      Quarter quarter0 = new Quarter(date0);
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      quarter0.peg(calendar0);
      quarter0.next();
      millisecond0.compareTo(quarter0);
      Locale locale1 = Locale.US;
      locale1.stripExtensions();
      Calendar calendar1 = MockCalendar.getInstance(locale1);
      millisecond0.getFirstMillisecond(calendar1);
      millisecond0.previous();
      Hour hour0 = new Hour(date0);
      millisecond0.equals(hour0);
      millisecond0.getFirstMillisecond(calendar1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond((Date) null, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 999, 0, 2465, 999, (-1969));
      millisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1343, (-284), (-812));
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.between(instant0, instant0);
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) duration0);
      Instant instant2 = MockInstant.with(instant1, (TemporalAdjuster) instant0);
      Instant instant3 = MockInstant.minusNanos(instant2, (-812));
      Instant instant4 = MockInstant.plusNanos(instant3, (-1697L));
      Date.from(instant4);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 22, (-991), 12, 22, 22);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockDate0.after(date0);
      MockDate.UTC((-812), (-1024), 1343, 3074, (-3067), 4);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      millisecond0.next();
      millisecond0.getSecond();
      millisecond0.getSecond();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(1480, 1480, 1480, (-1713), 120, (-1713), (-1713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(453, 453, 453);
      MockDate mockDate1 = new MockDate();
      mockDate0.before(mockDate1);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      millisecond0.hashCode();
      millisecond0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(453, 0, 999, (-1173), 453, 334);
      millisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      millisecond0.getMillisecond();
      millisecond0.previous();
      millisecond0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      millisecond0.previous();
      millisecond0.toString();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      millisecond0.getFirstMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 999, 0);
      mockGregorianCalendar0.setTime(date0);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      millisecond0.equals(regularTimePeriod0);
      millisecond0.getMillisecond();
      millisecond0.getSerialIndex();
      millisecond0.peg(mockGregorianCalendar0);
      Millisecond millisecond1 = new Millisecond(date0);
      millisecond0.compareTo(millisecond1);
      millisecond0.getMillisecond();
      millisecond1.getLastMillisecond();
      millisecond1.hashCode();
      millisecond1.next();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getRawOffset();
      Locale locale0 = Locale.CANADA;
      Millisecond millisecond0 = new Millisecond(date0, timeZone0, locale0);
      millisecond0.getFirstMillisecond();
      Minute minute0 = null;
      try {
        minute0 = new Minute(999, 17, 999, 17, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Millisecond millisecond0 = new Millisecond(date0, timeZone0, locale0);
      millisecond0.compareTo(date0);
      millisecond0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.equals("'ZZBeC&B,w$@Ns=<");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.next();
      millisecond0.getLastMillisecond();
      millisecond0.hashCode();
      millisecond0.previous();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      millisecond0.getLastMillisecond(calendar0);
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      millisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      millisecond0.getSecond();
      millisecond0.getLastMillisecond();
      millisecond0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1000L);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      Millisecond millisecond0 = new Millisecond(mockDate0, calendar0);
      MockDate.UTC(0, 999, 1133, 0, 13, 1133);
      millisecond0.getMiddleMillisecond();
      millisecond0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.previous();
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(999);
      Date date0 = spreadsheetDate0.toDate();
      mockGregorianCalendar0.setTime(date0);
      mockGregorianCalendar0.after((Object) null);
      millisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      millisecond0.previous();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Second second0 = mock(Second.class, new ViolatedAssumptionAnswer());
      doReturn((Minute) null).when(second0).getMinute();
      doReturn(0).when(second0).getSecond();
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(0, second0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Millisecond", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      timeZone0.setRawOffset(0);
      Locale locale0 = Locale.forLanguageTag("");
      locale0.getDisplayCountry();
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0, locale0);
      millisecond0.getFirstMillisecond();
      millisecond0.compareTo(timeZone0);
      millisecond0.hashCode();
      millisecond0.next();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-286L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(762);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0, locale0);
      millisecond0.previous();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      Millisecond millisecond0 = new Millisecond(date0);
      millisecond0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate((-1536L));
      mockDate0.after(mockDate1);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      millisecond0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.hashCode();
      millisecond0.getMillisecond();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1800, 1800, 2141);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Second second0 = new Second(mockDate0, mockGregorianCalendar0);
      Millisecond millisecond0 = new Millisecond(1800, second0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond((-1053), (Second) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'second' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), 1808, 1808, 1808);
      Locale locale0 = new Locale("AR2xW'RSfG0nGA", " to ", "AR2xW'RSfG0nGA");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Second second0 = new Second(mockDate0, calendar0);
      Date date0 = second0.getStart();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(date0);
      millisecond0.getMiddleMillisecond(calendar0);
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      millisecond0.getSerialIndex();
      System.setCurrentTimeMillis(0);
      millisecond0.compareTo(second0);
      millisecond0.getSecond();
      millisecond0.previous();
      millisecond0.equals(calendar1);
      System.setCurrentTimeMillis(653L);
      millisecond0.getSecond();
      millisecond0.getSerialIndex();
      millisecond0.equals(" to ");
      MockDate mockDate1 = new MockDate((-1), 1305, 320, 11, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate1);
      millisecond0.compareTo(fixedMillisecond0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Date date0 = millisecond0.getEnd();
      RegularTimePeriod regularTimePeriod0 = millisecond0.previous();
      millisecond0.toString();
      RegularTimePeriod regularTimePeriod1 = millisecond0.next();
      millisecond0.getFirstMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 999, 0);
      mockGregorianCalendar0.setTime(date0);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      millisecond0.equals(regularTimePeriod1);
      millisecond0.getMillisecond();
      millisecond0.getSerialIndex();
      millisecond0.peg(mockGregorianCalendar0);
      Millisecond millisecond1 = new Millisecond(date0);
      millisecond0.compareTo(millisecond1);
      millisecond0.getMillisecond();
      millisecond1.getLastMillisecond();
      millisecond1.next();
      millisecond1.hashCode();
      millisecond1.next();
      regularTimePeriod1.getLastMillisecond((Calendar) mockGregorianCalendar0);
      ((Millisecond) regularTimePeriod0).compareTo("Fri Feb 14 20:21:21 GMT 2014");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1092;
      int int1 = 2040;
      int int2 = 184;
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(1600, (-59), 1195, 1092, 1092, 2040, 184);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Locale locale0 = Locale.GERMAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      millisecond0.peg(calendar0);
      millisecond0.hashCode();
      locale0.getScript();
      millisecond0.hashCode();
      millisecond0.previous();
      millisecond0.getSerialIndex();
      millisecond0.compareTo(calendar0);
      Second second0 = new Second();
      second0.next();
      second0.toString();
      millisecond0.compareTo(second0);
      millisecond0.hashCode();
      millisecond0.getSecond();
      millisecond0.getFirstMillisecond(calendar0);
      millisecond0.getSerialIndex();
      millisecond0.getSerialIndex();
      millisecond0.getMillisecond();
      Object object0 = new Object();
      millisecond0.equals(object0);
      millisecond0.getFirstMillisecond(calendar0);
      System.setCurrentTimeMillis(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2219, 2219);
      assertNotNull(mockGregorianCalendar0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0, mockGregorianCalendar0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1072, "Swoh", 1072, 0, (-2290), 0, 624, (-1806), (-1985), 242, 242);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 624
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Second second0 = millisecond0.getSecond();
      assertNotNull(second0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      MockDate mockDate0 = new MockDate(1284, 1284, 0, 5, 1506, 59);
      assertNotNull(mockDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Mon Jan 01 06:06:59 GMT 3291", mockDate0.toString());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(41686812419000L, year0.getFirstMillisecond());
      assertEquals(41686812419000L, year0.getLastMillisecond());
      assertEquals("3290", year0.toString());
      assertEquals(3290L, year0.getSerialIndex());
      assertEquals(3290, year0.getYear());
      
      int int0 = millisecond0.compareTo(year0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Mon Jan 01 06:06:59 GMT 3291", mockDate0.toString());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(41686812419000L, year0.getFirstMillisecond());
      assertEquals(41686812419000L, year0.getLastMillisecond());
      assertEquals("3290", year0.toString());
      assertEquals(3290L, year0.getSerialIndex());
      assertEquals(3290, year0.getYear());
      assertEquals((-1), int0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "U<B%3]oqt}Koorx", (-918), 1506, 728, 0, (-3964), 2508, 1827, (-3964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -918
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Date date0 = millisecond0.getEnd();
      assertNotNull(date0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.previous();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(319L, millisecond1.getMillisecond());
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      String string0 = millisecond0.toString();
      assertNotNull(string0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      
      Millisecond millisecond2 = (Millisecond)millisecond0.next();
      assertNotNull(millisecond2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(321L, millisecond2.getMillisecond());
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond2, millisecond1);
      assertNotSame(millisecond2, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      
      long long0 = millisecond0.getFirstMillisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, long0);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 999, 0);
      assertNotNull(mockGregorianCalendar0);
      
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=999,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      boolean boolean0 = millisecond0.equals(millisecond2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(321L, millisecond2.getMillisecond());
      assertFalse(boolean0);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond2, millisecond1);
      assertNotSame(millisecond2, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      
      long long1 = millisecond0.getSerialIndex();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, long1);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(long1 == long0);
      
      millisecond0.peg(mockGregorianCalendar0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      
      Millisecond millisecond3 = new Millisecond(date0);
      assertNotNull(millisecond3);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(320L, millisecond3.getMillisecond());
      assertEquals(1392409281320L, millisecond3.getLastMillisecond());
      assertEquals(1392409281320L, millisecond3.getFirstMillisecond());
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond3.equals((Object)millisecond1));
      assertTrue(millisecond3.equals((Object)millisecond0));
      assertFalse(millisecond3.equals((Object)millisecond2));
      
      int int0 = millisecond0.compareTo(millisecond3);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(320L, millisecond3.getMillisecond());
      assertEquals(1392409281320L, millisecond3.getLastMillisecond());
      assertEquals(1392409281320L, millisecond3.getFirstMillisecond());
      assertEquals((-1), int0);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond3);
      assertNotSame(millisecond3, millisecond1);
      assertNotSame(millisecond3, millisecond2);
      assertNotSame(millisecond3, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertTrue(millisecond0.equals((Object)millisecond3));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond3.equals((Object)millisecond1));
      assertTrue(millisecond3.equals((Object)millisecond0));
      assertFalse(millisecond3.equals((Object)millisecond2));
      
      long long2 = millisecond0.getMillisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals(320L, long2);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond3);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertTrue(millisecond0.equals((Object)millisecond3));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = millisecond3.getLastMillisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(320L, millisecond3.getMillisecond());
      assertEquals(1392409281320L, millisecond3.getLastMillisecond());
      assertEquals(1392409281320L, millisecond3.getFirstMillisecond());
      assertEquals(1392409281320L, long3);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond3);
      assertNotSame(millisecond3, millisecond1);
      assertNotSame(millisecond3, millisecond2);
      assertNotSame(millisecond3, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertTrue(millisecond0.equals((Object)millisecond3));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond3.equals((Object)millisecond1));
      assertTrue(millisecond3.equals((Object)millisecond0));
      assertFalse(millisecond3.equals((Object)millisecond2));
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      int int1 = millisecond3.hashCode();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(320L, millisecond3.getMillisecond());
      assertEquals(1392409281320L, millisecond3.getLastMillisecond());
      assertEquals(1392409281320L, millisecond3.getFirstMillisecond());
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond3);
      assertNotSame(millisecond3, millisecond1);
      assertNotSame(millisecond3, millisecond2);
      assertNotSame(millisecond3, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertTrue(millisecond0.equals((Object)millisecond3));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond3.equals((Object)millisecond1));
      assertTrue(millisecond3.equals((Object)millisecond0));
      assertFalse(millisecond3.equals((Object)millisecond2));
      assertFalse(int1 == int0);
      
      Millisecond millisecond4 = (Millisecond)millisecond3.next();
      assertNotNull(millisecond4);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(321L, millisecond4.getMillisecond());
      assertEquals(1392409281320L, millisecond4.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond4.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(320L, millisecond3.getMillisecond());
      assertEquals(1392409281320L, millisecond3.getLastMillisecond());
      assertEquals(1392409281320L, millisecond3.getFirstMillisecond());
      assertNotSame(millisecond4, millisecond3);
      assertNotSame(millisecond4, millisecond0);
      assertNotSame(millisecond4, millisecond2);
      assertNotSame(millisecond4, millisecond1);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond4);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond3);
      assertNotSame(millisecond3, millisecond1);
      assertNotSame(millisecond3, millisecond2);
      assertNotSame(millisecond3, millisecond0);
      assertNotSame(millisecond3, millisecond4);
      assertFalse(millisecond4.equals((Object)millisecond3));
      assertFalse(millisecond4.equals((Object)millisecond0));
      assertFalse(millisecond4.equals((Object)millisecond1));
      assertTrue(millisecond4.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertTrue(millisecond0.equals((Object)millisecond3));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond3.equals((Object)millisecond1));
      assertTrue(millisecond3.equals((Object)millisecond0));
      assertFalse(millisecond3.equals((Object)millisecond2));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 999, 0, 999, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockGregorianCalendar0.isLeapYear(11);
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(date0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }
}
