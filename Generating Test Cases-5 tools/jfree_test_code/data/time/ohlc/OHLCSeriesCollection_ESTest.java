/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:48:27 GMT 2023
 */

package org.jfree.data.time.ohlc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.ohlc.OHLCSeries;
import org.jfree.data.time.ohlc.OHLCSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OHLCSeriesCollection_ESTest extends OHLCSeriesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = (-1375);
      int int1 = 1299;
      int int2 = (-1734);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.removeSeries((OHLCSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      OHLCSeriesCollection oHLCSeriesCollection1 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection1);
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      
      boolean boolean0 = oHLCSeriesCollection0.equals(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertTrue(oHLCSeriesCollection0.equals((Object)oHLCSeriesCollection1));
      assertTrue(boolean0);
      assertNotSame(oHLCSeriesCollection0, oHLCSeriesCollection1);
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getSeriesKey((-1603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      OHLCSeriesCollection oHLCSeriesCollection1 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection1);
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((-79L)).when(regularTimePeriod0).getMiddleMillisecond();
      long long0 = oHLCSeriesCollection1.getX(regularTimePeriod0);
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertEquals((-79L), long0);
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = oHLCSeriesCollection1.getXPosition();
      assertNotNull(timePeriodAnchor0);
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
      
      oHLCSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertTrue(oHLCSeriesCollection0.equals((Object)oHLCSeriesCollection1));
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertNotSame(oHLCSeriesCollection0, oHLCSeriesCollection1);
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
      
      int int0 = 53;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getCloseValue((-1057), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = 0;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(5L).when(regularTimePeriod0).getMiddleMillisecond();
      long long0 = oHLCSeriesCollection0.getX(regularTimePeriod0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(5L, long0);
      
      int int1 = 2574;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getYValue(0, 2574);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-2726);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getX((-2726), (-737));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      int int0 = 551;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getLow((-1116), 551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-3534);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getClose((-3534), (-3534));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      Number number0 = oHLCSeriesCollection0.getVolume(2315, 2315);
      assertNull(number0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-2959);
      oHLCSeriesCollection0.validateObject();
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.addSeries((OHLCSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.addSeries((OHLCSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-216);
      int int1 = (-2755);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getLowValue((-216), (-216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-1093);
      oHLCSeriesCollection0.validateObject();
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getOpenValue((-1093), (-5480));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getLowValue(0, (-2198));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = oHLCSeriesCollection0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      oHLCSeriesCollection0.setGroup(datasetGroup0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getOpen(0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getLow(0, (-2703));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getMiddleMillisecond();
      long long0 = oHLCSeriesCollection0.getX(regularTimePeriod0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals(0L, long0);
      
      int int0 = (-3947);
      oHLCSeriesCollection0.setNotify(false);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertFalse(oHLCSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getHigh((-3947), (-3947));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      oHLCSeriesCollection0.removeAllSeries();
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = 509;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getXValue(509, 509);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 509, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getLow(137, 137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 137, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getXValue((-3104), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = 31;
      boolean boolean0 = oHLCSeriesCollection0.equals("");
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.removeSeries(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      OHLCSeriesCollection oHLCSeriesCollection1 = (OHLCSeriesCollection)oHLCSeriesCollection0.clone();
      assertNotNull(oHLCSeriesCollection1);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertNotSame(oHLCSeriesCollection0, oHLCSeriesCollection1);
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
      
      boolean boolean0 = oHLCSeriesCollection0.equals(oHLCSeriesCollection1);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertTrue(oHLCSeriesCollection0.equals((Object)oHLCSeriesCollection1));
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertTrue(boolean0);
      assertNotSame(oHLCSeriesCollection0, oHLCSeriesCollection1);
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-3791);
      boolean boolean0 = false;
      oHLCSeriesCollection0.setNotify(false);
      assertFalse(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int1 = 1190;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getHighValue((-3791), 1190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = 3;
      int int1 = 757;
      int int2 = 0;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getX(757, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 757, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = 47;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getCloseValue(47, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = 2560;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getOpenValue(2560, 2560);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2560, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getX(137, 137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 137, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getClose(158, 158);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 158, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getX((RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getSeries(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = oHLCSeriesCollection0.getSeriesCount();
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = 1080;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getHighValue(1080, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1080, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getHigh(11, (-2712));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      oHLCSeriesCollection0.removeAllSeries();
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getSeriesKey((-396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = 2048;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getY(0, 2048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      OHLCSeriesCollection oHLCSeriesCollection1 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection1);
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      oHLCSeriesCollection1.removeChangeListener(datasetChangeListener0);
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection1.getSeries((-1021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      oHLCSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      int int0 = (-3960);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getCloseValue((-3960), (-3960));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      oHLCSeriesCollection0.hashCode();
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      oHLCSeriesCollection0.removeAllSeries();
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      double double0 = oHLCSeriesCollection0.getVolumeValue(0, 0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getClose(0, (-1692));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getY((-2852), (-2852));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getCloseValue((-188), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      OHLCSeriesCollection oHLCSeriesCollection1 = (OHLCSeriesCollection)oHLCSeriesCollection0.clone();
      assertNotNull(oHLCSeriesCollection1);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertTrue(oHLCSeriesCollection1.getNotify());
      assertEquals(0, oHLCSeriesCollection1.getSeriesCount());
      assertTrue(oHLCSeriesCollection1.equals((Object)oHLCSeriesCollection0));
      assertNotSame(oHLCSeriesCollection0, oHLCSeriesCollection1);
      assertNotSame(oHLCSeriesCollection1, oHLCSeriesCollection0);
      
      int int0 = (-868);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getOpen((-868), (-868));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      assertTrue(oHLCSeriesCollection0.getNotify());
      
      int int0 = 0;
      int int1 = 0;
      int int2 = 187;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getItemCount((-871));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      assertNotNull(oHLCSeriesCollection0);
      assertTrue(oHLCSeriesCollection0.getNotify());
      assertEquals(0, oHLCSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.removeSeries(717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getItemCount(2134);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      oHLCSeriesCollection0.equals("x,j5xcU&oYW=E-[");
      oHLCSeriesCollection0.clone();
      int int0 = 259;
      int int1 = (-2959);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getY(259, (-2959));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 259, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      Object object0 = oHLCSeriesCollection0.clone();
      oHLCSeriesCollection0.validateObject();
      oHLCSeriesCollection0.equals(object0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getSeries(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      int int0 = (-1375);
      int int1 = 1299;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getOpen((-1375), 1299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      oHLCSeriesCollection0.removeAllSeries();
      oHLCSeriesCollection0.getVolumeValue(0, 0);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getClose(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      oHLCSeriesCollection0.removeAllSeries();
      TimePeriodAnchor timePeriodAnchor0 = oHLCSeriesCollection0.getXPosition();
      oHLCSeriesCollection0.setXPosition(timePeriodAnchor0);
      int int0 = (-417);
      oHLCSeriesCollection0.setXPosition(timePeriodAnchor0);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      oHLCSeriesCollection0.seriesChanged(seriesChangeEvent0);
      int int1 = (-122);
      DatasetGroup datasetGroup0 = oHLCSeriesCollection0.getGroup();
      oHLCSeriesCollection0.setGroup(datasetGroup0);
      oHLCSeriesCollection0.getVolume((-346), (-122));
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getItemCount((-346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      int int0 = 45;
      int int1 = 2;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getLow(45, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getItemCount(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      int int0 = (-1451);
      TimePeriodAnchor timePeriodAnchor0 = oHLCSeriesCollection0.getXPosition();
      oHLCSeriesCollection0.setXPosition(timePeriodAnchor0);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getHigh((-1451), (-1451));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getMiddleMillisecond();
      oHLCSeriesCollection0.getX(regularTimePeriod0);
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.removeSeries(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getMiddleMillisecond();
      oHLCSeriesCollection0.getX(regularTimePeriod0);
      oHLCSeriesCollection0.hashCode();
      TimePeriodAnchor timePeriodAnchor0 = oHLCSeriesCollection0.getXPosition();
      oHLCSeriesCollection0.setXPosition(timePeriodAnchor0);
      Object object0 = oHLCSeriesCollection0.clone();
      assertNotSame(object0, oHLCSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.time.ohlc.OHLCSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OHLCSeriesCollection oHLCSeriesCollection0 = new OHLCSeriesCollection();
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        oHLCSeriesCollection0.getX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
