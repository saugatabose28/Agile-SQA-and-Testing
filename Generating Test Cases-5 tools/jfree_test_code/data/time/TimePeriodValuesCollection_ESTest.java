/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:50:09 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValuesCollection_ESTest extends TimePeriodValuesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(date0).when(timePeriod0).getStart();
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      doReturn(timePeriod0).when(timePeriodValue0).getPeriod();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(timePeriodValue0).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = timePeriodValuesCollection0.getStartX(0, (-496));
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0L, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      int int0 = 2099;
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(2099).when(timePeriodValues0).getItemCount();
      doReturn(2099).when(timePeriodValues0).getMaxEndIndex();
      doReturn((-751)).when(timePeriodValues0).getMinMiddleIndex();
      doReturn(635).when(timePeriodValues0).getMinStartIndex();
      doReturn(timePeriod0, timePeriod0, (TimePeriod) null).when(timePeriodValues0).getTimePeriod(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      int int0 = 2099;
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(timePeriod0).getStart();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(2099).when(timePeriodValues0).getItemCount();
      doReturn(2099).when(timePeriodValues0).getMaxEndIndex();
      doReturn(2682).when(timePeriodValues0).getMinStartIndex();
      doReturn(timePeriod0, timePeriod0).when(timePeriodValues0).getTimePeriod(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getDomainUpperBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean0 = timePeriodValuesCollection0.equals(timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      int int0 = 0;
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeries(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection1.getXPosition();
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodAnchor0);
      
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timePeriodValues0).getItemCount();
      timePeriodValuesCollection0.addSeries(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertFalse(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertFalse(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertFalse(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertFalse(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.setXPosition((TimePeriodAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(timePeriodValue0).getValue();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn("").when(timePeriodValues0).toString();
      doReturn(comparable0).when(timePeriodValues0).getKey();
      doReturn(timePeriodValue0, (TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      Comparable comparable1 = timePeriodValuesCollection0.getSeriesKey(0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(comparable1);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      double double0 = timePeriodValuesCollection0.getEndYValue(0, 0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(timePeriodValues0).getItemCount();
      doReturn(0).when(timePeriodValues0).getMaxEndIndex();
      doReturn(0).when(timePeriodValues0).getMinMiddleIndex();
      doReturn(0).when(timePeriodValues0).getMinStartIndex();
      doReturn((TimePeriod) null, (TimePeriod) null, (TimePeriod) null).when(timePeriodValues0).getTimePeriod(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getDomainLowerBound(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(933).when(timePeriodValues0).getItemCount();
      doReturn(0).when(timePeriodValues0).getMaxEndIndex();
      doReturn(0).when(timePeriodValues0).getMinStartIndex();
      doReturn((TimePeriod) null, (TimePeriod) null).when(timePeriodValues0).getTimePeriod(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getDomainBounds(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriod) null).when(timePeriodValue0).getPeriod();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn("", "J0HfM07GF5Yl").when(timePeriodValues0).toString();
      doReturn("").when(timePeriodValues0).getKey();
      doReturn(timePeriodValue0).when(timePeriodValues0).getDataItem(anyInt());
      doReturn((-4016)).when(timePeriodValues0).getItemCount();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      int int1 = timePeriodValuesCollection0.getItemCount(0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertFalse(int1 == int0);
      assertEquals((-4016), int1);
      
      Comparable comparable0 = timePeriodValuesCollection0.getSeriesKey(0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("", comparable0);
      assertNotNull(comparable0);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((-2764), (-2764)).when(timePeriodValues0).getItemCount();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = timePeriodValuesCollection0.equals("e8yv#dwl5!u=.@");
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX((-2764), (-2764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(timePeriodValue0).getValue();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(timePeriodValue0, (TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = timePeriodValuesCollection0.getY(0, 0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = (-1818);
      int int1 = (-2693);
      int int2 = 0;
      TimePeriodValues timePeriodValues1 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.addSeries(timePeriodValues1);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(2, timePeriodValuesCollection0.getSeriesCount());
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndXValue(0, (-2693));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(timePeriodValues0).toString();
      doReturn((Comparable) null).when(timePeriodValues0).getKey();
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      doReturn(0).when(timePeriodValues0).getItemCount();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      int int1 = timePeriodValuesCollection0.getItemCount(0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Comparable comparable0 = timePeriodValuesCollection0.getSeriesKey(0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(comparable0);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      boolean boolean0 = timePeriodValuesCollection0.equals(timePeriodAnchor0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertFalse(boolean0);
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      TimePeriodValues timePeriodValues1 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.addSeries(timePeriodValues1);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(2, timePeriodValuesCollection0.getSeriesCount());
      
      int int0 = timePeriodValuesCollection0.getSeriesCount();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(2, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(2, int0);
      
      TimePeriodValues timePeriodValues2 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.removeSeries(timePeriodValues2);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(2, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriodValues0).toString();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = (TimePeriodValuesCollection)timePeriodValuesCollection0.clone();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(1, timePeriodValuesCollection1.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      timePeriodValuesCollection0.setNotify(false);
      assertFalse(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      
      TimePeriodValues timePeriodValues1 = timePeriodValuesCollection0.getSeries(0);
      assertFalse(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDomainDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertFalse(timePeriodValues1.getNotify());
      assertNull(timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertNotNull(timePeriodValues1);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getYValue((-1237), (-1237));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      doReturn(0).when(timePeriodValues0).getItemCount();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      int int0 = 0;
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getXValue(0, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertFalse(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      timePeriodValuesCollection1.validateObject();
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertFalse(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      
      boolean boolean0 = timePeriodValuesCollection0.equals(timePeriodValuesCollection1);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertFalse(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertFalse(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertFalse(boolean0);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeriesKey(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      timePeriodValuesCollection0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getY(0, (-2966));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriodValues0).toString();
      doReturn((Comparable) null).when(timePeriodValues0).getKey();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      Comparable comparable0 = timePeriodValuesCollection0.getSeriesKey(0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValues timePeriodValues1 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.addSeries((TimePeriodValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNull(range0);
      
      boolean boolean0 = timePeriodValuesCollection0.equals("");
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertFalse(boolean0);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      int int0 = 3797;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getItemCount(3797);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriodValues0).toString();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = (TimePeriodValuesCollection)timePeriodValuesCollection0.clone();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(1, timePeriodValuesCollection1.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      int int0 = 0;
      timePeriodValuesCollection0.removeSeries(0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      
      TimePeriodValues timePeriodValues1 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues1).getDataItem(anyInt());
      timePeriodValuesCollection0.addSeries(timePeriodValues1);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      
      int int1 = 1905;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getYValue(0, (-4066));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = (TimePeriodValuesCollection)timePeriodValuesCollection0.clone();
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      int int0 = (-1635);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getY((-1635), (-1635));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(250, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 250, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = (TimePeriodValuesCollection)timePeriodValuesCollection0.clone();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      boolean boolean0 = timePeriodValuesCollection0.equals(timePeriodValuesCollection1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertTrue(boolean0);
      
      int int0 = (-1171);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX(0, (-1371));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX((-3304), (-3304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      int int1 = (-19);
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      timePeriodValuesCollection0.addSeries(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX(0, (-19));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getY(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriodValue) null).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX(0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timePeriodValues0).getItemCount();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      int int0 = (-42);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndY((-42), (-42));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      boolean boolean0 = true;
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.removeSeries(timePeriodValues0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      timePeriodValuesCollection0.validateObject();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      double double0 = timePeriodValuesCollection0.getDomainLowerBound(true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = (-1412);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.removeSeries((-1412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      int int0 = timePeriodValuesCollection0.getSeriesCount();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, int0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.addChangeListener(datasetChangeListener0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = (-2905);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX((-2905), (-2905));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.removeSeries(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.removeSeries((TimePeriodValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = (-172);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY((-1976), (-172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValues timePeriodValues1 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.addSeries(timePeriodValues1);
      assertEquals(2, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = (TimePeriodValuesCollection)timePeriodValuesCollection0.clone();
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(1, timePeriodValuesCollection1.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      int int0 = 4451;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndY(4451, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4451, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = (-1296);
      DatasetGroup datasetGroup0 = timePeriodValuesCollection0.getGroup();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      timePeriodValuesCollection0.setGroup(datasetGroup0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX((-1296), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      timePeriodValuesCollection0.validateObject();
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getItemCount(134);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(2976, 2976);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2976, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX(0, 874);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = (-1653);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeries((-1653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = (-878);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndYValue((-878), (-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getY(0, (-2270));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timePeriodValues0).getItemCount();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      boolean boolean0 = false;
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeries(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX(5, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      TimePeriod timePeriod0 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      TimePeriod timePeriod1 = mock(TimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(timePeriod1).getStart();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(142).when(timePeriodValues0).getItemCount();
      doReturn(142).when(timePeriodValues0).getMaxEndIndex();
      doReturn(321).when(timePeriodValues0).getMinMiddleIndex();
      doReturn(1814).when(timePeriodValues0).getMinStartIndex();
      doReturn(timePeriod0, timePeriod1, timePeriod1).when(timePeriodValues0).getTimePeriod(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      int int0 = 1;
      DatasetGroup datasetGroup0 = timePeriodValuesCollection0.getGroup();
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      timePeriodValuesCollection0.setGroup(datasetGroup0);
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      double double0 = timePeriodValuesCollection0.getDomainUpperBound(false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = timePeriodValuesCollection0.getDomainUpperBound(true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.addSeries((TimePeriodValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection1.getXPosition();
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodAnchor0);
      
      timePeriodValuesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertTrue(timePeriodValuesCollection1.getNotify());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      
      double double0 = timePeriodValuesCollection0.getDomainLowerBound(false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertTrue(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      assertEquals(Double.NaN, double0, 0.01);
      
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.addSeries(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertFalse(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX((-1824), (-599));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean0 = timePeriodValuesCollection0.equals((Object) null);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertFalse(boolean0);
      
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn("XX").when(timePeriodValues0).toString();
      doReturn("XX").when(timePeriodValues0).getKey();
      timePeriodValuesCollection0.addSeries(timePeriodValues0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      
      Comparable comparable0 = timePeriodValuesCollection0.getSeriesKey(0);
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValuesCollection0.getNotify());
      assertEquals("XX", comparable0);
      assertNotNull(comparable0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getSeriesKey((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.seriesChanged(seriesChangeEvent0);
      boolean boolean0 = false;
      timePeriodValuesCollection0.getDomainLowerBound(false);
      int int0 = (-1130);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(914, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 914, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      int int0 = (-878);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndYValue((-878), (-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      Object object0 = timePeriodValuesCollection0.clone();
      timePeriodValuesCollection0.equals(object0);
      int int0 = 311;
      int int1 = 0;
      int int2 = 0;
      timePeriodValuesCollection0.getDomainUpperBound(true);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX(0, 311);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      doReturn((TimePeriod) null).when(timePeriodValue0).getPeriod();
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(timePeriodValue0).when(timePeriodValues0).getDataItem(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartX(0, (-496));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      timePeriodValuesCollection0.removeChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getX(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timePeriodValues0).toString();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      int int0 = 0;
      timePeriodValuesCollection0.removeSeries(0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = mock(TimePeriodValue.class, new ViolatedAssumptionAnswer());
      int int0 = 2099;
      TimePeriodValues timePeriodValues0 = mock(TimePeriodValues.class, new ViolatedAssumptionAnswer());
      doReturn(2099).when(timePeriodValues0).getItemCount();
      doReturn(0).when(timePeriodValues0).getMaxEndIndex();
      doReturn(0).when(timePeriodValues0).getMinMiddleIndex();
      doReturn(0).when(timePeriodValues0).getMinStartIndex();
      doReturn((TimePeriod) null, (TimePeriod) null, (TimePeriod) null).when(timePeriodValues0).getTimePeriod(anyInt());
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }
}
