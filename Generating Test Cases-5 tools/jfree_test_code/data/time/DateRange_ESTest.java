/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:27:26 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.Range;
import org.jfree.data.time.DateRange;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateRange_ESTest extends DateRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateRange dateRange0 = new DateRange((-581.26096846935), (-581.26096846935));
      long long0 = dateRange0.getUpperMillis();
      assertEquals((-581L), long0);
      assertEquals((-581L), dateRange0.getLowerMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      Date date0 = dateRange0.getUpperDate();
      DateRange dateRange1 = new DateRange(date0, date0);
      long long0 = dateRange1.getLowerMillis();
      assertEquals(1L, long0);
      assertEquals(0L, dateRange0.getLowerMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1687L), (-707L), (-14L), 1789L).when(date0).getTime();
      DateRange dateRange0 = new DateRange(date0, date0);
      long long0 = dateRange0.getLowerMillis();
      assertEquals((-14L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-595L));
      // Undeclared exception!
      try { 
        range0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1687L), (-707L), (-14L), 1789L).when(date0).getTime();
      DateRange dateRange0 = new DateRange(date0, date0);
      Range range0 = Range.shift((Range) dateRange0, 0.0);
      // Undeclared exception!
      try { 
        ((DateRange) range0).getUpperMillis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, (-1641L)).when(date0).getTime();
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1641.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(622.8936907625, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (622.8936907625) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateRange dateRange0 = new DateRange(0.0, 0.0);
      long long0 = dateRange0.getUpperMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1687L), (-707L), (-14L), 1789L).when(date0).getTime();
      DateRange dateRange0 = new DateRange(date0, date0);
      Date date1 = dateRange0.getLowerDate();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      long long0 = dateRange0.getLowerMillis();
      assertEquals(0L, long0);
      assertEquals(1L, dateRange0.getUpperMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      DateRange dateRange1 = new DateRange(dateRange0);
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange1.getLowerMillis());
      assertEquals(1L, dateRange1.getUpperMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      long long0 = dateRange0.getUpperMillis();
      assertEquals(1L, long0);
      assertEquals(0L, dateRange0.getLowerMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1687L), (-707L), (-14L), 1789L).when(date0).getTime();
      DateRange dateRange0 = new DateRange(date0, date0);
      String string0 = dateRange0.toString();
      assertEquals("[Dec 31, 1969 11:59:59 PM --> Jan 1, 1970 12:00:01 AM]", string0);
  }
}
