/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:28:38 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedMillisecond_ESTest extends FixedMillisecond_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-823L));
      fixedMillisecond0.next();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.hashCode();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3358, (-1), 3358);
      fixedMillisecond0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond((-823L));
      fixedMillisecond0.equals(fixedMillisecond1);
      TimePeriodAnchor timePeriodAnchor0 = null;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, (String) null, (-994), (-994), (-994), (-1), (-1), 243, 243, 277);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      fixedMillisecond0.next();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      fixedMillisecond0.getEnd();
      fixedMillisecond0.previous();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.previous();
      fixedMillisecond0.toString();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.hashCode();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2902), "", (-2902), (-2902), 0, 2618, 0, (-3062), (-2902), (-3062), (-3062), (-3062), (-3062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2902
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      fixedMillisecond0.next();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, calendar0);
      fixedMillisecond0.toString();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      fixedMillisecond0.getFirstMillisecond(calendar0);
      fixedMillisecond0.getLastMillisecond();
      fixedMillisecond0.next();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      fixedMillisecond0.compareTo(calendar0);
      Object object0 = new Object();
      fixedMillisecond0.equals(object0);
      fixedMillisecond0.peg(calendar0);
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.getTime();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.getLastMillisecond();
      fixedMillisecond0.getMiddleMillisecond(calendar0);
      fixedMillisecond0.getLastMillisecond(calendar0);
      fixedMillisecond0.getFirstMillisecond(calendar0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.previous();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getFirstMillisecond(calendar0);
      regularTimePeriod0.previous();
      fixedMillisecond0.compareTo(regularTimePeriod1);
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.equals(regularTimePeriod0);
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.next();
      fixedMillisecond0.previous();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      Locale locale0 = new Locale("BG9t+(k4{lSzN/O");
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayLanguage(locale1);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, calendar0);
      fixedMillisecond0.next();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.previous();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.getTime();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      fixedMillisecond0.getLastMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setCalendarInstancePrototype(calendar1);
      locale0.getDisplayCountry(locale1);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      fixedMillisecond0.getTime();
      fixedMillisecond0.equals(regularTimePeriod0);
      fixedMillisecond0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      Object object0 = new Object();
      fixedMillisecond0.equals(object0);
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getFirstMillisecond(calendar0);
      fixedMillisecond0.getLastMillisecond(calendar1);
      fixedMillisecond0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      Calendar calendar1 = MockCalendar.getInstance();
      fixedMillisecond0.getFirstMillisecond(calendar1);
      fixedMillisecond0.peg(calendar1);
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getMiddleMillisecond(calendar1);
      fixedMillisecond0.hashCode();
      fixedMillisecond0.hashCode();
      fixedMillisecond0.previous();
      fixedMillisecond0.getLastMillisecond();
      fixedMillisecond0.getMiddleMillisecond();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1708), 1896, 0, 969, 1958);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      Locale locale0 = new Locale("rdGseG&c}QZYl>~");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(0, 1469, 0);
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      fixedMillisecond0.compareTo(mockDate0);
      fixedMillisecond0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      fixedMillisecond0.previous();
      fixedMillisecond0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.compareTo(regularTimePeriod0);
      fixedMillisecond0.peg(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, calendar0);
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.equals(timeZone0);
      fixedMillisecond0.getTime();
      fixedMillisecond0.getLastMillisecond(calendar0);
      fixedMillisecond0.getMiddleMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.equals((Object) null);
      fixedMillisecond0.getTime();
      fixedMillisecond0.compareTo((Object) null);
      fixedMillisecond0.previous();
      fixedMillisecond0.hashCode();
      fixedMillisecond0.peg((Calendar) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.hashCode();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.getFirstMillisecond((Calendar) null);
      fixedMillisecond0.compareTo((Object) null);
      fixedMillisecond0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getSerialIndex();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Day day0 = new Day();
      day0.getSerialIndex();
      fixedMillisecond0.equals(day0);
      fixedMillisecond0.getLastMillisecond();
      fixedMillisecond0.previous();
      fixedMillisecond0.hashCode();
      fixedMillisecond0.equals(day0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.previous();
      fixedMillisecond0.previous();
      fixedMillisecond0.getTime();
      fixedMillisecond0.next();
      fixedMillisecond0.getMiddleMillisecond();
      Calendar calendar0 = MockCalendar.getInstance();
      fixedMillisecond0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1158), 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeekYear();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.previous();
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      fixedMillisecond0.hashCode();
      fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.getTime();
      fixedMillisecond0.getTime();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4088L));
      RegularTimePeriod.getCalendarInstance();
      fixedMillisecond0.getTime();
      fixedMillisecond0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(16, 16, (-1), 16, 16, (-1));
      Day day0 = new Day(mockDate0);
      Date date0 = day0.getEnd();
      mockDate0.toInstant();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = null;
      try {
        fixedMillisecond0 = new FixedMillisecond((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.FixedMillisecond", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1704L));
      fixedMillisecond0.toString();
      fixedMillisecond0.hashCode();
      Date date0 = fixedMillisecond0.getEnd();
      fixedMillisecond0.getTime();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      fixedMillisecond0.getStart();
      RegularTimePeriod.getCalendarInstance();
      mockGregorianCalendar0.setLenient(true);
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.getLastMillisecond();
      fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.previous();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      mockGregorianCalendar1.getTimeZone();
      fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar1);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(date0);
      fixedMillisecond1.toString();
      fixedMillisecond0.compareTo(fixedMillisecond1);
      fixedMillisecond1.compareTo((Object) null);
      fixedMillisecond1.getFirstMillisecond();
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(1, 0, 1, 0, 1);
      fixedMillisecond1.getMiddleMillisecond((Calendar) mockGregorianCalendar2);
      fixedMillisecond0.hashCode();
      fixedMillisecond1.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Calendar calendar0 = MockCalendar.getInstance();
      fixedMillisecond0.getLastMillisecond(calendar0);
      fixedMillisecond0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      regularTimePeriod0.getStart();
      fixedMillisecond0.compareTo(regularTimePeriod0);
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getMiddleMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.getTime();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2849L);
      fixedMillisecond0.getMiddleMillisecond();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(200, "");
      Week week0 = new Week(date0, simpleTimeZone0, locale0);
      fixedMillisecond0.compareTo(week0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(322, 30, 30, 322, 2, (-497));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      fixedMillisecond0.compareTo(mockDate0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      fixedMillisecond0.peg(calendar0);
      fixedMillisecond0.getLastMillisecond(calendar0);
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.next();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-3877L));
      fixedMillisecond0.toString();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      fixedMillisecond0.compareTo(regularTimePeriod0);
      System.setCurrentTimeMillis((-3877L));
      fixedMillisecond0.getTime();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      fixedMillisecond0.getEnd();
      fixedMillisecond0.previous();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.previous();
      fixedMillisecond0.toString();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.toString();
      fixedMillisecond0.hashCode();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2902), "vfRC", (-2902), (-2902), 0, 2618, 0, (-3062), (-2902), (-3062), (-3062), (-3062), (-3062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2902
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-195L));
      Object object0 = new Object();
      fixedMillisecond0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      fixedMillisecond0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      fixedMillisecond0.compareTo((Object) null);
      List<Locale.LanguageRange> list0 = null;
      Charset charset0 = Charset.defaultCharset();
      String string0 = "|4-z839CR|y\\!l";
      fixedMillisecond0.equals(fixedMillisecond0);
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Day day0 = new Day();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.previous();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.getLastMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      regularTimePeriod0.getFirstMillisecond((Calendar) null);
      regularTimePeriod0.previous();
      fixedMillisecond0.compareTo(regularTimePeriod0);
      Locale locale0 = Locale.CHINESE;
      locale0.getScript();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fixedMillisecond0.getLastMillisecond(calendar0);
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.hashCode();
      fixedMillisecond0.hashCode();
      Object object0 = new Object();
      fixedMillisecond0.equals(object0);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      fixedMillisecond1.next();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      fixedMillisecond1.getMillisecond(timePeriodAnchor0, calendar0);
      fixedMillisecond0.compareTo(fixedMillisecond1);
      fixedMillisecond0.equals(object0);
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond1.getMiddleMillisecond();
      fixedMillisecond1.next();
      Date date0 = fixedMillisecond1.getTime();
      fixedMillisecond1.peg((Calendar) null);
      fixedMillisecond0.equals(date0);
      fixedMillisecond1.getFirstMillisecond();
      fixedMillisecond1.getMiddleMillisecond();
      fixedMillisecond0.getMiddleMillisecond();
      fixedMillisecond1.getSerialIndex();
      fixedMillisecond1.next();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-823L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      fixedMillisecond0.getFirstMillisecond();
      fixedMillisecond0.hashCode();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1370L);
      boolean boolean0 = fixedMillisecond0.equals(fixedMillisecond1);
      fixedMillisecond0.getLastMillisecond();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      Date date0 = fixedMillisecond1.getStart();
      fixedMillisecond1.hashCode();
      Date date1 = fixedMillisecond1.getTime();
      fixedMillisecond0.equals(calendar0);
      fixedMillisecond1.getTime();
      fixedMillisecond1.getSerialIndex();
      fixedMillisecond0.getSerialIndex();
      fixedMillisecond0.hashCode();
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
      assertEquals((-822L), regularTimePeriod1.getLastMillisecond());
      assertNotNull(regularTimePeriod1);
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      
      Month month0 = new Month(date1);
      boolean boolean1 = fixedMillisecond0.equals(month0);
      assertTrue(boolean1 == boolean0);
      
      Millisecond millisecond0 = new Millisecond(date0);
      int int0 = fixedMillisecond0.compareTo(millisecond0);
      assertEquals(0, int0);
      assertFalse(fixedMillisecond1.equals((Object)regularTimePeriod1));
      
      long long0 = fixedMillisecond0.getLastMillisecond();
      assertEquals((-823L), long0);
  }
}
