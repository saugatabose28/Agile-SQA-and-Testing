/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:49:08 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.MonthConstants;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Year_ESTest extends Year_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Year year0 = new Year(9999);
      year0.previous();
      year0.previous();
      year0.getLastMillisecond();
      year0.next();
      year0.toString();
      year0.next();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Year year0 = new Year();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-9999), 9999, (-9999), 4128, (-9999), (-1393));
      RegularTimePeriod.setCalendarInstancePrototype(mockGregorianCalendar0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      year0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      year0.toString();
      year0.toString();
      Year year1 = Year.parseYear("1970");
      year1.previous();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year(1537);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      RegularTimePeriod.getCalendarInstance();
      year0.equals(regularTimePeriod0);
      year0.toString();
      RegularTimePeriod regularTimePeriod1 = year0.next();
      Year.parseYear("1537");
      year0.next();
      regularTimePeriod1.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Year year0 = new Year(0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      year0.getMillisecond(timePeriodAnchor0, calendar0);
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      year0.getFirstMillisecond(calendar0);
      year0.previous();
      int int0 = MonthConstants.JANUARY;
      year0.getYear();
      year0.previous();
      year0.getYear();
      year0.next();
      year0.getFirstMillisecond(calendar1);
      year0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = new Month();
      month0.previous();
      Year year0 = month0.getYear();
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1362), 9999, 2094, 17);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      minute0.previous();
      year0.getFirstMillisecond(calendar1);
      Day day0 = minute0.getDay();
      day0.compareTo(month0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar1);
      year0.compareTo(day0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      year0.previous();
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      year0.getSerialIndex();
      year0.equals(regularTimePeriod0);
      year0.getFirstMillisecond();
      year0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Year year0 = new Year(0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      year0.getMillisecond(timePeriodAnchor0, calendar0);
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      year0.getFirstMillisecond(calendar0);
      year0.previous();
      year0.getYear();
      year0.getYear();
      year0.previous();
      year0.getYear();
      year0.next();
      year0.getFirstMillisecond(calendar1);
      year0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year((-1065));
      Date date0 = year0.getEnd();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      year0.next();
      year0.peg(calendar0);
      year0.previous();
      year0.getYear();
      year0.peg(calendar0);
      year0.getSerialIndex();
      year0.getLastMillisecond();
      year0.equals(date0);
      year0.getSerialIndex();
      year0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Year year0 = new Year();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        year0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2137, (-2492), 17, 2137, 0);
      mockGregorianCalendar0.clone();
      mockGregorianCalendar0.setTimeInMillis(0L);
      mockGregorianCalendar0.add((-9999), 0);
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Year.parseYear("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar.getAvailableCalendarTypes();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Locale locale0 = Locale.KOREAN;
      Year year0 = null;
      try {
        year0 = new Year(date0, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getEnd();
      day0.getMonth();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      Year year0 = new Year(date0, timeZone0, locale0);
      year0.hashCode();
      year0.previous();
      year0.next();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      year0.next();
      Date date1 = fixedMillisecond0.getTime();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(date1);
      year0.compareTo(fixedMillisecond1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      year0.peg(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Year.parseYear("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Year year0 = new Year((-2756));
      year0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Year year0 = null;
      try {
        year0 = new Year((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Year year0 = new Year(14);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1404), 14, (-9999), 0);
      year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getExtension('c');
      MockGregorianCalendar mockGregorianCalendar1 = null;
      try {
        mockGregorianCalendar1 = new MockGregorianCalendar((TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Year year0 = new Year(0);
      year0.getSerialIndex();
      year0.hashCode();
      year0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2199, 52, 2199);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      year0.getSerialIndex();
      // Undeclared exception!
      try { 
        year0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.set((-1108), (-1108), (-1108), 0, 0);
      Year year0 = new Year(date0, mockGregorianCalendar0);
      year0.toString();
      year0.next();
      year0.getSerialIndex();
      Year year1 = Year.parseYear("1582");
      year1.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-428), (-428), (-428), 120, 0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getDisplayVariant(locale1);
      MockDate.UTC(2459, 2459, 1450, (-3259), (-428), (-1272));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockDate0.getTime();
      mockGregorianCalendar0.setLenient(false);
      Year year0 = new Year(mockDate0, mockGregorianCalendar0);
      year0.toString();
      year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      year0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Year year0 = new Year((-1477));
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      year0.getStart();
      year0.getLastMillisecond(calendar0);
      year0.getFirstMillisecond(calendar0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      year0.equals(regularTimePeriod0);
      year0.getLastMillisecond(calendar0);
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        MockZonedDateTime.of(1119, 0, (-9999), 1119, 0, 0, 0, (ZoneId) zoneOffset0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Year.parseYear((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getTimeInMillis();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      RegularTimePeriod.setCalendarInstancePrototype(mockGregorianCalendar0);
      year0.getLastMillisecond();
      Second second0 = null;
      try {
        second0 = new Second(0, (-870), 9999, (-537), (-9999), (-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 781);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(781, 1920, (-1529));
      mockGregorianCalendar0.get(0);
      Year year0 = new Year(mockDate0, mockGregorianCalendar0);
      year0.next();
      year0.getEnd();
      Calendar.getAvailableCalendarTypes();
      year0.peg(mockGregorianCalendar0);
      year0.getMiddleMillisecond();
      year0.getYear();
      year0.getFirstMillisecond();
      Hour hour0 = new Hour();
      year0.equals(hour0);
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(213, 1045, 213, 0, 213, 0);
      Year year0 = new Year(mockDate0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Year year0 = new Year();
      year0.getFirstMillisecond();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      year0.getMiddleMillisecond(calendar0);
      year0.getYear();
      year0.toString();
      // Undeclared exception!
      try { 
        Year.parseYear("$Pz'O&jr3=LPDRn(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0, timeZone0, locale0);
      year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0, locale0);
      year0.hashCode();
      year0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      year0.next();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Year year0 = new Year();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, (-9999), 1495, (-9999), (-9999));
      mockGregorianCalendar0.clear();
      RegularTimePeriod.getCalendarInstance();
      mockGregorianCalendar0.before(year0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(1495);
      // Undeclared exception!
      try { 
        Year.parseYear("Mb>)c@P2!W>OdU,Sx]]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1709), (-1709), 722, 722, 8);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Date date0 = fixedMillisecond0.getTime();
      Calendar calendar0 = null;
      Year year0 = null;
      try {
        year0 = new Year(date0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Year year0 = new Year(21);
      year0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Year year0 = new Year(2379);
      year0.getLastMillisecond();
      year0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      year0.peg(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1603, 45, 0, 45, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      mockGregorianCalendar0.clone();
      Calendar.getAvailableCalendarTypes();
      year0.peg(mockGregorianCalendar0);
      Year year1 = new Year();
      mockGregorianCalendar0.clone();
      year0.compareTo(year1);
      year1.toString();
      year0.next();
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(date0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year();
      TimeZone timeZone0 = TimeZone.getTimeZone(";$.D");
      year0.next();
      Locale locale0 = Locale.US;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Date date0 = year0.getStart();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      RegularTimePeriod.getCalendarInstance();
      year0.getFirstMillisecond();
      year0.compareTo(";$.D");
      year0.equals(date0);
      year0.previous();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Year year0 = new Year();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-432L));
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      year0.getSerialIndex();
      Quarter quarter0 = new Quarter(date0);
      year0.equals(year0);
      System.setCurrentTimeMillis((-1268L));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-432L));
      Date date0 = Date.from(instant0);
      Year year0 = new Year(date0);
      year0.getSerialIndex();
      Quarter quarter0 = new Quarter(date0);
      Year year1 = quarter0.getYear();
      year0.equals(year1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Year year0 = new Year((-1477));
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      year0.getStart();
      year0.getLastMillisecond(calendar0);
      year0.getFirstMillisecond(calendar0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      year0.equals(regularTimePeriod0);
      year0.getLastMillisecond(calendar0);
      Locale locale0 = Locale.KOREA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        MockZonedDateTime.of(1119, 0, (-9999), 1119, 0, 0, 0, (ZoneId) zoneOffset0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("8uZB8w_>");
      Locale locale0 = new Locale("8uZB8w_>", "8uZB8w_>");
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      // Undeclared exception!
      try { 
        Year.parseYear("Year constructor: year (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 547, 584, 0, 14);
      Object object0 = mockDate0.clone();
      MockDate.UTC(584, (-2200), 14, (-9999), 0, 304);
      Year year0 = new Year(mockDate0);
      MockDate.UTC(547, (-9999), 0, (-9999), 60, 14);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      fixedMillisecond0.previous();
      RegularTimePeriod.getCalendarInstance();
      fixedMillisecond0.next();
      fixedMillisecond0.getTime();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
      fixedMillisecond0.toString();
      fixedMillisecond0.getTime();
      MockDate mockDate1 = (MockDate)fixedMillisecond1.getTime();
      boolean boolean0 = year0.equals(fixedMillisecond0);
      assertFalse(boolean0);
      
      year0.getSerialIndex();
      year0.getYear();
      year0.getFirstMillisecond();
      year0.getSerialIndex();
      year0.hashCode();
      year0.compareTo(object0);
      year0.getLastMillisecond();
      year0.getFirstMillisecond();
      int int0 = year0.compareTo(mockDate1);
      assertEquals(1, int0);
      
      Year year1 = (Year)year0.previous();
      assertEquals(1900, year1.getYear());
      
      year0.getSerialIndex();
      year0.next();
      Year year2 = (Year)year0.next();
      assertNotNull(year2);
      assertFalse(year2.equals((Object)year0));
  }
}
