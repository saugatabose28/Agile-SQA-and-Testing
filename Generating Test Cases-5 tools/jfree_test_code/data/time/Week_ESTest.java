/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:54:34 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Week_ESTest extends Week_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      week0.getEnd();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-1661));
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Locale locale0 = new Locale("", "", "");
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
      week0.peg(mockGregorianCalendar1);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(1700, 1, 1700, 7, 53, 543);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar2);
      week0.hashCode();
      week0.getYearValue();
      week0.equals(mockGregorianCalendar2);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar2);
      week0.getYear();
      week0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayName(locale1);
      Week week0 = new Week(mockDate0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      week0.getEnd();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.ENGLISH;
      locale0.getScript();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.setTimeInMillis(1);
      week0.getMiddleMillisecond();
      locale0.getDisplayCountry();
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      week0.toString();
      week0.getLastMillisecond(calendar0);
      week0.getYear();
      week0.peg(calendar0);
      week0.next();
      week0.getSerialIndex();
      week0.getWeek();
      week0.getLastMillisecond();
      week0.getWeek();
      Week week1 = (Week)week0.previous();
      week0.getYearValue();
      week0.equals(week0);
      week0.toString();
      week0.toString();
      week1.getYearValue();
      week0.getWeek();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(10, (-2750));
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getLastMillisecond(calendar0);
      week0.toString();
      week0.getSerialIndex();
      MockDate mockDate0 = new MockDate(1, 968, 968, (-57), 53, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Week 10, -2750");
      Locale locale0 = Locale.forLanguageTag("Week 10, -2750");
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Week week1 = null;
      try {
        week1 = new Week(0, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'week' (0) to be in the range 1 to 53
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(0L);
      mockDate0.setTime(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1746), (-1746), (-1746));
      Day day0 = new Day(mockDate0, mockGregorianCalendar0);
      Date date0 = day0.getEnd();
      day0.getEnd();
      Week week0 = new Week(date0, mockGregorianCalendar0);
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      RegularTimePeriod.setCalendarInstancePrototype(mockGregorianCalendar0);
      MockGregorianCalendar.from(zonedDateTime0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      week0.compareTo(regularTimePeriod0);
      week0.getYearValue();
      week0.getWeek();
      week0.getFirstMillisecond();
      week0.equals((Object) null);
      week0.getYear();
      week0.equals("");
      week0.next();
      week0.getYear();
      week0.toString();
      week0.getWeek();
      week0.next();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week(53, 53);
      week0.compareTo(week1);
      TimeZone timeZone0 = TimeZone.getTimeZone("Can't evaluate the month.");
      Locale locale0 = Locale.GERMANY;
      week0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      timeZone0.getDisplayName(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.getWeeksInWeekYear();
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Week.parseWeek("g&@.7uKg=lchP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      MockDate mockDate0 = new MockDate(1537L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Week week0 = new Week(6, year0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      week0.equals(calendar0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(0, 1600);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset minutes not in valid range: value 1600 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-298), 0, 5742, 0);
      Week week0 = new Week(mockDate0);
      // Undeclared exception!
      try { 
        week0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1390L));
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.clear();
      locale0.getUnicodeLocaleKeys();
      mockDate0.getTime();
      locale0.stripExtensions();
      mockGregorianCalendar0.set(13, (-518), 0, 0, 13);
      mockDate0.setTime((-518));
      mockGregorianCalendar0.set(271, (-574), (-518), 13, (-710), 4);
      Week week0 = new Week(mockDate0, mockGregorianCalendar0);
      mockGregorianCalendar0.setGregorianChange(mockDate0);
      week0.getFirstMillisecond();
      week0.peg(mockGregorianCalendar0);
      week0.next();
      RegularTimePeriod.getCalendarInstance();
      week0.peg(mockGregorianCalendar0);
      week0.next();
      week0.getEnd();
      week0.previous();
      week0.next();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      Week.parseWeek((String) null);
      Class<Second> class0 = Second.class;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-1161), 59, (-963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      week0.getEnd();
      week0.previous();
      Minute minute0 = new Minute(mockDate0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      minute0.getLastMillisecond(calendar0);
      Hour hour0 = minute0.getHour();
      week0.equals(hour0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      week0.peg(gregorianCalendar0);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      week0.equals(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week();
      week0.compareTo(week1);
      TimeZone timeZone0 = TimeZone.getTimeZone("Can't evaluate the month.");
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayName();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("zone");
      linkedHashSet0.add("zone");
      timeZone0.getDisplayName(locale0);
      Locale.lookupTag(linkedList0, linkedHashSet0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.getWeeksInWeekYear();
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Week.parseWeek("g&@.7uKg=lchP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = null;
      RegularTimePeriod.setThreadLocalCalendarInstance((Calendar) null);
      // Undeclared exception!
      try { 
        week0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      MockDate mockDate0 = new MockDate(1, (-503), 53);
      Quarter quarter0 = new Quarter(mockDate0);
      week0.compareTo(quarter0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("XTn&&VBE", "second");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      week0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 516;
      Week week0 = null;
      try {
        week0 = new Week(516, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Week week0 = new Week();
      week0.getYear();
      week0.toString();
      week0.next();
      week0.getMiddleMillisecond();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      week0.peg(gregorianCalendar0);
      // Undeclared exception!
      try { 
        Week.parseWeek("Week 7, 2014");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 479, 479, 44, 479);
      mockDate0.clone();
      Week week0 = new Week(mockDate0);
      week0.getYear();
      week0.getYearValue();
      mockDate0.getTime();
      week0.getMiddleMillisecond();
      week0.getSerialIndex();
      week0.next();
      String string0 = "&e&yZ\\[f(~=Cr";
      // Undeclared exception!
      try { 
        Week.parseWeek("&e&yZ[f(~=Cr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-5689), (-2639), (-5689), 0, (-7), 940);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      fixedMillisecond0.next();
      Date date0 = fixedMillisecond0.getTime();
      mockDate0.before(date0);
      Week week0 = new Week(mockDate0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      week0.peg(calendar0);
      mockDate0.before(date0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      week0.getFirstMillisecond(calendar0);
      week0.toString();
      week0.previous();
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        mockDate0.before((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1759L);
      Calendar calendar0 = MockCalendar.getInstance();
      Week week0 = new Week(mockDate0, calendar0);
      week0.next();
      week0.getWeek();
      week0.compareTo(mockDate0);
      week0.toString();
      week0.getLastMillisecond();
      week0.previous();
      week0.toString();
      // Undeclared exception!
      try { 
        Week.parseWeek("Second");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1864L));
      fixedMillisecond0.getEnd();
      Date date0 = fixedMillisecond0.getTime();
      Week week0 = new Week(date0);
      week0.getLastMillisecond();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      week0.getLastMillisecond(calendar0);
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      Week week0 = new Week(date0);
      week0.previous();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(75);
      Date date0 = spreadsheetDate0.toDate();
      Week week0 = new Week(date0);
      week0.getSerialIndex();
      week0.getLastMillisecond();
      week0.getSerialIndex();
      // Undeclared exception!
      try { 
        Week.parseWeek("org.jfree.data.time.TimePeriodFormatException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      week0.getMiddleMillisecond();
      week0.previous();
      Calendar calendar0 = MockCalendar.getInstance();
      week0.getLastMillisecond(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(212, 53, (-637), 52, 198);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1817L));
      Date date0 = fixedMillisecond0.getTime();
      Week week0 = new Week(date0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      week0.peg(calendar0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week();
      week0.getSerialIndex();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1705), "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      timeZone0.getDisplayName(locale0);
      timeZone0.clone();
      locale0.getScript();
      TimeZone.getDefault();
      locale0.getDisplayLanguage();
      Week week0 = new Week(date0, timeZone0, locale0);
      week0.getYear();
      week0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week(44, 44);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 53, 1, 1, 44, 2085);
      mockGregorianCalendar0.toZonedDateTime();
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      mockGregorianCalendar0.after(week0);
      week0.getWeek();
      week0.compareTo(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "4gfS5c)RRt(p";
      Locale locale0 = new Locale("4gfS5c)RRt(p", "1=7M[VLH^OCfEda");
      Week week0 = null;
      try {
        week0 = new Week((Date) null, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3289L));
      Calendar calendar0 = null;
      Week week0 = null;
      try {
        week0 = new Week(mockDate0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1466, "\"nVMFGj%=m9`lO,}9g");
      Week week0 = new Week(date0, simpleTimeZone0, locale0);
      simpleTimeZone0.setRawOffset(0);
      week0.toString();
      week0.getWeek();
      week0.equals("Week 40, 1582");
      week0.getYearValue();
      week0.getYear();
      week0.toString();
      week0.getFirstMillisecond();
      week0.previous();
      // Undeclared exception!
      try { 
        week0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      Week week0 = null;
      try {
        week0 = new Week(0, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'week' (0) to be in the range 1 to 53
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("{/p:-[n5Xc_)ZAP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44, 44, 44, 44, 44, 44);
      TimeZone timeZone0 = TimeZone.getTimeZone("J4G_d]\"[2+eKcF");
      Locale locale0 = Locale.JAPANESE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Week week0 = new Week(mockDate0, calendar0);
      week0.equals(timeZone0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(37, 28, 28, 28, 459, 28);
      Week week0 = new Week(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(459, 459, (-1251), 1, (-360), 1);
      week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      week0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fixedMillisecond0.getTime();
      Week week0 = new Week();
      week0.previous();
      week0.getYearValue();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-7));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayName(locale1);
      Week week0 = new Week(mockDate0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "_<aPv9:.<LG]=Z^l";
      // Undeclared exception!
      try { 
        Week.parseWeek("_<aPv9:.<LG]=Z^l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Date date0 = null;
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Year year0 = mock(Year.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(year0).getYear();
      Week week0 = null;
      try {
        week0 = new Week(2038, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'week' (2038) to be in the range 1 to 53
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = null;
      try {
        week0 = new Week((-314), year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'week' (-314) to be in the range 1 to 53
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      Calendar calendar0 = MockCalendar.getInstance();
      week0.compareTo(calendar0);
      week0.getFirstMillisecond(calendar0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      week0.getMillisecond(timePeriodAnchor0, calendar0);
      week0.getFirstMillisecond();
      week0.next();
      week0.getWeek();
      week0.getLastMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("locale");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Week.parseWeek("Invalid 'day' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1900, 1900, (-535));
      Week week0 = new Week(mockDate0);
      week0.getWeek();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week();
      week0.next();
      week0.getYear();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("");
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      RegularTimePeriod.getCalendarInstance();
      week0.equals((Object) null);
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Day day0 = new Day();
      Date date0 = day0.getStart();
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.lookup(linkedList0, linkedHashSet0);
      Week week0 = null;
      try {
        week0 = new Week(date0, timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(34, 34, 34, 1, 34);
      Week week0 = new Week();
      week0.getWeek();
      Day day0 = new Day(mockDate1);
      Date date0 = day0.getStart();
      mockDate0.before(date0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week();
      week0.getEnd();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-1661));
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Locale locale0 = new Locale(":<3Ws{q'", ":<3Ws{q'", "");
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
      Object object0 = new Object();
      mockGregorianCalendar1.after(object0);
      week0.peg(mockGregorianCalendar1);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(1700, 1, 1700, 6, 53, 543);
      week0.hashCode();
      week0.getYearValue();
      week0.equals(mockGregorianCalendar2);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-243L));
      Date date0 = fixedMillisecond0.getTime();
      Week week0 = new Week(date0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 14;
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(14, (-2763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Week week0 = new Week();
      Week week1 = new Week();
      week1.next();
      week0.compareTo(week1);
      TimeZone timeZone0 = TimeZone.getTimeZone("Can't evaluate the month.");
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayName();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("zone");
      linkedHashSet0.add("zone");
      timeZone0.getDisplayName(locale0);
      Locale.lookupTag(linkedList0, linkedHashSet0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.getWeeksInWeekYear();
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Week.parseWeek("g&@.7uKg=lchP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 44, 0);
      mockDate0.clone();
      Week week0 = new Week(mockDate0);
      week0.getYear();
      week0.getYearValue();
      mockDate0.getTime();
      week0.getSerialIndex();
      week0.next();
      String string0 = "&e&yZ\\[f(~=Cr";
      // Undeclared exception!
      try { 
        Week.parseWeek("&e&yZ[f(~=Cr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(589L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockDate.UTC((-771), (-771), 783, (-771), 783, 1956);
      mockDate0.toInstant();
      Week week0 = new Week(mockDate0);
      week0.previous();
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      regularTimePeriod0.previous();
      MockDate mockDate1 = new MockDate(53, (-1249), 9, 1, 1, (-85));
      mockDate0.before(mockDate1);
      week0.getWeek();
      week0.next();
      // Undeclared exception!
      try { 
        Week.parseWeek("Can't evaluate the year.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1759L);
      Calendar calendar0 = MockCalendar.getInstance();
      Week week0 = new Week(mockDate0, calendar0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      FileSystemHandling.shouldAllThrowIOExceptions();
      regularTimePeriod0.previous();
      week0.getWeek();
      week0.compareTo(mockDate0);
      week0.toString();
      week0.getLastMillisecond();
      week0.previous();
      week0.toString();
      // Undeclared exception!
      try { 
        Week.parseWeek("Second");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }
}
