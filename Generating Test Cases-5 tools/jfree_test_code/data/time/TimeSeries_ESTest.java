/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:43:00 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.VetoableChangeListener;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.Range;
import org.jfree.data.general.SeriesChangeListener;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      timeSeries0.getMinY();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.add(regularTimePeriod0, 2645.0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(857, 857, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 857, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      timeSeries0.hashCode();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod1).compareTo(any());
      timeSeries0.add(regularTimePeriod1, 100.0, true);
      timeSeries0.update(regularTimePeriod0, 100.0);
      timeSeries0.findValueRange();
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      int int0 = (-2374);
      TimeSeries timeSeries0 = new TimeSeries("Time");
      timeSeries0.getItems();
      TimeSeries timeSeries1 = new TimeSeries("Time");
      // Undeclared exception!
      try { 
        timeSeries1.getTimePeriod(1952257861);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1952257861, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("1;6e0Xr~@8R4o", "cHK", "Overlappinbin");
      timeSeries0.clear();
      TimeSeries timeSeries1 = new TimeSeries("Overlappinbin", "Overlappinbin", "1;6e0Xr~@8R4o");
      // Undeclared exception!
      try { 
        timeSeries1.delete(47, 1256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      timeSeries0.removeAgedItems(true);
      timeSeries0.clear();
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 3465);
      timeSeries1.setKey("Time");
      timeSeries0.addAndOrUpdate(timeSeries1);
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.getRawDataItem(regularTimePeriod0);
      timeSeries1.addChangeListener(seriesChangeListener0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn("Time", "").when(regularTimePeriod1).toString();
      timeSeries0.getMaxY();
      timeSeries1.add(regularTimePeriod1, (Number) Double.NaN);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod2);
      timeSeries0.clone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      timeSeries0.removeAgedItems(true);
      timeSeries0.clear();
      timeSeries0.setKey("Time");
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getRawDataItem(regularTimePeriod0);
      timeSeries0.addChangeListener(seriesChangeListener0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(regularTimePeriod1).compareTo(any());
      doReturn("Time").when(regularTimePeriod1).toString();
      timeSeries0.getMaxY();
      timeSeries0.add(regularTimePeriod1, (Number) Double.NaN);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod2);
      timeSeries0.clone();
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("fJ~]iv", "fJ~]iv", "week");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), 618);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getMaxY();
      timeSeries0.setKey("Time");
      timeSeries0.add(regularTimePeriod0, (Number) Double.NaN, false);
      timeSeries0.getMinY();
      timeSeries0.setRangeDescription("Time");
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(391).when(regularTimePeriod1).compareTo(any());
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod1, regularTimePeriod1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getValue(regularTimePeriod0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.createCopy(2, 17);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "", "Time");
      timeSeries0.setMaximumItemCount(2678);
      timeSeries0.setMaximumItemCount(17);
      timeSeries0.setDescription("");
      timeSeries0.setDomainDescription("SX*fhIt)](sMm");
      timeSeries0.setDomainDescription("SX*fhIt)](sMm");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod0).compareTo(any());
      TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries1.getValue(2678);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2678, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      timeSeries0.removeAgedItems(true);
      timeSeries0.clear();
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 3465);
      timeSeries1.clone();
      timeSeries1.setKey("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod0).compareTo(any());
      doReturn((String) null, (String) null).when(regularTimePeriod0).toString();
      timeSeries1.getValue(regularTimePeriod0);
      timeSeries1.add(regularTimePeriod0, (Number) null);
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.getRawDataItem(regularTimePeriod1);
      timeSeries1.addChangeListener(seriesChangeListener0);
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getMaxY();
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      RegularTimePeriod regularTimePeriod3 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod3);
      timeSeries0.clone();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      timeSeries0.getMaxY();
      timeSeries0.setRangeDescription("");
      timeSeries0.getTimePeriodClass();
      timeSeries0.getDomainDescription();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeries0.getValue(982);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 982, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getMaxY();
      timeSeries0.add(regularTimePeriod0, (Number) Double.NaN, false);
      timeSeries0.getMinY();
      timeSeries0.setRangeDescription("Time");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod3 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod4 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod5 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "period", "period");
      timeSeries0.getRangeDescription();
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(1547);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1547, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("fJ~]iv", "fJ~]iv", "week");
      timeSeries0.removeAgedItems(0L, false);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod0);
      TimePeriodAnchor timePeriodAnchor0 = mock(TimePeriodAnchor.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone1 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      TimePeriodAnchor timePeriodAnchor1 = mock(TimePeriodAnchor.class, new ViolatedAssumptionAnswer());
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      TimePeriodAnchor timePeriodAnchor2 = mock(TimePeriodAnchor.class, new ViolatedAssumptionAnswer());
      Calendar calendar1 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      timeSeries0.setMaximumItemAge(10L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "");
      int int0 = (-3379);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-3379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      timeSeries0.removeAgedItems(true);
      timeSeries0.clear();
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 3465);
      timeSeries1.setKey("Time");
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.getRawDataItem(regularTimePeriod0);
      timeSeries1.addChangeListener(seriesChangeListener0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod1).compareTo(any());
      doReturn("", "Time").when(regularTimePeriod1).toString();
      timeSeries0.getMaxY();
      timeSeries1.add(regularTimePeriod1, (Number) Double.NaN);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod2);
      timeSeries0.clone();
      RegularTimePeriod regularTimePeriod3 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.getDataItem(regularTimePeriod3);
      timeSeries1.getRangeDescription();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = new TimeSeries("E&HaJ?", ".", "V;8EXs");
      TimePeriodAnchor timePeriodAnchor0 = mock(TimePeriodAnchor.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeries0.findValueRange((Range) null, timePeriodAnchor0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "H>");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getTimePeriods();
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      timeSeries0.hashCode();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod1).compareTo(any());
      timeSeries0.add(regularTimePeriod1, 100.0, true);
      timeSeries0.update(regularTimePeriod0, 0.0);
      timeSeries0.findValueRange();
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      timeSeries0.getMinY();
      timeSeries0.setRangeDescription("");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getDataItem(regularTimePeriod0);
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      timeSeries0.addChangeListener(seriesChangeListener0);
      int int0 = (-784);
      timeSeries0.getMinY();
      // Undeclared exception!
      try { 
        timeSeries0.update((-784), (Number) Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "", "Time");
      long long0 = (-2712L);
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 237.7751);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeries0.delete(1115, 1115, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1115, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", " to ", " to ");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1367, 1367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      // Undeclared exception!
      try { 
        timeSeries0.update(2147483645, (Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("*'pLz.#BavTJWy 2WN5");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.add(regularTimePeriod0, (double) (-1851), true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value", "Value", "");
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "xRange", "");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getDataItem(regularTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value", "", "Value");
      timeSeries0.getItemCount();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.delete(regularTimePeriod0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getValue(regularTimePeriod1);
      TimeSeries timeSeries1 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.addOrUpdate(regularTimePeriod2, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getRawDataItem(regularTimePeriod0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.findValueRange();
      RegularTimePeriod regularTimePeriod2 = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      TimeSeries timeSeries1 = new TimeSeries("Time", "", "+x*$R)##\u0005m~[+_D^$g");
      int int0 = (-1);
      timeSeries1.equals(timeSeries0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries2 = new TimeSeries("Time", "", "+x*$R)##\u0005m~[+_D^$g");
      // Undeclared exception!
      try { 
        timeSeries2.getValue(725);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 725, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      timeSeries0.getMinY();
      TimeSeries timeSeries1 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.getRawDataItem(regularTimePeriod0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getMaximumItemAge();
      // Undeclared exception!
      try { 
        timeSeries1.update(regularTimePeriod1, (Number) 9223372036854775807L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getMaximumItemAge();
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) 9223372036854775807L);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value", "Value", (String) null);
      timeSeries0.getMaximumItemAge();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeries0.update(regularTimePeriod0, 2203.04271617196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      timeSeries0.removeAgedItems(true);
      timeSeries0.clear();
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 3465);
      timeSeries1.setKey("Time");
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries1.getRawDataItem(regularTimePeriod0);
      timeSeries1.addChangeListener(seriesChangeListener0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(regularTimePeriod1).toString();
      timeSeries0.getMaxY();
      timeSeries1.add(regularTimePeriod1, (Number) Double.NaN);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      RegularTimePeriod regularTimePeriod2 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getIndex(regularTimePeriod2);
      timeSeries0.clone();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      int int0 = (-1678);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "|cy<EE7?gYUL", "");
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      Range range0 = timeSeries0.findValueRange((Range) null, (TimePeriodAnchor) null, calendar0);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      timeSeries0.findValueRange(range0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 5172.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 2087.957);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      timeSeries0.findValueRange();
      TimePeriodAnchor timePeriodAnchor0 = mock(TimePeriodAnchor.class, new ViolatedAssumptionAnswer());
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      Range range0 = timeSeries0.findValueRange((Range) null, timePeriodAnchor0, calendar0);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      timeSeries0.findValueRange(range0, timeZone0);
      timeSeries0.getItems();
      int int0 = 0;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value", "Negative 'periods' argument.", "Negative 'periods' argument.");
      timeSeries0.getDomainDescription();
      TimeSeries timeSeries1 = new TimeSeries("Negative 'periods' argument.", "Negative 'periods' argument.", "Negative 'periods' argument.");
      timeSeries1.findValueRange();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeries0.findValueRange((Range) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "", "");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getDataItem(regularTimePeriod0);
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-2010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value", "Value", "Value");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getDataItem(regularTimePeriod0);
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "Time");
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "Time", "org.jfree.data.general.SeriesChangeEvent");
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      timeSeries0.removeChangeListener(seriesChangeListener0);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value", "Value", "s");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getValue(regularTimePeriod0);
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getDataItem(regularTimePeriod1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_RANGE_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Value");
      timeSeries0.hashCode();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod1).compareTo(any());
      timeSeries0.add(regularTimePeriod1, 100.0, false);
      timeSeries0.update(regularTimePeriod0, 0.0);
      timeSeries0.findValueRange();
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getMinY();
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) Double.NaN);
      TimeSeries timeSeries1 = null;
      try {
        timeSeries1 = new TimeSeries((Comparable) null, "IT;", "#Sa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      int int0 = (-2374);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-2374));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time", "", "Time");
      timeSeries0.setMaximumItemCount(2678);
      timeSeries0.setMaximumItemCount(17);
      timeSeries0.setDescription("");
      timeSeries0.setDomainDescription("SX*fhIt)](sMm");
      timeSeries0.setDomainDescription("SX*fhIt)](sMm");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      timeSeries0.getValue(regularTimePeriod0);
      timeSeries0.addOrUpdate(regularTimePeriod0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = TimeSeries.DEFAULT_DOMAIN_DESCRIPTION;
      TimeSeries timeSeries0 = new TimeSeries("Time");
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(regularTimePeriod0).compareTo(any());
      doReturn((String) null, (String) null).when(regularTimePeriod0).toString();
      timeSeries0.getMaxY();
      timeSeries0.setKey("Time");
      timeSeries0.add(regularTimePeriod0, (Number) Double.NaN, false);
      timeSeries0.getMinY();
      timeSeries0.setRangeDescription("Time");
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(regularTimePeriod1).compareTo(any());
      timeSeries0.createCopy(regularTimePeriod1, regularTimePeriod1);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }
}
