/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:54:15 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.SerialDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeriesDataItem_ESTest extends TimeSeriesDataItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Year year0 = new Year();
      year0.getMiddleMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeriesDataItem0.setValue(9999);
      timeSeriesDataItem0.setValue((-9999));
      timeSeriesDataItem0.equals(year0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeriesDataItem timeSeriesDataItem1 = (TimeSeriesDataItem)timeSeriesDataItem0.clone();
      TimeSeriesDataItem timeSeriesDataItem2 = new TimeSeriesDataItem(regularTimePeriod0, (double) 1392409281320L);
      timeSeriesDataItem1.setValue(9999);
      timeSeriesDataItem1.equals(timeSeriesDataItem2);
      timeSeriesDataItem0.equals(timeSeriesDataItem1);
      timeSeriesDataItem0.equals(timeSeriesDataItem1);
      MockDate mockDate0 = (MockDate)year0.getStart();
      TimeSeriesDataItem timeSeriesDataItem3 = (TimeSeriesDataItem)timeSeriesDataItem0.clone();
      Integer integer0 = new Integer(9999);
      timeSeriesDataItem3.equals(integer0);
      timeSeriesDataItem0.equals(timeSeriesDataItem3);
      timeSeriesDataItem0.compareTo(mockDate0);
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(year0);
      TimeSeriesDataItem timeSeriesDataItem4 = (TimeSeriesDataItem)timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(timeSeriesDataItem4);
      TimeSeriesDataItem timeSeriesDataItem5 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 1392409281320L);
      TimeSeriesDataItem timeSeriesDataItem6 = (TimeSeriesDataItem)timeSeriesDataItem5.clone();
      timeSeriesDataItem5.hashCode();
      Integer integer1 = new Integer(2902);
      timeSeriesDataItem6.equals(integer1);
      timeSeriesDataItem1.hashCode();
      System.setCurrentTimeMillis((-9999));
      timeSeriesDataItem0.hashCode();
      TimeSeriesDataItem timeSeriesDataItem7 = (TimeSeriesDataItem)timeSeriesDataItem1.clone();
      timeSeriesDataItem2.compareTo(timeSeriesDataItem7);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year(0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 0);
      timeSeriesDataItem0.compareTo(year0);
      timeSeriesDataItem0.equals(timeSeriesDataItem0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      Object object0 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.equals(object0);
      timeSeriesDataItem0.equals(year0);
      timeSeriesDataItem0.setValue((-9999));
      timeSeriesDataItem0.setValue(9999);
      timeSeriesDataItem0.getPeriod();
      Number number0 = timeSeriesDataItem0.getValue();
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.equals(number0);
      timeSeriesDataItem0.equals(number0);
      timeSeriesDataItem0.getPeriod();
      timeSeriesDataItem0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year();
      year0.getMiddleMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeriesDataItem0.setValue(9999);
      timeSeriesDataItem0.setValue((-9999));
      timeSeriesDataItem0.equals(year0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      Object object0 = timeSeriesDataItem0.clone();
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem(regularTimePeriod0, (double) 1392409281320L);
      object0.equals(timeSeriesDataItem1);
      timeSeriesDataItem0.equals(object0);
      timeSeriesDataItem0.equals(object0);
      Date date0 = year0.getStart();
      Object object1 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.equals(object1);
      timeSeriesDataItem0.compareTo(date0);
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(year0);
      Object object2 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(object2);
      TimeSeriesDataItem timeSeriesDataItem2 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 1392409281320L);
      Object object3 = timeSeriesDataItem2.clone();
      timeSeriesDataItem2.hashCode();
      Integer integer0 = new Integer(2902);
      object3.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1753, 1753);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      mockGregorianCalendar0.clone();
      simpleTimeZone0.clone();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockDate0.getTime();
      mockDate0.after(date0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1), 0, 0);
      Day day0 = new Day(mockDate0, mockGregorianCalendar1);
      Calendar.getAvailableCalendarTypes();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
      day0.getMiddleMillisecond();
      timeSeriesDataItem0.setValue((Number) null);
      timeSeriesDataItem0.getValue();
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.hashCode();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      timeSeriesDataItem0.equals(japaneseDate0);
      timeSeriesDataItem0.setValue((Number) null);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes((-1), (-4161));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset minutes not in valid range: value -4161 is not in the range -59 to 59
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2710L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      Long long0 = new Long((-2710L));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) long0);
      fixedMillisecond0.toString();
      timeSeriesDataItem0.compareTo(fixedMillisecond0);
      timeSeriesDataItem0.getValue();
      timeSeriesDataItem0.clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 53);
      timeSeriesDataItem0.getValue();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = null;
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (-386.3882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1600, 1600, 3195, 3195, 0);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Date date0 = serialDate0.toDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1002.1819498));
      timeSeriesDataItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(0.0);
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (Number) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      year0.getMiddleMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeriesDataItem0.setValue(9999);
      timeSeriesDataItem0.setValue((-9999));
      timeSeriesDataItem0.equals(year0);
      year0.previous();
      Object object0 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.equals(object0);
      timeSeriesDataItem0.equals(object0);
      Date date0 = year0.getStart();
      Object object1 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.equals(object1);
      timeSeriesDataItem0.compareTo(date0);
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(year0);
      Object object2 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(object2);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 1392409281320L);
      Object object3 = timeSeriesDataItem1.clone();
      timeSeriesDataItem0.equals(object3);
      timeSeriesDataItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(800L);
      Float float0 = new Float(0.0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      Float.sum(0.0F, 800L);
      timeSeriesDataItem0.equals(float0);
      timeSeriesDataItem0.hashCode();
      Object object0 = timeSeriesDataItem0.clone();
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.hashCode();
      Float.min(0.0F, 1121.019F);
      timeSeriesDataItem0.getValue();
      timeSeriesDataItem0.clone();
      timeSeriesDataItem0.equals("org.jfree.data.time.FixedMillisecond");
      timeSeriesDataItem0.equals(object0);
      timeSeriesDataItem0.setValue(float0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-396), (-1), (-396), (-1), (-1), (-1));
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 9999);
      Object object0 = new Object();
      timeSeriesDataItem0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.previous();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(319L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertNotNull(millisecond1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond1, (Number) 999);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(319L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertNotNull(timeSeriesDataItem0);
      
      Integer integer0 = (Integer)timeSeriesDataItem0.getValue();
      assertEquals(999, (int)integer0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(319L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 4);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(timeSeriesDataItem0);
      
      String string0 = quarter0.toString();
      assertEquals("Q1/2014", string0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(string0);
      
      Quarter quarter1 = (Quarter)timeSeriesDataItem0.getPeriod();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter1.getSerialIndex());
      assertEquals(1, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertSame(quarter0, quarter1);
      assertSame(quarter1, quarter0);
      assertNotNull(quarter1);
      
      Quarter quarter2 = (Quarter)timeSeriesDataItem0.getPeriod();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter2.getSerialIndex());
      assertEquals(2014, quarter2.getYearValue());
      assertEquals(1392409281320L, quarter2.getFirstMillisecond());
      assertEquals(1, quarter2.getQuarter());
      assertEquals(1392409281320L, quarter2.getLastMillisecond());
      assertSame(quarter0, quarter2);
      assertSame(quarter0, quarter1);
      assertSame(quarter2, quarter1);
      assertSame(quarter2, quarter0);
      assertNotNull(quarter2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(timeSeriesDataItem0);
      
      Object object0 = timeSeriesDataItem0.clone();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertTrue(object0.equals((Object)timeSeriesDataItem0));
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotSame(timeSeriesDataItem0, object0);
      assertNotSame(object0, timeSeriesDataItem0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hour hour0 = Hour.parseHour("?Z{^0Ak");
      assertNull(hour0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1753, 1753);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2202659220000L), long0);
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-6), 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      Day day0 = new Day(mockDate0, mockGregorianCalendar0);
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      assertNotNull(day0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      assertNotNull(timeSeriesDataItem0);
      
      long long1 = day0.getMiddleMillisecond();
      assertEquals((-2202659220000L), long1);
      assertTrue(long1 == long0);
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      
      timeSeriesDataItem0.setValue((Number) null);
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      
      Number number0 = timeSeriesDataItem0.getValue();
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      assertNull(number0);
      
      timeSeriesDataItem0.hashCode();
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      
      timeSeriesDataItem0.hashCode();
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
      
      timeSeriesDataItem0.setValue((Number) null);
      assertEquals("Thu Mar 15 06:13:00 GMT 1900", mockDate0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2202659220000L), day0.getFirstMillisecond());
      assertEquals((-2202659220000L), day0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Year year0 = new Year();
      year0.getMiddleMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) (-9999));
      timeSeriesDataItem0.setValue(9999);
      timeSeriesDataItem0.setValue((-9999));
      timeSeriesDataItem0.equals(year0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeriesDataItem timeSeriesDataItem1 = (TimeSeriesDataItem)timeSeriesDataItem0.clone();
      TimeSeriesDataItem timeSeriesDataItem2 = new TimeSeriesDataItem(regularTimePeriod0, (double) 1392409281320L);
      timeSeriesDataItem2.setValue(9999);
      timeSeriesDataItem1.setValue(9999);
      timeSeriesDataItem1.equals(timeSeriesDataItem2);
      timeSeriesDataItem0.equals(timeSeriesDataItem1);
      timeSeriesDataItem0.equals(timeSeriesDataItem1);
      TimeSeriesDataItem timeSeriesDataItem3 = (TimeSeriesDataItem)timeSeriesDataItem0.clone();
      timeSeriesDataItem3.equals(9999);
      boolean boolean0 = timeSeriesDataItem0.equals(timeSeriesDataItem3);
      assertTrue(boolean0);
      
      timeSeriesDataItem0.hashCode();
      timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(year0);
      TimeSeriesDataItem timeSeriesDataItem4 = (TimeSeriesDataItem)timeSeriesDataItem0.clone();
      timeSeriesDataItem0.compareTo(timeSeriesDataItem4);
      TimeSeriesDataItem timeSeriesDataItem5 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) 1392409281320L);
      TimeSeriesDataItem timeSeriesDataItem6 = (TimeSeriesDataItem)timeSeriesDataItem5.clone();
      timeSeriesDataItem5.hashCode();
      Integer integer0 = new Integer(2902);
      timeSeriesDataItem6.equals(integer0);
      timeSeriesDataItem1.hashCode();
      assertFalse(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
      
      System.setCurrentTimeMillis((-9999));
      timeSeriesDataItem0.hashCode();
      assertFalse(timeSeriesDataItem0.equals((Object)timeSeriesDataItem1));
  }
}
