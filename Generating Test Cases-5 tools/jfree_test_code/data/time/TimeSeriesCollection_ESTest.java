/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:09:43 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeEvent;
import java.util.Calendar;
import java.util.EventListener;
import java.util.List;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.DomainOrder;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeriesCollection_ESTest extends TimeSeriesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      List<Object> list0 = null;
      int int0 = (-4600);
      timeSeriesCollection0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getRangeBounds((List) null, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 242;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      doReturn(0L).when(regularTimePeriod0).getLastMillisecond(any(java.util.Calendar.class));
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(242).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0, regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getDomainBounds(true);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartYValue(242, 242);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 242, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      doReturn(3404).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0, regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getSeries();
      timeSeriesCollection0.getDomainUpperBound(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeZone0).clone();
      doReturn(999, (-3143)).when(timeZone0).getOffset(anyLong());
      doReturn((-1013), 13).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Comparable<TimeSeriesCollection> comparable0 = (Comparable<TimeSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeriesIndex(comparable0);
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      timeSeriesCollection0.equals(timeSeriesCollection1);
      List list0 = timeSeriesCollection0.getSeries();
      timeSeriesCollection0.equals(list0);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn("+pE,3F_:&wIb").when(propertyChangeEvent0).getPropertyName();
      timeSeriesCollection0.vetoableChange(propertyChangeEvent0);
      timeSeriesCollection1.getRangeBounds(list0, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.removeAllSeries();
      timeSeriesCollection0.equals(timeSeriesCollection0);
      timeSeriesCollection0.getDomainLowerBound(true);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      timeSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.removeSeries(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (2).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<MockCalendar> comparable0 = (Comparable<MockCalendar>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      timeSeriesCollection0.getSeriesCount();
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1817).when(timeSeries1).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries1).getTimePeriod(anyInt());
      doReturn(0L, 1).when(timeSeries1).getValue(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2594).when(timeZone0).getOffset(anyLong());
      doReturn(1817, 1588).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries1, timeZone0);
      boolean boolean0 = false;
      timeSeriesCollection1.setNotify(false);
      timeSeriesCollection1.getEndYValue(0, 0);
      timeSeriesCollection1.getEndY(0, 0);
      // Undeclared exception!
      try { 
        timeSeriesCollection1.getDomainUpperBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(880).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      int int0 = (-1013);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainBounds(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      doReturn(0L).when(regularTimePeriod0).getLastMillisecond(any(java.util.Calendar.class));
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2088).when(timeSeries0).getItemCount();
      doReturn((double)2088).when(timeSeries0).getMaxY();
      doReturn(145.82005123529).when(timeSeries0).getMinY();
      doReturn(regularTimePeriod0, (RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DomainOrder domainOrder0 = timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.equals(domainOrder0);
      timeSeriesCollection0.getDomainLowerBound(true);
      timeSeriesCollection0.getRangeBounds(true);
      int int0 = 0;
      timeSeriesCollection0.getX(0, 0);
      timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getY((-732), (-1173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getStartX(0, 0);
      timeSeriesCollection0.hasListener((EventListener) null);
      int int0 = (-636);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX(4971, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4971, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      doReturn(2208.354153258217).when(timeSeries0).getMaxY();
      doReturn((-0.8837983579305075)).when(timeSeries0).getMinY();
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DomainOrder domainOrder0 = timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.equals(domainOrder0);
      timeSeriesCollection0.getDomainLowerBound(true);
      timeSeriesCollection0.getRangeBounds(true);
      int int0 = 0;
      timeSeriesCollection0.getX(0, 0);
      timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getY((-732), (-1173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn("'.=O(LBe]MIhM").when(timeSeries0).toString();
      doReturn("'.=O(LBe]MIhM").when(timeSeries0).getKey();
      doReturn((-5404), (-5404)).when(timeSeries0).getItemCount();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      boolean boolean0 = false;
      timeSeriesCollection0.getDomainBounds(false);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getItemCount(0);
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) null);
      timeSeriesCollection1.setNotify(false);
      timeSeriesCollection0.hasListener(timeSeriesCollection1);
      timeSeriesCollection0.getX(regularTimePeriod0);
      timeSeriesCollection0.getSeriesIndex(comparable0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartYValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-433.393652545)).when(timeSeries0).getMaxY();
      doReturn((-433.393652545)).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      boolean boolean0 = true;
      timeSeriesCollection0.getRangeBounds(true);
      int int0 = (-145);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX((-145), (-145));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn("Key").when(timeSeries0).toString();
      doReturn(timeSeriesCollection0).when(timeSeries0).clone();
      doReturn((-67)).when(timeSeries0).getItemCount();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("Key").when(timeZone0).clone();
      doReturn((-67), (-67)).when(timeZone0).getOffset(anyLong());
      doReturn((-1106), (-2575)).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, timeZone0);
      int int0 = 0;
      timeSeriesCollection1.getSurroundingItems(0, 0L);
      // Undeclared exception!
      try { 
        timeSeriesCollection1.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.TimeZone
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(5164.3).when(timeSeries0).getMaxY();
      doReturn(5164.3).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      timeSeriesCollection0.getRangeBounds(false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-64)).when(timeSeries0).getItemCount();
      doReturn((double)(-64)).when(timeSeries0).getMaxY();
      doReturn(1.0).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DomainOrder domainOrder0 = timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.equals(domainOrder0);
      timeSeriesCollection0.getDomainLowerBound(true);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getRangeBounds(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0) <= upper (-64.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn("Key").when(propertyChangeEvent0).getPropertyName();
      doReturn((Object) null).when(propertyChangeEvent0).getSource();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.addSeries(timeSeries0);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getGroup();
      timeSeriesCollection0.addSeries(timeSeries1);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.vetoableChange(propertyChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2712.1883839654097).when(timeSeries0).getMaxY();
      doReturn((-1.0)).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      boolean boolean0 = true;
      timeSeriesCollection0.getRangeBounds(true);
      int int0 = (-145);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX((-145), (-145));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      TimeZone timeZone1 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeriesCollection0).when(timeZone1).clone();
      doReturn(2, (-9999)).when(timeZone1).getOffset(anyLong());
      doReturn((-4788), (-9999)).when(timeZone1).getRawOffset();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeZone1);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeriesCollection1.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.util.TimeZone
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn("serialDate").when(timeSeries0).toString();
      doReturn("serialDate").when(timeSeries0).getKey();
      doReturn(1299).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getSeriesKey(0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainUpperBound(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(5, 5).when(timeZone0).getOffset(anyLong());
      doReturn(5, 5).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      int int0 = 29;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainLowerBound(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = 17;
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      int int1 = (-1411);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainBounds(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1900).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(59, 0).when(timeZone0).getOffset(anyLong());
      doReturn(59, 59).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainUpperBound(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.removeChangeListener(datasetChangeListener0);
      timeSeriesCollection0.setNotify(false);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(12L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.addSeries(timeSeries1);
      int int0 = 32;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSurroundingItems(44, 12L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (44).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<TimeSeriesCollection> comparable0 = (Comparable<TimeSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0, comparable0, comparable0).when(timeSeries0).getKey();
      doReturn(comparable0).when(timeSeries0).clone();
      doReturn((Number) null, (Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable1);
      int int0 = 2148;
      Comparable<TimeSeries> comparable2 = (Comparable<TimeSeries>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable2);
      timeSeriesCollection0.getY(0, 2148);
      timeSeriesCollection0.getEndY(0, 0);
      Comparable<Calendar> comparable3 = (Comparable<Calendar>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable3);
      timeSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartYValue(2148, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2148, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(")#2%l5L}C@").when(timeSeries0).toString();
      doReturn(")#2%l5L}C@", ")#2%l5L}C@").when(timeSeries0).getKey();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getSeries((Comparable) null);
      timeSeriesCollection0.indexOf((Comparable) null);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getItemCount((-3793));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-3793).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeSeries0).clone();
      doReturn((-160)).when(timeSeries0).getItemCount();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeZone0).clone();
      doReturn((-160), (-160)).when(timeZone0).getOffset(anyLong());
      doReturn((-160), (-160)).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      int int0 = 29;
      timeSeriesCollection0.getDomainLowerBound(false);
      timeSeriesCollection0.equals("$K,\"A4^-BqZJ?:EKB");
      timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.removeSeries(29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (29).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((-154L)).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      String string0 = "";
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSeriesKey((-3913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-3913).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.addChangeListener(datasetChangeListener0);
      timeSeriesCollection0.getStartY(0, 0);
      timeSeriesCollection0.equals((Object) null);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getY((-1027), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      List list0 = timeSeriesCollection0.getSeries();
      boolean boolean0 = false;
      timeSeriesCollection0.getDomainBounds(list0, false);
      int int0 = (-188);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX((-188), (-188));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(timeSeries0).getKey();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.removeSeries(timeSeries1);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeriesIndex(comparable0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX((RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      doReturn((Number) null).when(timeSeries0).getValue(anyInt());
      timeSeriesCollection0.addSeries(timeSeries0);
      timeSeriesCollection0.getDomainBounds(false);
      timeSeriesCollection0.getDomainBounds(true);
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      timeSeriesCollection0.hasListener(timeSeriesCollection1);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.indexOf(timeSeries1);
      timeSeriesCollection0.getYValue(0, 0);
      boolean boolean0 = true;
      int int0 = 1;
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.hasListener((EventListener) null);
      int int0 = 32;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getXValue(0, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      doReturn((Comparable) null).when(timeSeries0).getKey();
      doReturn(0).when(timeSeries0).getItemCount();
      doReturn((Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getDomainBounds(true);
      timeSeriesCollection0.getSeriesKey(0);
      timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.getStartYValue(0, 0);
      timeSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndXValue((-702), (-702));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeSeries0).clone();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Object object0 = timeSeriesCollection0.clone();
      int int0 = 6;
      timeSeriesCollection0.equals(object0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.indexOf((TimeSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null, (Comparable) null, (Comparable) null).when(timeSeries0).getKey();
      doReturn((Object) null).when(timeSeries0).clone();
      doReturn((Number) null, (Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable0);
      int int0 = 2148;
      Comparable<TimeSeries> comparable1 = (Comparable<TimeSeries>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable1);
      timeSeriesCollection0.getY(0, 2148);
      timeSeriesCollection0.getEndY(0, 0);
      Comparable<Calendar> comparable2 = (Comparable<Calendar>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable2);
      timeSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartYValue(2148, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2148, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.addChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartY(595, (-58));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 595, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(timeSeries0).getKey();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Comparable<MockCalendar> comparable0 = (Comparable<MockCalendar>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.addSeries((TimeSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(timeSeries0).getMaxY();
      doReturn(0.0).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      timeSeriesCollection0.getRangeBounds(false);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      doReturn((Comparable) null).when(timeSeries0).getKey();
      doReturn(0).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.getItemCount(0);
      timeSeriesCollection0.getSeriesIndex(0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      int int0 = 1;
      int int1 = 842;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getXValue(1, 842);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(timeSeries0).getKey();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeriesIndex(comparable0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX(0, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.addSeries(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      int int0 = (-155);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartY((-155), (-155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(timeSeries0).toString();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getSeries();
      timeSeriesCollection0.getSeries(0);
      timeSeriesCollection0.equals("anchor");
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartY(59, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getY((-649), (-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndY((-2205), (-2205));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(timeSeries0).getKey();
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      int int0 = (-1411);
      timeSeriesCollection0.getDomainBounds(false);
      timeSeriesCollection0.getSeries((Comparable) null);
      int int1 = 0;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndYValue((-1411), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      int int0 = 0;
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.removeSeries(timeSeries1);
      int int1 = 0;
      DatasetGroup datasetGroup0 = timeSeriesCollection0.getGroup();
      timeSeriesCollection0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      doReturn(0.0).when(timeSeries0).getMaxY();
      doReturn(0.0).when(timeSeries0).getMinY();
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DomainOrder domainOrder0 = timeSeriesCollection0.getDomainOrder();
      timeSeriesCollection0.equals(domainOrder0);
      timeSeriesCollection0.getDomainLowerBound(true);
      timeSeriesCollection0.getRangeBounds(true);
      int int0 = 0;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.removeSeries(0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      TimeSeries timeSeries0 = null;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.removeSeries((TimeSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      int int0 = 3069;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndY(3069, (-4032));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3069, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.setNotify(true);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartX((-1185), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.removeAllSeries();
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries1);
      timeSeriesCollection0.hasListener(timeSeriesCollection1);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.setXPosition((TimePeriodAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getYValue(0, 3524);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX((-1758), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetGroup datasetGroup0 = timeSeriesCollection0.getGroup();
      timeSeriesCollection0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      int int0 = 44;
      timeSeriesCollection0.getSeries();
      int int1 = (-256);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getY(44, (-256));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeriesIndex(comparable0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getXValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX((-2285), (-2285));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getXValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      int int0 = 0;
      timeSeriesCollection0.getSeries();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.vetoableChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      timeSeriesCollection0.vetoableChange(propertyChangeEvent0);
      timeSeriesCollection0.getDomainUpperBound(false);
      timeSeriesCollection0.getSeriesCount();
      int int0 = (-2321);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartYValue((-2321), (-2321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(timeSeries0).getMaxY();
      doReturn(0.0).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      boolean boolean0 = true;
      timeSeriesCollection0.getRangeBounds(true);
      int int0 = (-145);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX((-145), (-145));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSurroundingItems(1311, 1311);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (1311).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      int int0 = 0;
      int int1 = 2667;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndXValue(0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.removeAllSeries();
      timeSeriesCollection0.getSeries();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getX(2, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeries(comparable0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.addSeries((TimeSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getXPosition();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndY(703, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 703, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getY((-864), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSeriesKey(212);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (212).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      int int0 = 13;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSeries(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (13).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      List<TimeSeriesCollection> list0 = null;
      boolean boolean0 = false;
      timeSeriesCollection0.getRangeBounds(false);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainBounds((List) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.removeAllSeries();
      timeSeriesCollection0.hashCode();
      Comparable<Calendar> comparable0 = (Comparable<Calendar>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.indexOf(comparable0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getItemCount(47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (47).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainBounds((List) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getSeriesCount();
      timeSeriesCollection0.getSeries();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartY(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.indexOf(timeSeries0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeZone0).clone();
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      DatasetGroup datasetGroup0 = timeSeriesCollection0.getGroup();
      timeSeriesCollection0.setGroup(datasetGroup0);
      timeSeriesCollection0.hashCode();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      timeSeriesCollection0.vetoableChange(propertyChangeEvent0);
      timeSeriesCollection0.clone();
      timeSeriesCollection0.getDomainUpperBound(false);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeZone0);
      timeSeriesCollection0.hasListener(timeSeriesCollection1);
      timeSeriesCollection0.getDomainUpperBound(false);
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone1 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone1).getOffset(anyLong());
      doReturn(0, 0).when(timeZone1).getRawOffset();
      TimeSeriesCollection timeSeriesCollection2 = new TimeSeriesCollection(timeSeries0, timeZone1);
      timeSeriesCollection0.equals(timeSeriesCollection2);
      int int0 = 0;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      doReturn(0).when(timeSeries0).getItemCount();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.hashCode();
      int int0 = 0;
      timeSeriesCollection0.getSurroundingItems(0, 0);
      int int1 = (-1173);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.removeSeries((-1173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1173).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clone();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSeries((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      timeSeriesCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      doReturn((Object) null).when(timeSeries0).clone();
      doReturn(0).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeZone0).clone();
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeriesCollection0.getSurroundingItems(0, 0L);
      Object object0 = timeSeriesCollection0.clone();
      timeSeriesCollection0.equals(object0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartXValue(0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(timeSeries0).getMaxY();
      doReturn(0.0).when(timeSeries0).getMinY();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.getRangeBounds(true);
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      int int0 = 32;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSurroundingItems(32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (32).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clone();
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      int int0 = 1575;
      boolean boolean0 = false;
      timeSeriesCollection0.getDomainBounds(false);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getSeries(1575);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (1575).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection0.removeAllSeries();
      timeSeriesCollection0.equals((Object) null);
      timeSeriesCollection0.getDomainLowerBound(true);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      timeSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.removeSeries(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (2).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getXValue((-4610), (-4610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getEndX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((-1088), (-659)).when(timeZone0).getOffset(anyLong());
      doReturn(6, 931).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-659)).when(regularTimePeriod0).getFirstMillisecond(any(java.util.Calendar.class));
      timeSeriesCollection0.getX(regularTimePeriod0);
      timeSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartY(3633, (-1399));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3633, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.hashCode();
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(262806139).when(timeSeries0).getKey();
      TimeZone timeZone1 = null;
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection1);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      int int0 = 913;
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn("rU#b").when(propertyChangeEvent0).getPropertyName();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = timeSeriesCollection1.getSeriesIndex(comparable0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertFalse(int1 == int0);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertEquals((-1), int1);
      
      timeSeriesCollection1.vetoableChange(propertyChangeEvent0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection1.removeSeries(timeSeries1);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      int int2 = 986;
      TimeSeries timeSeries2 = null;
      TimeSeriesCollection timeSeriesCollection2 = new TimeSeriesCollection((TimeSeries) null);
      assertNotNull(timeSeriesCollection2);
      assertTrue(timeSeriesCollection2.equals((Object)timeSeriesCollection0));
      assertFalse(timeSeriesCollection2.equals((Object)timeSeriesCollection1));
      assertEquals(0, timeSeriesCollection2.getSeriesCount());
      assertTrue(timeSeriesCollection2.getNotify());
      
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection2.getXPosition();
      assertNotNull(timePeriodAnchor0);
      assertTrue(timeSeriesCollection2.equals((Object)timeSeriesCollection0));
      assertFalse(timeSeriesCollection2.equals((Object)timeSeriesCollection1));
      assertNotSame(timeSeriesCollection2, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection2, timeSeriesCollection0);
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertEquals(0, timeSeriesCollection2.getSeriesCount());
      assertTrue(timeSeriesCollection2.getNotify());
      
      timeSeriesCollection1.setXPosition(timePeriodAnchor0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection2));
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(timeSeriesCollection2.equals((Object)timeSeriesCollection0));
      assertFalse(timeSeriesCollection2.equals((Object)timeSeriesCollection1));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection2);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertNotSame(timeSeriesCollection2, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection2, timeSeriesCollection0);
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertTrue(timeSeriesCollection1.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertEquals(0, timeSeriesCollection2.getSeriesCount());
      assertTrue(timeSeriesCollection2.getNotify());
      
      // Undeclared exception!
      try { 
        timeSeriesCollection1.getStartY(913, 986);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 913, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(242).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      
      int int0 = (-1013);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getDomainBounds(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      int int0 = 29;
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartXValue(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeSeries0).toString();
      doReturn((Comparable) null).when(timeSeries0).getKey();
      doReturn(0).when(timeSeries0).getItemCount();
      doReturn((Number) null, (Number) null).when(timeSeries0).getValue(anyInt());
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(timeSeriesCollection0.getNotify());
      
      boolean boolean0 = false;
      timeSeriesCollection0.setNotify(false);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(timeSeriesCollection0.getNotify());
      
      double double0 = timeSeriesCollection0.getEndYValue(0, 0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(timeSeriesCollection0.getNotify());
      assertEquals(Double.NaN, double0, 0.01);
      
      Number number0 = timeSeriesCollection0.getEndY(0, 0);
      assertNull(number0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(timeSeriesCollection0.getNotify());
      
      double double1 = timeSeriesCollection0.getDomainUpperBound(true);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(timeSeriesCollection0.getNotify());
      assertEquals(Double.NaN, double1, 0.01);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeSeriesCollection0.indexOf(comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(timeZone0).clone();
      doReturn(0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0).when(timeZone0).getRawOffset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Comparable<TimeSeriesCollection> comparable0 = (Comparable<TimeSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      timeSeriesCollection0.getSeriesIndex(comparable0);
      Object object0 = timeSeriesCollection0.clone();
      timeSeriesCollection0.equals(object0);
      List list0 = timeSeriesCollection0.getSeries();
      timeSeriesCollection0.equals(list0);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      timeSeriesCollection0.vetoableChange(propertyChangeEvent0);
      timeSeriesCollection0.getDomainBounds(false);
      timeSeriesCollection0.removeChangeListener((DatasetChangeListener) null);
      timeSeriesCollection0.getSeries();
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (0).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }
}
