/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:30:26 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.Chronology;
import java.time.chrono.MinguoDate;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Month_ESTest extends Month_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 5;
      Month month0 = null;
      try {
        month0 = new Month(5, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Month month0 = new Month();
      month0.getStart();
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      locale0.toLanguageTag();
      month0.peg(mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1674, (-1670), 1102);
      mockGregorianCalendar1.getTime();
      month0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      mockGregorianCalendar1.set(1861, (-1701), 174, 999, (-1701), (-213));
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        mockGregorianCalendar1.roll(1861, (-945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusNanos(instant0, 0L);
      Date date0 = Date.from(instant1);
      Month month0 = new Month(date0);
      month0.getLastMillisecond();
      Calendar calendar0 = MockCalendar.getInstance();
      month0.peg(calendar0);
      month0.toString();
      month0.compareTo(date0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getFirstMillisecond();
      month0.getYearValue();
      regularTimePeriod0.peg(calendar0);
      month0.hashCode();
      Month month1 = (Month)month0.next();
      month0.hashCode();
      month0.getLastMillisecond(calendar0);
      month0.previous();
      month0.equals(date0);
      month0.getSerialIndex();
      month0.getFirstMillisecond();
      month0.compareTo(regularTimePeriod0);
      month0.getLastMillisecond();
      regularTimePeriod0.previous();
      month0.toString();
      month0.getLastMillisecond();
      month0.getMonth();
      month0.peg(calendar0);
      month0.hashCode();
      month0.hashCode();
      month0.equals(instant0);
      month0.getFirstMillisecond(calendar0);
      month0.equals(month0);
      month0.peg(calendar0);
      month0.getSerialIndex();
      month1.getYearValue();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Month month0 = new Month();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      month0.next();
      month0.toString();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.compareTo(regularTimePeriod0);
      month0.getYearValue();
      month0.previous();
      month0.getMonth();
      month0.getMonth();
      RegularTimePeriod regularTimePeriod1 = month0.next();
      month0.getLastMillisecond();
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      month0.peg(calendar1);
      month0.getYearValue();
      month0.compareTo(calendar0);
      month0.next();
      month0.compareTo(regularTimePeriod1);
      month0.getLastMillisecond();
      Month month1 = Month.parseMonth("February 2014");
      month0.peg(calendar1);
      month0.getLastMillisecond();
      RegularTimePeriod regularTimePeriod2 = month1.next();
      regularTimePeriod2.getStart();
      month0.compareTo("February 2014");
      month0.hashCode();
      month1.next();
      month1.getYear();
      month1.equals(month0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 14, 0, 9999, (-1), 0, 0, (-1), 60);
      String string0 = "qs";
      Locale locale0 = new Locale("", "QVeyIj", "qs");
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      simpleTimeZone0.inDaylightTime(date0);
      // Undeclared exception!
      try { 
        month0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1519), 2574, 1301, 46, (-870), 1301);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Date date0 = fixedMillisecond0.getTime();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Month month0 = new Month(date0, mockGregorianCalendar0);
      month0.previous();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      regularTimePeriod0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      month0.next();
      month0.toString();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.compareTo(regularTimePeriod0);
      month0.getYearValue();
      month0.previous();
      month0.getMonth();
      month0.getMonth();
      Month month1 = new Month(2, 2);
      month0.getLastMillisecond();
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      month0.peg(calendar1);
      month0.getYearValue();
      month0.compareTo(calendar0);
      month0.next();
      month0.compareTo(month1);
      month0.getLastMillisecond();
      Month month2 = Month.parseMonth("February 2014");
      month0.peg(calendar1);
      month0.getLastMillisecond();
      month2.next();
      month0.compareTo("February 2014");
      month0.hashCode();
      month2.next();
      month2.getYear();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-778), 0, (-778), (-1798), (-1798), (-1816));
      Instant instant0 = mockDate0.toInstant();
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      month0.getFirstMillisecond(calendar0);
      month0.getSerialIndex();
      month0.compareTo(date0);
      month0.hashCode();
      month0.equals(date0);
      // Undeclared exception!
      try { 
        Month.parseMonth(">n!Y'@`>uO$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayVariant();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      month0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      month0.getStart();
      RegularTimePeriod.getCalendarInstance();
      // Undeclared exception!
      try { 
        month0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 14, 0, 9999, (-1), 0, 0, (-1), 60);
      Locale locale0 = new Locale("", "QVeyIj", "eM");
      Month month0 = new Month(date0, simpleTimeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      simpleTimeZone0.inDaylightTime(date0);
      month0.getLastMillisecond(calendar0);
      month0.hashCode();
      month0.getFirstMillisecond();
      month0.next();
      month0.next();
      month0.compareTo("");
      // Undeclared exception!
      try { 
        Month.parseMonth("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      Month.parseMonth((String) null);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      String string1 = ", ";
      int int0 = 37;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(102, ", ", 421, (-5927), (-2771), (-5927), 12, 421, 37, 12, 1976, 1976, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 421
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusNanos(instant0, 0L);
      Date date0 = Date.from(instant1);
      Month month0 = new Month(date0);
      month0.getLastMillisecond();
      Calendar calendar0 = MockCalendar.getInstance();
      month0.peg(calendar0);
      month0.toString();
      month0.compareTo(date0);
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.getFirstMillisecond();
      month0.getYearValue();
      RegularTimePeriod regularTimePeriod1 = month0.previous();
      regularTimePeriod0.peg(calendar0);
      month0.getLastMillisecond(calendar0);
      month0.hashCode();
      Month month1 = (Month)month0.next();
      month0.hashCode();
      month0.getLastMillisecond(calendar0);
      month0.previous();
      month0.equals(date0);
      month0.getSerialIndex();
      month0.getFirstMillisecond();
      month0.compareTo(regularTimePeriod0);
      month0.getLastMillisecond();
      regularTimePeriod1.previous();
      month0.toString();
      month0.getLastMillisecond();
      month0.getMonth();
      month0.peg(calendar0);
      month0.hashCode();
      month0.hashCode();
      month0.equals(instant0);
      month0.getFirstMillisecond(calendar0);
      month0.equals(regularTimePeriod1);
      month0.peg(calendar0);
      month0.getSerialIndex();
      month1.getYearValue();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = new Month();
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1));
      Calendar calendar0 = MockCalendar.getInstance();
      Month month1 = new Month(mockDate0, calendar0);
      month0.equals(month1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Month month0 = new Month(date0, mockGregorianCalendar0);
      String string0 = "";
      Locale.forLanguageTag("");
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      month0.getYearValue();
      month0.toString();
      month0.previous();
      month0.previous();
      month0.getYear();
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(1582, (-672), (-2242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Month.parseMonth("Vy>'gJQ)V.-Kv%S_,nQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59, 59, 59);
      Month month0 = new Month(mockDate0);
      month0.getYearValue();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1964, 1964, 0, 59);
      Year year0 = new Year(mockDate0, mockGregorianCalendar0);
      month0.compareTo(year0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1104), 614, (-2032));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Date date0 = fixedMillisecond0.getTime();
      Instant instant0 = MockInstant.ofEpochSecond((long) (-1104), (long) (-1104));
      Date.from(instant0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(976, (-60), 976, (-2032), 614);
      mockGregorianCalendar0.setFirstDayOfWeek(614);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar0);
      Calendar calendar0 = null;
      Month month0 = null;
      try {
        month0 = new Month(date0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.getTimeZone();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Locale locale1 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.US;
      locale1.getDisplayVariant(locale2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      Set<String> set1 = ZoneId.getAvailableZoneIds();
      Locale.lookupTag(linkedList0, set1);
      locale0.getDisplayScript();
      locale0.getDisplayName(locale1);
      Month month0 = new Month(date0);
      month0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      month0.getMonth();
      month0.getLastMillisecond();
      month0.compareTo("");
      month0.getSerialIndex();
      month0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-778), 0, (-778), (-1798), (-1798), (-1816));
      Instant instant0 = mockDate0.toInstant();
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      month0.getSerialIndex();
      month0.compareTo(date0);
      month0.getYear();
      month0.hashCode();
      month0.equals(date0);
      month0.hashCode();
      // Undeclared exception!
      try { 
        Month.parseMonth(">n!Y'@`>uO$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Month month0 = new Month(date0);
      month0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(180L);
      Locale locale0 = Locale.UK;
      Month month0 = null;
      try {
        month0 = new Month(mockDate0, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-603L));
      mockDate0.clone();
      Month month0 = new Month(mockDate0);
      month0.getEnd();
      mockDate0.clone();
      month0.getEnd();
      // Undeclared exception!
      try { 
        Month.parseMonth(", jh*rTJd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Month month0 = new Month();
      // Undeclared exception!
      try { 
        Month.parseMonth("K1}Jh-Ak@D.wX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Month.parseMonth("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Date date0 = null;
      Month month0 = null;
      try {
        month0 = new Month((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Month month0 = new Month();
      month0.getStart();
      month0.getYear();
      month0.previous();
      month0.previous();
      month0.getYearValue();
      Calendar calendar0 = MockCalendar.getInstance();
      month0.getLastMillisecond(calendar0);
      month0.next();
      month0.peg(calendar0);
      month0.getLastMillisecond();
      Calendar calendar1 = null;
      // Undeclared exception!
      try { 
        month0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(2204, 2204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1201, (-1564), (-1564), 9999, (-1557));
      Month month0 = new Month(date0, mockGregorianCalendar0);
      month0.toString();
      month0.getSerialIndex();
      month0.toString();
      month0.equals(mockGregorianCalendar0);
      month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      month0.getMonth();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Month month0 = new Month();
      month0.getFirstMillisecond();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      month0.getLastMillisecond(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "q^Ys.WL~c";
      // Undeclared exception!
      try { 
        Month.parseMonth("q^Ys.WL~c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-1511), 1320, (-7), (-1511), (-2135));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      Month month0 = new Month(date0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      month0.getFirstMillisecond(calendar0);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date1).getTime();
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar1);
      Month month1 = new Month(date1, calendar1);
      month0.compareTo(month1);
      Calendar calendar2 = RegularTimePeriod.getCalendarInstance();
      month0.getLastMillisecond(calendar2);
      month1.compareTo(month0);
      month0.equals(calendar0);
      month0.previous();
      month1.getYear();
      month0.previous();
      month1.getLastMillisecond();
      month1.getYear();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 13);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Month month0 = new Month(date0);
      month0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      month0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-9999), (-9999), (-9999));
      mockDate0.setTime((-9999));
      Month month0 = new Month(mockDate0);
      month0.toString();
      Date date0 = month0.getEnd();
      month0.getYear();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      month0.compareTo(mockDate0);
      month0.getFirstMillisecond();
      mockDate0.clone();
      month0.getMonth();
      month0.compareTo(regularTimePeriod0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Week week0 = new Week(date0, calendar0);
      month0.equals(week0);
      Month month1 = Month.parseMonth("December 1969");
      month0.getMonth();
      month0.getLastMillisecond(calendar0);
      month1.compareTo(month0);
      month1.peg(calendar0);
      // Undeclared exception!
      try { 
        Month.parseMonth("HkiOosTMNR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(0, 443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      Locale locale0 = Locale.ENGLISH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Month month0 = new Month(date0, calendar0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2022), "Can't evaluate the month.");
      Calendar calendar1 = MockCalendar.getInstance();
      month0.getFirstMillisecond(calendar1);
      Day day0 = new Day(date0, simpleTimeZone0, locale0);
      day0.getMiddleMillisecond(calendar0);
      month0.equals(day0);
      RegularTimePeriod.setCalendarInstancePrototype(calendar1);
      month0.getYearValue();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1970, (-2022), 0, 1970, 0);
      month0.peg(mockGregorianCalendar0);
      month0.compareTo(date0);
      month0.next();
      month0.previous();
      month0.getLastMillisecond();
      month0.getYear();
      month0.peg(calendar0);
      month0.getFirstMillisecond();
      // Undeclared exception!
      try { 
        Month.parseMonth("Can't evaluate the month.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Year year0 = mock(Year.class, new ViolatedAssumptionAnswer());
      Month month0 = null;
      try {
        month0 = new Month((-222), year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = quarter0.getYear();
      Month month0 = null;
      try {
        month0 = new Month(23, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Year year0 = new Year((-16));
      Month month0 = null;
      try {
        month0 = new Month((-16), year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month(2723, (Year) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-9999), (-9999), (-9999));
      mockDate0.setTime((-9999));
      Month month0 = new Month(mockDate0);
      month0.toString();
      Date date0 = month0.getEnd();
      month0.getYear();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      month0.compareTo(mockDate0);
      month0.getFirstMillisecond();
      mockDate0.clone();
      int int0 = MonthConstants.MAY;
      month0.compareTo(regularTimePeriod0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      Week week0 = new Week(date0, calendar0);
      month0.equals(week0);
      Month month1 = Month.parseMonth("December 1969");
      month0.getMonth();
      month0.getLastMillisecond(calendar0);
      month1.compareTo(month0);
      month1.peg(calendar0);
      // Undeclared exception!
      try { 
        Month.parseMonth("HkiOosTMNR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Month month0 = new Month();
      month0.getMonth();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2326L));
      Date date0 = fixedMillisecond0.getTime();
      Locale locale0 = Locale.UK;
      Month month1 = new Month(date0, timeZone0, locale0);
      month1.getSerialIndex();
      Locale locale1 = Locale.ITALIAN;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale1);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Month month0 = null;
      try {
        month0 = new Month((-929), (-929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Month month0 = new Month();
      MockDate mockDate0 = new MockDate();
      Object object0 = new Object();
      month0.compareTo(object0);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        month0.getMiddleMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(9223372036854775807L).when(date0).getTime();
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(46, 46, 46).when(timeZone0).getOffset(anyLong());
      doReturn(2605, 2518, 46).when(timeZone0).getRawOffset();
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(2518, 46);
      Locale.lookup(linkedList0, linkedHashSet0);
      locale0.getDisplayCountry();
      Month month0 = new Month(date0, timeZone0, locale0);
      locale0.getUnicodeLocaleKeys();
      int int0 = 524;
      int int1 = 1124;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(524, 524, 524, 524, 524, 1124);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 524
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Month month0 = new Month();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      RegularTimePeriod.setCalendarInstancePrototype(calendar0);
      month0.next();
      month0.toString();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      month0.compareTo(regularTimePeriod0);
      month0.getYearValue();
      month0.previous();
      month0.getMonth();
      month0.getMonth();
      RegularTimePeriod regularTimePeriod1 = month0.next();
      month0.getLastMillisecond();
      Calendar calendar1 = RegularTimePeriod.getCalendarInstance();
      month0.peg(calendar1);
      month0.getYearValue();
      month0.compareTo(calendar0);
      month0.next();
      month0.compareTo(regularTimePeriod1);
      month0.getLastMillisecond();
      Month month1 = Month.parseMonth("February 2014");
      month0.peg(calendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      
      month0.getLastMillisecond();
      month1.next();
      month0.compareTo("February 2014");
      month0.hashCode();
      month1.next();
      Year year0 = month1.getYear();
      assertEquals(2014, year0.getYear());
  }
}
