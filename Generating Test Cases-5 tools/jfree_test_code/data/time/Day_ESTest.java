/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:38:13 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjuster;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Day_ESTest extends Day_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      day0.getMiddleMillisecond();
      MockZonedDateTime.now();
      RegularTimePeriod.getCalendarInstance();
      day0.getFirstMillisecond();
      day0.previous();
      day0.getFirstMillisecond();
      Day day1 = (Day)day0.next();
      day0.previous();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      Day day2 = new Day(mockDate0);
      day0.equals(day2);
      day0.toString();
      day2.getLastMillisecond();
      day0.hashCode();
      Object object0 = new Object();
      day2.equals(object0);
      Day day3 = (Day)day0.next();
      day0.getDayOfMonth();
      day0.getFirstMillisecond();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1039L);
      day0.equals(fixedMillisecond1);
      day0.getFirstMillisecond();
      Day day4 = (Day)day0.previous();
      day2.getFirstMillisecond();
      day0.compareTo(day4);
      day0.previous();
      day2.hashCode();
      day0.getFirstMillisecond();
      day2.getDayOfMonth();
      day2.getSerialIndex();
      day1.getDayOfMonth();
      day0.compareTo(day3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(366);
      Day day0 = new Day(3, 4, 1900);
      SerialDate serialDate0 = SerialDate.addYears(3, spreadsheetDate0);
      SerialDate serialDate1 = serialDate0.getEndOfCurrentMonth(spreadsheetDate0);
      day0.getSerialIndex();
      Day day1 = new Day();
      spreadsheetDate0.isOn(serialDate0);
      day0.toString();
      SerialDate serialDate2 = serialDate0.getNearestDayOfWeek(1);
      SerialDate.addYears(464, serialDate2);
      serialDate0.isOnOrAfter(serialDate2);
      serialDate1.isAfter(serialDate0);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      regularTimePeriod0.next();
      day0.getDayOfMonth();
      regularTimePeriod0.toString();
      // Undeclared exception!
      try { 
        serialDate1.getPreviousDayOfWeek(1148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1359L);
      Locale locale0 = Locale.GERMAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      Date date0 = fixedMillisecond0.getStart();
      Day day0 = new Day(date0);
      day0.next();
      day0.getDayOfMonth();
      day0.peg(calendar0);
      day0.hashCode();
      day0.hashCode();
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      day0.getSerialIndex();
      day0.toString();
      day0.getMonth();
      // Undeclared exception!
      try { 
        day0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Day", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 41, 41, 0);
      Day day0 = new Day();
      day0.getLastMillisecond();
      Day day1 = new Day();
      day1.toString();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(41);
      SerialDate serialDate0 = SerialDate.addDays(0, spreadsheetDate0);
      SerialDate serialDate1 = SerialDate.addMonths(0, serialDate0);
      Day day2 = new Day(serialDate1);
      Hour hour0 = new Hour(0, day2);
      Day day3 = hour0.getDay();
      day3.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Locale locale0 = new Locale("f=qaq,D-R5");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar1.toInstant();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      day0.getMiddleMillisecond();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      minute0.getFirstMillisecond((Calendar) gregorianCalendar0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      minute0.getLastMillisecond((Calendar) gregorianCalendar0);
      day0.getFirstMillisecond();
      day0.previous();
      day0.getFirstMillisecond();
      day0.previous();
      day0.next();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1726L));
      Date date0 = fixedMillisecond0.getEnd();
      Day day1 = new Day(date0);
      day0.equals(day1);
      day0.toString();
      day1.getLastMillisecond();
      day0.hashCode();
      Object object0 = new Object();
      day1.equals(object0);
      day0.next();
      day0.getDayOfMonth();
      day0.getFirstMillisecond();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1039L);
      day0.equals(fixedMillisecond1);
      day0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod1 = day0.previous();
      day1.getFirstMillisecond();
      day0.compareTo(regularTimePeriod1);
      day0.previous();
      day1.hashCode();
      day0.getFirstMillisecond();
      day1.getDayOfMonth();
      day1.getSerialIndex();
      regularTimePeriod0.getFirstMillisecond(calendar0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(0, second0);
      Minute minute0 = second0.getMinute();
      Day day0 = minute0.getDay();
      day0.next();
      millisecond0.getSecond();
      Class<Integer> class0 = Integer.class;
      String string0 = "kFWya4):WAJUNKsEq";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3374), "kFWya4):WAJUNKsEq", (-1067), (-318), 0, (-1), (-318), 0, (-318), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1067
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(330, 334, 330, 0, 334, 0);
      Calendar calendar0 = MockCalendar.getInstance();
      Minute minute0 = new Minute(mockDate0, calendar0);
      Day day0 = minute0.getDay();
      // Undeclared exception!
      try { 
        day0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Day", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 732, 1600);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      SerialDate serialDate1 = SerialDate.addDays(732, serialDate0);
      Day day0 = new Day(serialDate1);
      day0.getSerialDate();
      day0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Day day0 = new Day();
      day0.getFirstMillisecond();
      day0.getYear();
      day0.next();
      day0.getMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(870, 2014, 870, 0, 2014);
      Class<Second> class0 = Second.class;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1392409281320L);
      fixedMillisecond0.getEnd();
      TimeZone.getTimeZone("Can't evaluate the year.");
      List<Locale.LanguageRange> list0 = null;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-2418L), 0L);
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3658, "");
      Locale locale0 = Locale.forLanguageTag("wcE}");
      Day day0 = new Day(date0, simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        day0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Day", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Day day0 = new Day();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(date0);
      day0.compareTo(fixedMillisecond1);
      Day.parseDay("time");
      Class<Day> class0 = Day.class;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      RegularTimePeriod.createInstance(class0, date0, timeZone0, locale0);
      day0.getLastMillisecond();
      int int0 = 0;
      int int1 = 0;
      Day day1 = null;
      try {
        day1 = new Day(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Day day0 = null;
      try {
        day0 = new Day((SerialDate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'serialDate' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getStart();
      fixedMillisecond0.toString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-346), 1, 1, (-346), 1, 0);
      Day day0 = new Day(date0, mockGregorianCalendar0);
      day0.compareTo(date0);
      day0.compareTo(date0);
      day0.next();
      day0.previous();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(499L);
      Date date0 = fixedMillisecond0.getStart();
      Day day0 = new Day(date0);
      day0.getStart();
      Locale locale0 = Locale.CANADA_FRENCH;
      RegularTimePeriod.getCalendarInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      locale0.getExtensionKeys();
      mockGregorianCalendar0.getActualMaximum(0);
      day0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      day0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      day0.getYear();
      day0.getSerialIndex();
      day0.getYear();
      day0.getSerialDate();
      day0.previous();
      day0.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1449;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1449, "org.jfree.data.time.Day");
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayVariant();
      Day day0 = null;
      try {
        day0 = new Day((Date) null, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2499), 0, (-2499));
      MockDate mockDate1 = new MockDate(0, 1, 2855);
      mockDate0.after(mockDate1);
      mockDate0.toInstant();
      mockDate0.toInstant();
      MockDate.UTC(2855, 1667, 0, 2855, 0, 986);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1667, 0, 1241);
      Day day0 = null;
      try {
        day0 = new Day(mockDate0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      day0.getYear();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Day day0 = new Day();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      JapaneseEra japaneseEra0 = JapaneseEra.SHOWA;
      ChronoLocalDate chronoLocalDate0 = thaiBuddhistDate0.with((TemporalAdjuster) japaneseEra0);
      day0.compareTo(chronoLocalDate0);
      day0.previous();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Day day0 = new Day();
      day0.getMonth();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      int int0 = 2;
      int int1 = (-3302);
      int int2 = 0;
      day0.getMonth();
      RegularTimePeriod.getCalendarInstance();
      int int3 = 1595;
      int int4 = 11;
      int int5 = 0;
      String string0 = "yyyy-MM-dd";
      // Undeclared exception!
      try { 
        ZoneOffset.of("yyyy-MM-dd");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: yyyy-MM-dd
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Day day0 = null;
      try {
        day0 = new Day(23, (-3247), 2159);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Day day0 = null;
      try {
        day0 = new Day((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Day day0 = new Day();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1318, 0);
      day0.getLastMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Day day0 = new Day();
      // Undeclared exception!
      try { 
        day0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Day", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Day day0 = new Day();
      day0.getYear();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Day day0 = new Day();
      Locale locale0 = Locale.KOREA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      day0.getFirstMillisecond(calendar0);
      day0.previous();
      day0.next();
      day0.getSerialDate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hour hour0 = new Hour();
      Day day0 = hour0.getDay();
      day0.getFirstMillisecond();
      hour0.getYear();
      day0.toString();
      day0.toString();
      day0.hashCode();
      day0.next();
      day0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Day.parseDay((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Day day0 = null;
      try {
        day0 = new Day((-627), (-627), (-627));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Day day0 = new Day();
      Quarter quarter0 = new Quarter();
      day0.compareTo(quarter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(366);
      Day day0 = new Day(spreadsheetDate0);
      SerialDate serialDate0 = SerialDate.addYears(3, spreadsheetDate0);
      SerialDate serialDate1 = serialDate0.getEndOfCurrentMonth(spreadsheetDate0);
      day0.getSerialIndex();
      day0.previous();
      spreadsheetDate0.isOn(serialDate0);
      day0.toString();
      SerialDate serialDate2 = serialDate0.getNearestDayOfWeek(1);
      SerialDate.addYears(464, serialDate2);
      serialDate0.isOnOrAfter(serialDate2);
      serialDate1.isAfter(serialDate0);
      day0.previous();
      // Undeclared exception!
      try { 
        serialDate1.getPreviousDayOfWeek(1148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.chart.date.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1067);
      Second second0 = null;
      try {
        second0 = new Second((-1067), 0, 999, 999, 90, (-995));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(656L);
      MockDate.UTC((-1), (-1), 999, (-168), (-1090), (-168));
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Day day0 = new Day(serialDate0);
      Calendar calendar0 = MockCalendar.getInstance();
      day0.getMiddleMillisecond(calendar0);
      day0.hashCode();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      day0.getMillisecond(timePeriodAnchor0, calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.after(mockDate0);
      day0.getMonth();
      mockGregorianCalendar0.getTimeZone();
      day0.next();
      day0.peg(mockGregorianCalendar0);
      day0.toString();
      day0.previous();
      SerialDate serialDate1 = day0.getSerialDate();
      SerialDate.createInstance(1900);
      day0.getDayOfMonth();
      day0.equals(serialDate1);
      day0.getDayOfMonth();
      day0.getLastMillisecond();
      Day.parseDay("");
      Millisecond millisecond0 = new Millisecond(mockDate0);
      day0.equals(millisecond0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getEnd();
      TimeZone timeZone0 = TimeZone.getDefault();
      fixedMillisecond0.next();
      Locale locale0 = Locale.forLanguageTag("zone");
      Day day0 = new Day(date0, timeZone0, locale0);
      Locale locale1 = new Locale("zone");
      locale0.getDisplayName();
      locale0.getDisplayLanguage(locale1);
      day0.previous();
      SerialDate serialDate0 = day0.getSerialDate();
      day0.toString();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale1.getDisplayScript();
      day0.getStart();
      fixedMillisecond0.getTime();
      Locale.setDefault(locale_Category0, locale1);
      day0.previous();
      Day.parseDay("zone");
      Day.parseDay("zone");
      day0.compareTo(serialDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(483, 7, 3322, 2794, 0, 2);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getDisplayName(0, 0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      day0.getMiddleMillisecond();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      minute0.getFirstMillisecond((Calendar) gregorianCalendar0);
      RegularTimePeriod.getCalendarInstance();
      minute0.getLastMillisecond((Calendar) gregorianCalendar0);
      day0.getFirstMillisecond();
      day0.previous();
      day0.getFirstMillisecond();
      day0.previous();
      day0.next();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1726L));
      Date date0 = fixedMillisecond0.getEnd();
      Day day1 = new Day(date0);
      day0.equals(day1);
      day0.toString();
      day1.getLastMillisecond();
      day0.hashCode();
      Object object0 = new Object();
      day1.equals(object0);
      day0.next();
      day0.getDayOfMonth();
      day0.getFirstMillisecond();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1039L);
      day0.equals(fixedMillisecond1);
      day0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      day1.getFirstMillisecond();
      day0.compareTo(regularTimePeriod0);
      day0.previous();
      day1.hashCode();
      day1.getDayOfMonth();
      day1.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      day0.getMiddleMillisecond();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      gregorianCalendar0.getCalendarType();
      minute0.getFirstMillisecond((Calendar) gregorianCalendar0);
      RegularTimePeriod.getCalendarInstance();
      minute0.getLastMillisecond((Calendar) gregorianCalendar0);
      day0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      day0.getFirstMillisecond();
      regularTimePeriod0.previous();
      day0.next();
      day0.previous();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getEnd();
      Day day1 = new Day(date0);
      day0.equals(day1);
      day0.toString();
      day1.getLastMillisecond();
      day0.hashCode();
      Object object0 = new Object();
      day1.equals(object0);
      day0.next();
      day0.getDayOfMonth();
      day0.getFirstMillisecond();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1039L);
      day0.equals(fixedMillisecond1);
      day0.getFirstMillisecond();
      RegularTimePeriod regularTimePeriod1 = day0.previous();
      day1.getFirstMillisecond();
      day0.compareTo(regularTimePeriod1);
      day0.previous();
      day1.hashCode();
      day0.getFirstMillisecond();
      day1.getDayOfMonth();
      day1.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4390, 4390, 4390);
      mockGregorianCalendar0.isLeapYear((-7));
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      Date date0 = fixedMillisecond0.getEnd();
      Day day0 = new Day(date0);
      Day.parseDay("`6PG{=rKU");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Day day0 = new Day();
      Calendar calendar0 = MockCalendar.getInstance();
      day0.getMiddleMillisecond(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      
      day0.getMonth();
      day0.getStart();
      day0.hashCode();
      day0.getMonth();
      day0.getSerialIndex();
      day0.getMonth();
      day0.getDayOfMonth();
      int int0 = day0.compareTo("V!kv9gf`b\")Gh K@j");
      assertEquals(1, int0);
  }
}
