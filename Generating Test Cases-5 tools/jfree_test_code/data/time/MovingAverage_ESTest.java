/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:37:29 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.time.MovingAverage;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MovingAverage_ESTest extends MovingAverage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getSerialIndex();
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(regularTimePeriod1).getSerialIndex();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(6, 1).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0, regularTimePeriod1).when(timeSeries0).getTimePeriod(anyInt());
      String string0 = "\"#Sf?GQtbF";
      int int0 = 2485;
      int int1 = (-1469);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries0, "\"#Sf?GQtbF", 2485, (-1469));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getSerialIndex();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(6, 0).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      String string0 = "\"#Sf?GQtbF";
      int int0 = 2485;
      int int1 = (-1469);
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "\"#Sf?GQtbF", 2485, (-1469));
      String string1 = "[j^7@qr|6_s";
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, string1, int0);
      String string2 = null;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries2, string2, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((-1091)).when(timeSeriesCollection0).getItemCount(anyInt());
      MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection0, (-2834), "YP[5(PpI", 3.0, 3.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(5, 0).when(timeSeriesCollection0).getItemCount(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(timeSeriesCollection0).getXValue(anyInt() , anyInt());
      MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection0, (-2834), "YP[5(PpI", 3.0, 3.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "", 2);
      TimeSeries timeSeries2 = MovingAverage.createMovingAverage(timeSeries1, "", 2, 0);
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries2, (TimeSeries) null).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(2, 0, 0).when(timeSeriesCollection0).getSeriesCount();
      int int0 = 877;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "", 877, 0);
      String string0 = "9c5-M}hQDiS";
      int int1 = Integer.MAX_VALUE;
      int int2 = 0;
      TimeSeriesCollection timeSeriesCollection2 = MovingAverage.createMovingAverage(timeSeriesCollection1, "9c5-M}hQDiS", Integer.MAX_VALUE, 0);
      String string1 = "Y";
      int int3 = (-1);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection2, "Y", (-1), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getSerialIndex();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(11, 0).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "org.jfree.data.xy.CategoryTableXYDataset", 11, 11);
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, "org.jfree.data.xy.CategoryTableXYDataset", 11);
      int int0 = 1536;
      int int1 = 2140933976;
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries2, timeSeries2, timeSeries2, timeSeries1, timeSeries1).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(11, 11, 1536, 7, 2140933976).when(timeSeriesCollection0).getSeriesCount();
      String string0 = "periodCount must be greater than or equal to 2.";
      int int2 = 12;
      // Undeclared exception!
      MovingAverage.createMovingAverage(timeSeriesCollection0, "periodCount must be greater than or equal to 2.", 12, 12);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2140953954;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(2140953955L).when(regularTimePeriod0).getSerialIndex();
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2140953954, (-1)).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      int int1 = 1;
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "", 1, 1);
      String string0 = "p#1b&\"Z:mr";
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries1, "p#1b&\"Z:mr", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(regularTimePeriod0).getSerialIndex();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(877, 0).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "org.jfree.data.xy.CategoryTableXYDataset", 11, 11);
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, "org.jfree.data.xy.CategoryTableXYDataset", 11);
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries2, timeSeries2, timeSeries1, timeSeries1, timeSeries2).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(11, 877, 11, 11, 877).when(timeSeriesCollection0).getSeriesCount();
      String string0 = "periodCount must be greater than or equal to 2.";
      int int0 = 12;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "periodCount must be greater than or equal to 2.", 12, 12);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "periodCount must be greater than or equal to 2.", (-1.0), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(timeSeries0).getKey();
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries0).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(1, 0).when(timeSeriesCollection0).getSeriesCount();
      int int0 = 9;
      int int1 = 0;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, (String) null, 9, 0);
      int int2 = 10;
      TimeSeriesCollection timeSeriesCollection2 = MovingAverage.createMovingAverage(timeSeriesCollection1, "Duplicate key2", 9, 10);
      String string0 = "\\Nvl?]?&xeh[]R#";
      double double0 = (-188.96896384425);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection2, "Nvl?]?&xeh[]R#", (-188.96896384425), (-555.73139113042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "org.jfree.data.xy.CategoryTableXYDataset", 11, 11);
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, "org.jfree.data.xy.CategoryTableXYDataset", 11);
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries2, (TimeSeries) null, (TimeSeries) null, (TimeSeries) null, (TimeSeries) null).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(11, 0, 0, 0, 0).when(timeSeriesCollection0).getSeriesCount();
      String string0 = "periodCount must be greater than or equal to 2.";
      int int0 = 12;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "periodCount must be greater than or equal to 2.", 12, 12);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "periodCount must be greater than or equal to 2.", (-1.0), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2140953954;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(regularTimePeriod0).getSerialIndex();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2140953954, 0).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0, (RegularTimePeriod) null, (RegularTimePeriod) null, (RegularTimePeriod) null, (RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      int int1 = 1;
      // Undeclared exception!
      MovingAverage.createMovingAverage(timeSeries0, "", 1, 1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-2389)).when(timeSeries0).getItemCount();
      int int0 = 1;
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "", 1, 1);
      String string0 = "p#1b&\"Z:mr";
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries1, "p#1b&\"Z:mr", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-1589)).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "org.jfree.data.time.MovingAverage", 1559);
      TimeSeries timeSeries2 = MovingAverage.createMovingAverage(timeSeries1, "org.jfree.data.time.TimeSeriesDataItem", 1559, 1559);
      MovingAverage.createMovingAverage(timeSeries2, "", 67, (-655));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2144038250).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      String string0 = "hl:Z1?i<%D";
      int int0 = 29;
      int int1 = (-4130);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries0, "hl:Z1?i<%D", 29, (-4130));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2;
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TimeSeries) null).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(2).when(timeSeriesCollection0).getSeriesCount();
      String string0 = "@aA#wk|1xDt!v;Ni\\Wp";
      int int1 = 1;
      int int2 = 1005;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "@aA#wk|1xDt!v;NiWp", 1, 1005);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeriesCollection0).getItemCount(anyInt());
      MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection0, (-2834), "YP[5(PpI", 3.0, 3.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((TimeSeries) null).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(11).when(timeSeriesCollection0).getSeriesCount();
      String string0 = "periodCount must be greater than or equal to 2.";
      int int0 = 12;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "periodCount must be greater than or equal to 2.", 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 342;
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(342).when(timeSeries0).getItemCount();
      int int1 = 1559;
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries0, "org.jfree.data.time.MovingAverage", 1559);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((-553)).when(timeSeriesCollection0).getSeriesCount();
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "+FoZ{>", 2, 0);
      MovingAverage.createMovingAverage(timeSeriesCollection1, "+FoZ{>", 2, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      String string0 = "org.jfree.data.xy.XYDataItem";
      int int0 = 3;
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "org.jfree.data.xy.XYDataItem", 3, 3);
      String string1 = "";
      int int1 = 0;
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries1, "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createPointMovingAverage(timeSeries0, "+x", 6);
      TimeSeries timeSeries2 = MovingAverage.createMovingAverage(timeSeries1, "+x", 118, 118);
      MovingAverage.createPointMovingAverage(timeSeries2, "", 6);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "Vh$", 2670, 2670);
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, "Vh$", 2670);
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries2, "(dowcJB<4?,", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeriesCollection0).getSeriesCount();
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "", 2280, 2);
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "", (double) 2280, 0.0);
      XYDataset xYDataset1 = MovingAverage.createMovingAverage(xYDataset0, "", (long) 2280, (long) 2280);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(xYDataset1, 2280, "", 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeriesCollection0).getSeriesCount();
      String string0 = "";
      int int0 = 2892;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "", 2892, 2892);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, 2892, "", (double) 2892, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (2892).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeriesCollection0).getSeriesCount();
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "{u5{5uL$", 1536, 1536);
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "", 664.12876, 169.74);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(xYDataset0, 1536, "", 327.8796781266644, 327.8796781266644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeriesCollection0).getSeriesCount();
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "", 3049, 7);
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "", (-2274L), (long) 3049);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(xYDataset0, 3049, "", (double) 7, (double) (-2274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip must be >= 0.0.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1603);
      String string0 = "7d";
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) null, (-1603), "7d", 1820.7383727, (double) (-1603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = null;
      String string0 = "Zo32Oq@(2Km[xf)+";
      int int0 = (-2181);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((TimeSeriesCollection) null, "Zo32Oq@(2Km[xf)+", (-2181), (-2181));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      String string0 = "source";
      int int0 = 1382;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((TimeSeries) null, "source", 1382, 1382);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) null, "", 292.9118769744968, 292.9118769744968);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYDataset xYDataset0 = null;
      String string0 = "Tm!-\"7Qx)hhq|Ei";
      long long0 = 0L;
      long long1 = (-7L);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) null, "Tm!-\"7Qx)hhq|Ei", 0L, (-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      int int0 = (-3340);
      int int1 = 29;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries0, "", (-3340), 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MovingAverage movingAverage0 = new MovingAverage();
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((TimeSeriesCollection) null, "@G#f?q(Y/bW:m1kT. ", (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2140953954;
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((-2805L)).when(regularTimePeriod0).getSerialIndex();
      RegularTimePeriod regularTimePeriod1 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(regularTimePeriod1).getSerialIndex();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2140953954, 1879).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0, regularTimePeriod1).when(timeSeries0).getTimePeriod(anyInt());
      int int1 = 1;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeries0, "", 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      String string0 = "2zxuWo|wvReR";
      int int0 = (-1130);
      // Undeclared exception!
      try { 
        MovingAverage.createPointMovingAverage(timeSeries0, "2zxuWo|wvReR", (-1130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 2.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeriesCollection0).getSeriesCount();
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "P2l", 2, (-1218));
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "", (-2297.247464), Double.NEGATIVE_INFINITY);
      XYDataset xYDataset1 = MovingAverage.createMovingAverage(xYDataset0, "", (long) 2, (long) (-1218));
      MovingAverage.createMovingAverage(xYDataset1, "", (long) 2, 218L);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((TimeSeries) null, "H4XvGrKZ1vSAYY2", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      String string0 = "periodCount must be greater than or equal to 1.";
      int int0 = 0;
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "periodCount must be greater than or equal to 1.", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "", 2, 2344);
      int int0 = 11;
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, "", 11);
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries2).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(2, 0).when(timeSeriesCollection0).getSeriesCount();
      int int1 = 877;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "", 877, 0);
      String string0 = "9c5-M}hQDiS";
      int int2 = Integer.MAX_VALUE;
      int int3 = 0;
      TimeSeriesCollection timeSeriesCollection2 = MovingAverage.createMovingAverage(timeSeriesCollection1, "9c5-M}hQDiS", Integer.MAX_VALUE, 0);
      String string1 = "Y";
      int int4 = (-1);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection2, "Y", (-1), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(timeSeriesCollection0, "", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // periodCount must be greater than or equal to 1.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeries timeSeries1 = MovingAverage.createMovingAverage(timeSeries0, "", 2803, 2803);
      TimeSeries timeSeries2 = MovingAverage.createPointMovingAverage(timeSeries1, "/%D9 Zj", 2146880083);
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn(timeSeries2).when(timeSeriesCollection0).getSeries(anyInt());
      doReturn(1, 0).when(timeSeriesCollection0).getSeriesCount();
      int int0 = 9;
      int int1 = 0;
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, (String) null, 9, 0);
      int int2 = 10;
      TimeSeriesCollection timeSeriesCollection2 = MovingAverage.createMovingAverage(timeSeriesCollection1, "Duplicate key2", 9, 10);
      String string0 = "\\Nvl?]?&xeh[]R#";
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection2, "Nvl?]?&xeh[]R#", (-188.96896384425), (-555.73139113042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // period must be positive.
         //
         verifyException("org.jfree.data.time.MovingAverage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = mock(TimeSeriesCollection.class, new ViolatedAssumptionAnswer());
      doReturn((-3825)).when(timeSeriesCollection0).getSeriesCount();
      TimeSeriesCollection timeSeriesCollection1 = MovingAverage.createMovingAverage(timeSeriesCollection0, "{u5{5uL$", 1536, 1536);
      XYDataset xYDataset0 = MovingAverage.createMovingAverage((XYDataset) timeSeriesCollection1, "", 664.12876, 169.74);
      // Undeclared exception!
      try { 
        MovingAverage.createMovingAverage(xYDataset0, 1536, "", 327.8796781266644, 327.8796781266644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }
}
