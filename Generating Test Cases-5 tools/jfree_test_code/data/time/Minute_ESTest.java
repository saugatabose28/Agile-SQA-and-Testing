/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:01:22 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minute_ESTest extends Minute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = new Hour(date0);
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.getSerialIndex();
      day0.getYear();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      Date date1 = mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Class<Week> class0 = Week.class;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("*ArsEGM&'}HEt3c~", "*ArsEGM&'}HEt3c~", "zone");
      RegularTimePeriod.createInstance(class0, date1, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(regularTimePeriod0);
      minute0.next();
      regularTimePeriod0.getLastMillisecond();
      Minute minute1 = (Minute)minute0.next();
      minute1.getFirstMillisecond();
      minute1.getHour();
      minute1.compareTo(minute1);
      System.setCurrentTimeMillis(2324L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = minute0.getHour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      Date date1 = mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Minute minute1 = new Minute(date1);
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(minute1);
      minute1.getLastMillisecond();
      minute1.getFirstMillisecond();
      minute1.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Minute minute0 = new Minute();
      minute0.next();
      minute0.getHour();
      Duration.ofMinutes(0L);
      minute0.getHour();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3501, "The 'month' argument must be in the range 1 to 12.");
      Locale locale0 = Locale.PRC;
      minute0.getDay();
      Minute.parseMinute("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = new Hour(date0);
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      day0.getYear();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      Date date1 = mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Class<Week> class0 = Week.class;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("*ArsEGM&'}HEt3c~", "*ArsEGM&'}HEt3c~", "zone");
      RegularTimePeriod.createInstance(class0, date1, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(regularTimePeriod0);
      minute0.next();
      regularTimePeriod0.getLastMillisecond();
      Minute minute1 = (Minute)minute0.next();
      minute1.getFirstMillisecond();
      Minute minute2 = (Minute)minute1.previous();
      minute1.getHour();
      minute1.compareTo(minute2);
      System.setCurrentTimeMillis(2324L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(37, 37, 37);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(37, (-1267), 14, (-3206), 58, 4329);
      Minute minute0 = new Minute(mockDate0, mockGregorianCalendar0);
      minute0.getFirstMillisecond();
      mockGregorianCalendar0.setFirstDayOfWeek(37);
      minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      System.setCurrentTimeMillis(0);
      minute0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Class<Object> class0 = Object.class;
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedTime(formatStyle0);
      TemporalField[] temporalFieldArray0 = new TemporalField[8];
      ChronoField chronoField0 = ChronoField.MINUTE_OF_DAY;
      temporalFieldArray0[0] = (TemporalField) chronoField0;
      ChronoField chronoField1 = ChronoField.PROLEPTIC_MONTH;
      temporalFieldArray0[1] = (TemporalField) chronoField1;
      ChronoField chronoField2 = ChronoField.CLOCK_HOUR_OF_AMPM;
      temporalFieldArray0[2] = (TemporalField) chronoField2;
      ChronoField chronoField3 = ChronoField.DAY_OF_MONTH;
      temporalFieldArray0[3] = (TemporalField) chronoField3;
      ChronoField chronoField4 = ChronoField.AMPM_OF_DAY;
      temporalFieldArray0[4] = (TemporalField) chronoField4;
      ChronoField chronoField5 = ChronoField.DAY_OF_MONTH;
      temporalFieldArray0[5] = (TemporalField) chronoField5;
      ChronoField chronoField6 = ChronoField.DAY_OF_YEAR;
      temporalFieldArray0[6] = (TemporalField) chronoField6;
      ChronoField chronoField7 = ChronoField.SECOND_OF_MINUTE;
      temporalFieldArray0[7] = (TemporalField) chronoField7;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withResolverFields(temporalFieldArray0);
      dateTimeFormatter1.getZone();
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = minute0.getHour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      Date date1 = mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Minute minute1 = new Minute(date1);
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(minute1);
      minute1.getLastMillisecond();
      minute0.next();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = minute0.getHour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(minute0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = minute0.getHour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2465), 0, 0, 45, 45, (-351));
      mockDate0.toInstant();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date.from(instant0);
      mockDate0.clone();
      mockDate0.setTime(0L);
      Minute minute0 = new Minute(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(45, 17, 45, (-2465), 11);
      mockGregorianCalendar0.getTimeInMillis();
      minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      minute0.getSerialIndex();
      minute0.getHour();
      minute0.getHour();
      minute0.getHourValue();
      minute0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      minute0.peg(mockGregorianCalendar0);
      minute0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      minute0.hashCode();
      minute0.getMinute();
      minute0.next();
      minute0.peg(mockGregorianCalendar0);
      minute0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2486L);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      Calendar calendar0 = null;
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, (Calendar) null);
      Date date0 = fixedMillisecond0.getTime();
      Minute minute0 = new Minute(date0);
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      RegularTimePeriod.createInstance(class0, date0, timeZone0, locale0);
      RegularTimePeriod.setCalendarInstancePrototype((Calendar) null);
      minute0.getMinute();
      minute0.getLastMillisecond();
      // Undeclared exception!
      try { 
        minute0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.compareTo((Object) null);
      minute0.getHour();
      Date date0 = minute0.getStart();
      minute0.getMiddleMillisecond();
      minute0.compareTo((Object) null);
      Class<Minute> class0 = Minute.class;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_TIME;
      DateTimeFormatter.parsedExcessDays();
      Locale locale0 = dateTimeFormatter0.getLocale();
      RegularTimePeriod.createInstance(class0, date0, timeZone0, locale0);
      minute0.getMinute();
      minute0.getHour();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      regularTimePeriod0.getSerialIndex();
      minute0.getEnd();
      minute0.equals(regularTimePeriod0);
      minute0.getStart();
      minute0.getFirstMillisecond();
      minute0.previous();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minute.parseMinute("8TFS|`yk9!d$Tg~2");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 363;
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getLeastMaximum(304);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 304
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      minute0.getMinute();
      Hour hour0 = minute0.getHour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      minute0.previous();
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      minute0.peg(calendar0);
      minute0.equals(instant0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 17, 0);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      Minute minute0 = new Minute(mockDate0, calendar0);
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Duration duration0 = Duration.ofSeconds((-1067L), (-1067L));
      Duration duration1 = duration0.plusNanos(0L);
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) duration1);
      Date.from(instant1);
      Second.parseSecond("XHVl@q");
      minute0.compareTo((Object) null);
      minute0.getSerialIndex();
      minute0.getHour();
      minute0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      Hour hour0 = new Hour(mockDate0, timeZone0, locale0);
      Date date0 = hour0.getStart();
      Minute minute0 = new Minute(date0);
      locale0.getUnicodeLocaleAttributes();
      minute0.getDay();
      minute0.previous();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(328, 59, 212, 0, (-214), 0);
      day0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      minute0.compareTo(day0);
      minute0.hashCode();
      // Undeclared exception!
      try { 
        minute0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.getLastMillisecond();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      minute0.getLastMillisecond(calendar0);
      minute0.peg(calendar0);
      minute0.getMinute();
      minute0.getFirstMillisecond(calendar0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Minute.parseMinute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.hashCode();
      Locale locale0 = Locale.forLanguageTag("[S#");
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      RegularTimePeriod.setCalendarInstancePrototype(mockGregorianCalendar0);
      minute0.getMinute();
      minute0.next();
      minute0.getDay();
      minute0.getDay();
      minute0.getSerialIndex();
      Minute.parseMinute(">c%n\"");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calendar calendar0 = null;
      Minute minute0 = null;
      try {
        minute0 = new Minute((Date) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(787, 787, 787);
      Hour hour0 = new Hour(mockDate0);
      Date date0 = hour0.getStart();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(787, "hour");
      Locale locale0 = Locale.CHINESE;
      Minute minute0 = new Minute(date0, simpleTimeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      minute0.peg(calendar0);
      minute0.getLastMillisecond();
      minute0.getLastMillisecond(calendar0);
      minute0.hashCode();
      minute0.hashCode();
      minute0.getDay();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      fixedMillisecond0.getMillisecond(timePeriodAnchor0, calendar0);
      minute0.equals(fixedMillisecond0);
      minute0.getLastMillisecond();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      MockDate.UTC(0, (-624), 23, (-2073), 0, 2505);
      Minute minute0 = new Minute(11, hour0);
      hour0.next();
      minute0.getHourValue();
      // Undeclared exception!
      try { 
        minute0.getLastMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minute minute0 = new Minute();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      RegularTimePeriod.setThreadLocalCalendarInstance(calendar0);
      minute0.getHour();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      Minute minute0 = new Minute(date0);
      Quarter quarter0 = new Quarter(date0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(244, 0, 264, 264, 12);
      RegularTimePeriod.setThreadLocalCalendarInstance(mockGregorianCalendar1);
      minute0.peg(mockGregorianCalendar1);
      quarter0.getMiddleMillisecond();
      minute0.equals(quarter0);
      minute0.toString();
      minute0.getHour();
      minute0.hashCode();
      minute0.getSerialIndex();
      minute0.getHour();
      minute0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour((-679), day0);
      Date date0 = hour0.getStart();
      Minute minute0 = new Minute(date0);
      Day day1 = minute0.getDay();
      Calendar calendar0 = MockCalendar.getInstance();
      day1.getFirstMillisecond(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      minute0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      day1.compareTo(minute0);
      minute0.equals(day1);
      hour0.getEnd();
      minute0.compareTo(hour0);
      minute0.getSerialIndex();
      Minute.parseMinute("locale");
      minute0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2871), (-2915), 567);
      Minute minute0 = null;
      try {
        minute0 = new Minute(mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hour hour0 = null;
      Minute minute0 = null;
      try {
        minute0 = new Minute((-826), (Hour) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hour' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minute minute0 = new Minute();
      Object object0 = new Object();
      minute0.compareTo(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-597));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-597), 1705, (-1079));
      Second second0 = new Second(mockDate0, mockGregorianCalendar0);
      Millisecond millisecond0 = new Millisecond((-597), second0);
      Second second1 = millisecond0.getSecond();
      mockGregorianCalendar0.getTimeInMillis();
      Minute minute0 = second1.getMinute();
      millisecond0.toString();
      Minute minute1 = second1.getMinute();
      minute1.toString();
      minute1.next();
      millisecond0.peg(mockGregorianCalendar0);
      millisecond0.previous();
      mockGregorianCalendar0.setTime(mockDate0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.END;
      minute0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar0);
      minute1.getDay();
      minute1.getLastMillisecond();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.clear((-1079));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1079
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.getDay();
      minute0.getLastMillisecond();
      minute0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minute minute0 = new Minute();
      minute0.getDay();
      minute0.getFirstMillisecond();
      Week week0 = null;
      try {
        week0 = new Week((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(59, second0);
      millisecond0.getSecond();
      millisecond0.getSecond();
      // Undeclared exception!
      try { 
        Second.parseSecond((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(24L);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(53, hour0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hour.parseHour("");
      Minute minute0 = null;
      try {
        minute0 = new Minute(0, (Hour) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hour' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = null;
      try {
        minute0 = new Minute(0, 0, 2495, 0, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      Minute minute0 = new Minute(mockDate0, calendar0);
      minute0.next();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("time", 1.0);
      linkedList0.add(locale_LanguageRange0);
      locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(linkedList0, set0);
      Minute minute0 = null;
      try {
        minute0 = new Minute((Date) null, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        Minute.parseMinute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 0, 0, 59, 59);
      minute0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      minute0.hashCode();
      minute0.getHourValue();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minute.parseMinute("Q[4x}4jx");
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(0, 0, 274, 59, 274, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      Minute minute0 = new Minute(date0);
      Date date1 = fixedMillisecond0.getTime();
      minute0.hashCode();
      Class<Minute> class0 = Minute.class;
      String string0 = "d+C(";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(59, "d+C(");
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      Locale.getISOCountries();
      RegularTimePeriod.createInstance(class0, date1, simpleTimeZone0, locale1);
      minute0.previous();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      // Undeclared exception!
      try { 
        DateTimeFormatter.ofPattern("d+C(", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown pattern letter: C
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = new Hour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      day0.getYear();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-841), 59, 1, 0, 59);
      Date date1 = mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Class<Week> class0 = Week.class;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("*ArsEGM&'}HEt3c~", "*ArsEGM&'}HEt3c~", "zone");
      RegularTimePeriod.createInstance(class0, date1, timeZone0, locale0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      minute0.getLastMillisecond();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      minute0.compareTo(regularTimePeriod0);
      minute0.next();
      regularTimePeriod0.getLastMillisecond();
      Minute minute1 = (Minute)minute0.next();
      minute1.getFirstMillisecond();
      Minute minute2 = (Minute)minute1.previous();
      minute1.getHour();
      minute1.compareTo(minute2);
      System.setCurrentTimeMillis(2324L);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minute minute0 = null;
      try {
        minute0 = new Minute(58, (-1137), (-169), 58, (-1922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      minute0.getMinute();
      minute0.compareTo(day0);
      minute0.getSerialIndex();
      System.setCurrentTimeMillis(0L);
      minute0.next();
      Minute.parseMinute(".#*qWjqpOG");
      Minute.parseMinute(".#*qWjqpOG");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-945L));
      Minute minute0 = new Minute();
      minute0.getFirstMillisecond();
      minute0.compareTo(instant0);
      Hour hour0 = minute0.getHour();
      Day day0 = minute0.getDay();
      minute0.getHourValue();
      minute0.hashCode();
      minute0.getSerialIndex();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-852), 59, 1, 0, 59);
      mockGregorianCalendar0.getTime();
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      minute0.compareTo(day0);
      minute0.equals(instant0);
      int int0 = minute0.compareTo(regularTimePeriod0);
      assertEquals(1, int0);
      
      regularTimePeriod0.getLastMillisecond();
      RegularTimePeriod regularTimePeriod1 = minute0.next();
      regularTimePeriod1.previous();
      assertFalse(minute0.equals((Object)regularTimePeriod0));
  }
}
