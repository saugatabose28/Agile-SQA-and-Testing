/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:23:52 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValue_ESTest extends TimePeriodValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(177L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Double double0 = new Double(177L);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) regularTimePeriod0, (Number) double0);
      timePeriodValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, 604.69677397905);
      timePeriodValue0.setValue((Number) null);
      Number number0 = timePeriodValue0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (Number) 0);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1062L));
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 0.0);
      Float float0 = new Float((double) (-1062L));
      timePeriodValue0.setValue(float0);
      Number number0 = timePeriodValue0.getValue();
      assertEquals((-1062.0F), number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Short short0 = new Short((short)59);
      TimePeriodValue timePeriodValue0 = null;
      try {
        timePeriodValue0 = new TimePeriodValue((TimePeriod) null, (Number) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = null;
      try {
        timePeriodValue0 = new TimePeriodValue((TimePeriod) null, (double) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      Quarter quarter1 = (Quarter)timePeriodValue0.getPeriod();
      assertEquals(1, quarter1.getQuarter());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      Number number0 = timePeriodValue0.getValue();
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, (Number) null);
      timePeriodValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, (Number) null);
      TimePeriodValue timePeriodValue1 = new TimePeriodValue((TimePeriod) day0, (Number) 1);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      Object object0 = timePeriodValue0.clone();
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, (Number) null);
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      TimePeriodValue timePeriodValue1 = new TimePeriodValue(week0, (Number) null);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timePeriodValue0.equals(quarter0.FIRST_QUARTER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timePeriodValue0.equals(timePeriodValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 1);
      timePeriodValue0.setValue(4);
      Object object0 = timePeriodValue0.clone();
      assertTrue(object0.equals((Object)timePeriodValue0));
      
      timePeriodValue0.setValue(1);
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertFalse(object0.equals((Object)timePeriodValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, (Number) null);
      Object object0 = timePeriodValue0.clone();
      boolean boolean0 = timePeriodValue0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(day0, (Number) null);
      String string0 = timePeriodValue0.toString();
      assertEquals("TimePeriodValue[14-February-2014,null]", string0);
  }
}
