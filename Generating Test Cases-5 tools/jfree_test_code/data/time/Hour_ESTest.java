/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:56:20 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ThaiBuddhistChronology;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistChronology;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.date.MonthConstants;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Hour_ESTest extends Hour_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.previous();
      hour0.getMonth();
      hour0.getDayOfMonth();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      hour0.toString();
      hour0.getLastMillisecond(calendar0);
      hour0.toString();
      hour0.getYear();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.add(14, 20);
      hour0.peg(mockGregorianCalendar0);
      hour0.getDayOfMonth();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 4311, 0);
      hour0.previous();
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      hour0.getYear();
      hour0.getLastMillisecond();
      locale1.getUnicodeLocaleAttributes();
      hour0.equals(timeZone0);
      hour0.compareTo(locale1);
      hour0.getMonth();
      hour0.getFirstMillisecond();
      hour0.previous();
      Hour hour1 = new Hour();
      hour0.equals(hour1);
      hour0.toString();
      hour0.getMonth();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.previous();
      hour0.getMonth();
      hour0.getDayOfMonth();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      calendar0.setTimeInMillis((-2067L));
      hour0.toString();
      hour0.getLastMillisecond(calendar0);
      hour0.toString();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.add(14, 0);
      hour0.peg(mockGregorianCalendar0);
      hour0.getDayOfMonth();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      hour0.previous();
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      hour0.getLastMillisecond();
      locale1.getUnicodeLocaleAttributes();
      hour0.equals(timeZone0);
      int int0 = MonthConstants.JULY;
      hour0.getMonth();
      hour0.getFirstMillisecond();
      hour0.previous();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      hour0.equals(regularTimePeriod0);
      hour0.toString();
      regularTimePeriod0.previous();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((long) 3265);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.clone();
      locale1.getScript();
      locale0.getDisplayVariant(locale1);
      Day day0 = new Day(date0, timeZone0, locale0);
      day0.getStart();
      Hour hour0 = new Hour(3265, day0);
      locale0.getScript();
      Calendar calendar0 = MockCalendar.getInstance();
      day0.peg(calendar0);
      day0.next();
      hour0.getLastMillisecond(calendar0);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      hour0.getLastMillisecond();
      day0.getLastMillisecond(calendar0);
      hour0.getFirstMillisecond();
      hour0.getFirstMillisecond(calendar0);
      hour0.toString();
      hour0.getHour();
      hour0.getDayOfMonth();
      hour0.getHour();
      hour0.equals(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      hour0.peg(mockGregorianCalendar0);
      hour0.toString();
      hour0.getYear();
      hour0.getMonth();
      hour0.compareTo("[-63,1/1/1970]");
      hour0.toString();
      Hour.parseHour("");
      hour0.next();
      Hour.parseHour("time");
      ((Hour) regularTimePeriod0).compareTo(day0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((long) 3265);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.clone();
      locale1.getScript();
      locale0.getDisplayVariant(locale1);
      Day day0 = new Day(date0, timeZone0, locale0);
      day0.getStart();
      Hour hour0 = new Hour(3265, day0);
      locale0.getScript();
      Calendar calendar0 = MockCalendar.getInstance();
      day0.peg(calendar0);
      day0.next();
      hour0.getLastMillisecond(calendar0);
      hour0.previous();
      hour0.getLastMillisecond();
      day0.getLastMillisecond(calendar0);
      hour0.getFirstMillisecond();
      hour0.getFirstMillisecond(calendar0);
      hour0.toString();
      hour0.getHour();
      hour0.getDayOfMonth();
      hour0.getHour();
      hour0.equals(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 0, 3265, 1, 3265, (-63));
      hour0.peg(mockGregorianCalendar0);
      hour0.toString();
      hour0.getYear();
      hour0.getMonth();
      hour0.compareTo("[-63,1/1/1970]");
      hour0.toString();
      Hour.parseHour("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.previous();
      hour0.getMonth();
      hour0.getDayOfMonth();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      hour0.toString();
      hour0.getLastMillisecond(calendar0);
      hour0.toString();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.add(14, 0);
      hour0.peg(mockGregorianCalendar0);
      hour0.getDayOfMonth();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 4311, 0);
      hour0.previous();
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      hour0.getYear();
      hour0.getLastMillisecond();
      locale1.getUnicodeLocaleAttributes();
      hour0.equals(timeZone0);
      hour0.compareTo(locale1);
      hour0.getMonth();
      hour0.getFirstMillisecond();
      hour0.previous();
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      hour0.equals(regularTimePeriod0);
      hour0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.previous();
      int int0 = (-1596);
      hour0.previous();
      hour0.getDayOfMonth();
      hour0.getDayOfMonth();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        hour0.peg((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod.setCalendarInstancePrototype((Calendar) null);
      hour0.equals((Object) null);
      hour0.getYear();
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2014, 0, 0, 23, 0, 23);
      mockGregorianCalendar0.toInstant();
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      locale0.getDisplayVariant((Locale) null);
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayName(locale1);
      mockGregorianCalendar1.clone();
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar();
      mockGregorianCalendar2.after(hour0);
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(date0, mockGregorianCalendar2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((long) 3265);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.clone();
      locale1.getScript();
      locale0.getDisplayVariant(locale1);
      Day day0 = new Day(date0, timeZone0, locale0);
      day0.getStart();
      Hour hour0 = new Hour(3265, day0);
      locale0.getScript();
      Calendar calendar0 = MockCalendar.getInstance();
      day0.peg(calendar0);
      day0.next();
      hour0.getLastMillisecond(calendar0);
      hour0.previous();
      hour0.getLastMillisecond();
      day0.getLastMillisecond(calendar0);
      hour0.getFirstMillisecond();
      hour0.getFirstMillisecond(calendar0);
      hour0.toString();
      hour0.getHour();
      hour0.getDayOfMonth();
      hour0.getHour();
      hour0.equals(calendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      hour0.peg(mockGregorianCalendar0);
      hour0.toString();
      hour0.getYear();
      hour0.getMonth();
      hour0.compareTo("[-63,1/1/1970]");
      hour0.toString();
      Hour hour1 = new Hour();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      hour0.next();
      hour0.getSerialIndex();
      hour0.getMonth();
      hour0.next();
      hour0.getMonth();
      hour0.getHour();
      hour0.getHour();
      RegularTimePeriod.getCalendarInstance();
      hour0.hashCode();
      hour0.getFirstMillisecond();
      hour0.hashCode();
      hour0.toString();
      hour0.getSerialIndex();
      hour0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod.setThreadLocalCalendarInstance((Calendar) null);
      // Undeclared exception!
      try { 
        hour0.getFirstMillisecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(17, 17, 1);
      Hour hour0 = new Hour(mockDate0);
      hour0.getLastMillisecond();
      mockDate0.toInstant();
      hour0.compareTo((Object) null);
      hour0.getYear();
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getTimeZone("day");
      Locale locale0 = new Locale("day", "day", "day");
      locale0.toLanguageTag();
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(true, 619, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 619
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      mockGregorianCalendar0.roll(0, true);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Locale locale0 = Locale.JAPANESE;
      locale0.getExtensionKeys();
      Hour hour0 = null;
      try {
        hour0 = new Hour(date0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(17, day0);
      hour0.getMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, (-1), 0, 23, 0, 0);
      hour0.peg(mockGregorianCalendar0);
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      hour0.getStart();
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("v]%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1344);
      Date date0 = spreadsheetDate0.toDate();
      Hour hour0 = new Hour(date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      hour0.compareTo("");
      hour0.getDay();
      mockGregorianCalendar0.getActualMaximum(10);
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      locale0.getUnicodeLocaleKeys();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      TimeZone timeZone1 = mockGregorianCalendar0.getTimeZone();
      mockGregorianCalendar0.toInstant();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone1);
      hour0.getMillisecond(timePeriodAnchor0, mockGregorianCalendar1);
      RegularTimePeriod.getCalendarInstance();
      hour0.getDayOfMonth();
      hour0.getYear();
      hour0.getFirstMillisecond();
      hour0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2154);
      Date date0 = fixedMillisecond0.getTime();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Day day0 = new Day(date0, mockGregorianCalendar0);
      Hour hour0 = new Hour(2154, day0);
      hour0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(1245, day0);
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        Hour.parseHour((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calendar calendar0 = null;
      Hour hour0 = null;
      try {
        hour0 = new Hour((Date) null, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hour hour0 = null;
      try {
        hour0 = new Hour((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      hour0.compareTo(gregorianCalendar0);
      hour0.getLastMillisecond((Calendar) gregorianCalendar0);
      hour0.getSerialIndex();
      hour0.getDayOfMonth();
      hour0.toString();
      hour0.previous();
      hour0.getDay();
      hour0.getFirstMillisecond((Calendar) gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 44;
      Hour hour0 = null;
      try {
        hour0 = new Hour(44, (Day) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'day' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Date date0 = fixedMillisecond0.getTime();
      Hour hour0 = new Hour(date0);
      hour0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hour hour0 = null;
      try {
        hour0 = new Hour(2532, 2532, 244, 2532);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = new Locale("Third");
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayName(locale1);
      MockDate.UTC(0, 1217, (-146), 52, 52, 0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Hour hour0 = new Hour(mockDate0, calendar0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      locale1.getDisplayLanguage(locale0);
      hour0.getMillisecond(timePeriodAnchor0, calendar0);
      hour0.getHour();
      hour0.getYear();
      hour0.getSerialIndex();
      hour0.next();
      hour0.equals("third");
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      regularTimePeriod0.getStart();
      hour0.compareTo(regularTimePeriod0);
      hour0.toString();
      hour0.getLastMillisecond();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2527), 20, 1217, 2014, 0);
      hour0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        MockLocalDate.of(1217, 1883, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 1883
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hour hour0 = null;
      try {
        hour0 = new Hour((-76), (-76), 432, (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.chart.date.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2397), (-2397), 98);
      mockDate0.getTime();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.roll((-2314), (-2397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 0, 401);
      Day day0 = new Day();
      Date date0 = day0.getStart();
      hour0.getDayOfMonth();
      mockGregorianCalendar0.toZonedDateTime();
      RegularTimePeriod.getCalendarInstance();
      Hour hour1 = new Hour(date0, mockGregorianCalendar0);
      hour0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      mockGregorianCalendar0.after(hour1);
      hour0.peg(mockGregorianCalendar0);
      hour1.toString();
      hour1.toString();
      RegularTimePeriod.getCalendarInstance();
      hour0.next();
      Hour.parseHour("org.jfree.data.time.Minute");
      hour1.getSerialIndex();
      hour0.peg(mockGregorianCalendar0);
      hour0.getMonth();
      hour1.toString();
      hour0.getMonth();
      hour0.getSerialIndex();
      hour0.next();
      hour0.getFirstMillisecond();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "-Z'={kYU8!@DkV~)";
      Hour.parseHour("-Z'={kYU8!@DkV~)");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(23);
      Hour.parseHour("@-VF!,R4=v");
      // Undeclared exception!
      try { 
        MockZonedDateTime.of((-2086), 0, 3231, 165, 0, (-2086), 165, (ZoneId) zoneOffset0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(687, 687, 999, 999, 17);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Quarter outside valid range.");
      Instant instant0 = MockInstant.ofEpochSecond(53L);
      Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      Hour hour0 = new Hour(mockDate0, simpleTimeZone0, locale0);
      hour0.hashCode();
      Second.parseSecond("");
      hour0.equals((Object) null);
      hour0.getMonth();
      hour0.getMonth();
      hour0.getMonth();
      hour0.getMonth();
      hour0.getDay();
      hour0.previous();
      hour0.getDay();
      hour0.getHour();
      hour0.getSerialIndex();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.previous();
      hour0.getMonth();
      hour0.getDayOfMonth();
      Calendar calendar0 = RegularTimePeriod.getCalendarInstance();
      hour0.toString();
      hour0.getLastMillisecond(calendar0);
      hour0.toString();
      hour0.getYear();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.add(14, 0);
      hour0.peg(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      hour0.getDayOfMonth();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 4311, 0);
      hour0.previous();
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar1);
      hour0.getYear();
      hour0.getLastMillisecond();
      locale1.getUnicodeLocaleAttributes();
      hour0.equals(timeZone0);
      hour0.compareTo(locale1);
      hour0.getMonth();
      hour0.getFirstMillisecond();
      Hour hour1 = (Hour)hour0.previous();
      hour1.getYear();
      Hour hour2 = (Hour)hour0.previous();
      hour0.equals(hour2);
      String string0 = hour0.toString();
      assertEquals("[20,14/2/2014]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLIS;
      Hour hour0 = Hour.parseHour("");
      assertNull(hour0);
  }
}
