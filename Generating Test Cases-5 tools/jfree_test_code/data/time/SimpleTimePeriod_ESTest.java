/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:36:10 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.time.SimpleTimePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleTimePeriod_ESTest extends SimpleTimePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(3356L, 3356L);
      simpleTimePeriod0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-3255L), 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod0);
      assertEquals(0, int0);
      assertEquals((-3255L), simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(3356L, 3356L);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(3356L, long0);
      assertEquals(3356L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-3255L), 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals((-3255L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(3356L, 3356L);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals(3356L, long0);
      assertEquals(3356L, simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2660L), (-2660L));
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals((-2660L), simpleTimePeriod0.getStartMillis());
      assertEquals((-2660L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(159L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(0L, 1L);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod1);
      assertEquals(0L, simpleTimePeriod1.getStartMillis());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 2L);
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(1L, 1L);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod1);
      assertEquals((-1), int0);
      assertEquals(2L, simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod((-475L), 0L);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod1);
      assertEquals(1, int0);
      assertEquals(0L, simpleTimePeriod1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-972L), (-972L));
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(0L, 0L);
      int int0 = simpleTimePeriod0.compareTo(simpleTimePeriod1);
      assertEquals((-1), int0);
      assertEquals((-972L), simpleTimePeriod0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(date0, date0);
      boolean boolean0 = simpleTimePeriod0.equals(simpleTimePeriod1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(2021L, 2021L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(60L, 511L);
      boolean boolean0 = simpleTimePeriod0.equals(simpleTimePeriod1);
      assertEquals(511L, simpleTimePeriod1.getEndMillis());
      assertEquals(60L, simpleTimePeriod1.getStartMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-972L), (-972L));
      boolean boolean0 = simpleTimePeriod0.equals("G,~~a(K2");
      assertEquals((-972L), simpleTimePeriod0.getEndMillis());
      assertFalse(boolean0);
      assertEquals((-972L), simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      boolean boolean0 = simpleTimePeriod0.equals(simpleTimePeriod0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(0L, 1L);
      boolean boolean0 = simpleTimePeriod1.equals(simpleTimePeriod0);
      assertFalse(boolean0);
      assertEquals(0L, simpleTimePeriod1.getStartMillis());
      assertEquals(1L, simpleTimePeriod1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(9223372036854775807L, (-2567L)).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      long long0 = simpleTimePeriod0.getEndMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      long long0 = simpleTimePeriod0.getStartMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      Date date1 = simpleTimePeriod0.getStart();
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo(date1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to org.jfree.data.time.TimePeriod
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      Date date1 = simpleTimePeriod0.getEnd();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date1.toString());
  }
}
