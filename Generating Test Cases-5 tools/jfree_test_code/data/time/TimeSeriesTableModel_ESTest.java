/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:59:25 GMT 2023
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeriesTableModel_ESTest extends TimeSeriesTableModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2057, 1, 1, 1).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.removeTableModelListener(tableModelListener0);
      timeSeriesTableModel0.findColumn("Number format exception");
      timeSeriesTableModel0.getTableModelListeners();
      Class<TimeSeriesTableModel> class0 = TimeSeriesTableModel.class;
      timeSeriesTableModel0.getListeners(class0);
      timeSeriesTableModel0.getValueAt(2, 620);
      timeSeriesTableModel0.setValueAt((Object) null, 620, 2);
      timeSeriesTableModel0.fireTableCellUpdated(2, (-1));
      timeSeriesTableModel0.fireTableRowsInserted(0, (-1));
      timeSeriesTableModel0.fireTableRowsDeleted((-627), (-193));
      timeSeriesTableModel0.getColumnName((-1));
      timeSeriesTableModel0.getRowCount();
      timeSeriesTableModel0.isCellEditable((-1), (-1));
      timeSeriesTableModel0.getColumnCount();
      timeSeriesTableModel0.fireTableStructureChanged();
      timeSeriesTableModel0.getColumnName(992);
      timeSeriesTableModel0.getColumnCount();
      timeSeriesTableModel0.isCellEditable(0, 1);
      timeSeriesTableModel0.getColumnName(2);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(325).when(timeSeries1).getItemCount();
      doReturn((RegularTimePeriod) null).when(timeSeries1).getTimePeriod(anyInt());
      TimeSeriesTableModel timeSeriesTableModel1 = new TimeSeriesTableModel(timeSeries1, true);
      timeSeriesTableModel0.setValueAt(timeSeriesTableModel1, (-1), 0);
      timeSeriesTableModel1.getValueAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-1706), 1, 0, 0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.addTableModelListener(tableModelListener0);
      Class<TimeSeriesTableModel> class0 = TimeSeriesTableModel.class;
      timeSeriesTableModel0.fireTableDataChanged();
      timeSeriesTableModel0.getListeners(class0);
      timeSeriesTableModel0.getValueAt(0, 0);
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesTableModel timeSeriesTableModel1 = new TimeSeriesTableModel(timeSeries1, true);
      timeSeriesTableModel1.isCellEditable((-171), 11);
      timeSeriesTableModel0.setValueAt(timeSeriesTableModel1, 0, 1);
      timeSeriesTableModel0.getTableModelListeners();
      TableModelListener tableModelListener1 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel1.removeTableModelListener(tableModelListener1);
      timeSeriesTableModel0.fireTableRowsInserted(0, (-1721));
      timeSeriesTableModel0.getColumnClass(0);
      Class<TimeSeriesTableModel> class1 = TimeSeriesTableModel.class;
      timeSeriesTableModel0.findColumn("");
      timeSeriesTableModel0.getListeners(class1);
      timeSeriesTableModel0.getColumnCount();
      timeSeriesTableModel0.getColumnName(0);
      timeSeriesTableModel0.getValueAt(2, 0);
      timeSeriesTableModel0.getRowCount();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel1.seriesChanged(seriesChangeEvent0);
      timeSeriesTableModel0.getColumnName((-1987));
      timeSeriesTableModel0.getValueAt(1, (-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegularTimePeriod regularTimePeriod0 = mock(RegularTimePeriod.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(regularTimePeriod0).toString();
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn((-718), 2106, (-820)).when(timeSeries0).getItemCount();
      doReturn(regularTimePeriod0).when(timeSeries0).getTimePeriod(anyInt());
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      timeSeriesTableModel0.fireTableRowsInserted(1, 0);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      Class<TimeSeriesTableModel> class0 = TimeSeriesTableModel.class;
      timeSeriesTableModel0.getListeners(class0);
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent0);
      timeSeriesTableModel0.fireTableDataChanged();
      timeSeriesTableModel0.getRowCount();
      timeSeriesTableModel0.getValueAt((-2814), 0);
      timeSeriesTableModel0.getValueAt((-1428), (-1428));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(112).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent0);
      timeSeriesTableModel0.addTableModelListener(tableModelListener0);
      timeSeriesTableModel0.getColumnClass(0);
      timeSeriesTableModel0.fireTableRowsInserted(0, 0);
      SeriesChangeEvent seriesChangeEvent1 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.fireTableCellUpdated(0, 0);
      timeSeriesTableModel0.fireTableRowsUpdated(0, 0);
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent1);
      timeSeriesTableModel0.fireTableCellUpdated(8, 8);
      timeSeriesTableModel0.fireTableStructureChanged();
      timeSeriesTableModel0.getColumnClass(0);
      timeSeriesTableModel0.isCellEditable((-2317), 0);
      timeSeriesTableModel0.getRowCount();
      timeSeriesTableModel0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-1214)).when(timeSeries0).getItemCount();
      doReturn((Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      timeSeriesTableModel0.fireTableCellUpdated(9, 12);
      timeSeriesTableModel0.getValueAt(1, 1);
      timeSeriesTableModel0.getRowCount();
      timeSeriesTableModel0.getColumnCount();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      timeSeriesTableModel0.fireTableRowsInserted(1246, 0);
      // Undeclared exception!
      try { 
        timeSeriesTableModel0.setValueAt((Object) null, (-2883), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      int int0 = (-1075);
      timeSeriesTableModel0.isCellEditable((-1075), 774);
      timeSeriesTableModel0.getRowCount();
      // Undeclared exception!
      try { 
        timeSeriesTableModel0.setValueAt("", 1, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt(3, 1);
      assertNull(object0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      // Undeclared exception!
      try { 
        timeSeriesTableModel0.setValueAt((Object) null, 3111, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = null;
      try {
        timeSeriesTableModel0 = new TimeSeriesTableModel((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Class class0 = timeSeriesTableModel0.getColumnClass(1);
      assertNotNull(class0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Double", class0.toString());
      assertFalse(class0.isPrimitive());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      timeSeriesTableModel0.fireTableRowsUpdated(0, 987);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable(2, 2);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(boolean0);
      
      int int0 = timeSeriesTableModel0.getRowCount();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(0, int0);
      
      int int1 = timeSeriesTableModel0.findColumn("j8riIIRQ|++");
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = timeSeriesTableModel0.isCellEditable(1, Integer.MAX_VALUE);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = timeSeriesTableModel0.getColumnCount();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable((-1), (-1));
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(boolean0);
      
      int int0 = timeSeriesTableModel0.getColumnCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2, int0);
      
      timeSeriesTableModel0.fireTableRowsInserted((-1), (-558));
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      int int1 = timeSeriesTableModel0.getRowCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = timeSeriesTableModel0.getRowCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = timeSeriesTableModel0.getRowCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      boolean boolean1 = timeSeriesTableModel0.isCellEditable((-1738), 0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      TableModelListener[] tableModelListenerArray0 = timeSeriesTableModel0.getTableModelListeners();
      assertNotNull(tableModelListenerArray0);
      assertEquals(0, tableModelListenerArray0.length);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableStructureChanged();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.fireTableStructureChanged();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsDeleted(0, 0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.removeTableModelListener(tableModelListener0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Class<TimeSeriesTableModel> class0 = TimeSeriesTableModel.class;
      TimeSeriesTableModel[] timeSeriesTableModelArray0 = timeSeriesTableModel0.getListeners(class0);
      assertNotNull(timeSeriesTableModelArray0);
      assertEquals(0, timeSeriesTableModelArray0.length);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      int int0 = timeSeriesTableModel0.getColumnCount();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, int0);
      
      TableModelListener tableModelListener1 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.addTableModelListener(tableModelListener1);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable(1192, 0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(boolean0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableCellUpdated(Integer.MAX_VALUE, 0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt(0, (-1));
      assertNull(object0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      int int1 = (-926);
      int int2 = 0;
      // Undeclared exception!
      try { 
        timeSeriesTableModel0.getValueAt((-926), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = null;
      try {
        timeSeriesTableModel0 = new TimeSeriesTableModel((TimeSeries) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesTableModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      timeSeriesTableModel0.fireTableCellUpdated(0, 1);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      String string0 = timeSeriesTableModel0.getColumnName(0);
      assertNotNull(string0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals("Period:", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      timeSeriesTableModel0.fireTableRowsInserted(6, 6);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      Class class0 = timeSeriesTableModel0.getColumnClass(6);
      assertNull(class0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      String string0 = timeSeriesTableModel0.getColumnName(6);
      assertNull(string0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt(3082, (-252));
      assertNull(object0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable((-352), (-252));
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        timeSeriesTableModel0.getValueAt((-1866), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt(2, 2);
      assertNull(object0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable((-1480), 522);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(boolean0);
      
      Object object0 = timeSeriesTableModel0.getValueAt((-346), (-346));
      assertNull(object0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      timeSeriesTableModel0.setValueAt((Object) null, 0, 522);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      String string0 = timeSeriesTableModel0.getColumnName((-2423));
      assertNull(string0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsDeleted((-2423), 0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      String string1 = timeSeriesTableModel0.getColumnName((-2423));
      assertNull(string1);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      String string2 = timeSeriesTableModel0.getColumnName((-2423));
      assertNull(string2);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesTableModel timeSeriesTableModel1 = new TimeSeriesTableModel(timeSeries0);
      assertNotNull(timeSeriesTableModel1);
      assertEquals(2, timeSeriesTableModel1.getColumnCount());
      assertEquals(0, timeSeriesTableModel1.getRowCount());
      assertFalse(timeSeriesTableModel1.equals((Object)timeSeriesTableModel0));
      
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel1.addTableModelListener(tableModelListener0);
      assertNotSame(timeSeriesTableModel1, timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel1.getColumnCount());
      assertEquals(0, timeSeriesTableModel1.getRowCount());
      assertFalse(timeSeriesTableModel1.equals((Object)timeSeriesTableModel0));
      
      timeSeriesTableModel0.setValueAt(timeSeriesTableModel1, 0, 0);
      assertNotSame(timeSeriesTableModel0, timeSeriesTableModel1);
      assertNotSame(timeSeriesTableModel1, timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel1.getColumnCount());
      assertEquals(0, timeSeriesTableModel1.getRowCount());
      assertFalse(timeSeriesTableModel0.equals((Object)timeSeriesTableModel1));
      assertFalse(timeSeriesTableModel1.equals((Object)timeSeriesTableModel0));
      
      TimeSeries timeSeries1 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      TimeSeriesTableModel timeSeriesTableModel2 = new TimeSeriesTableModel(timeSeries1, false);
      assertNotNull(timeSeriesTableModel2);
      assertEquals(2, timeSeriesTableModel2.getColumnCount());
      assertEquals(0, timeSeriesTableModel2.getRowCount());
      assertFalse(timeSeriesTableModel2.equals((Object)timeSeriesTableModel0));
      assertFalse(timeSeriesTableModel2.equals((Object)timeSeriesTableModel1));
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        timeSeriesTableModel0.setValueAt(timeSeriesTableModel2, 0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      int int0 = timeSeriesTableModel0.getColumnCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2, int0);
      
      TableModelListener[] tableModelListenerArray0 = timeSeriesTableModel0.getTableModelListeners();
      assertNotNull(tableModelListenerArray0);
      assertEquals(0, tableModelListenerArray0.length);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      TableModelEvent tableModelEvent0 = mock(TableModelEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.fireTableChanged(tableModelEvent0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      String string0 = timeSeriesTableModel0.getColumnName(2);
      assertNull(string0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      int int1 = timeSeriesTableModel0.getRowCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable(2, 0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(boolean0);
      
      timeSeriesTableModel0.setValueAt((Object) null, 2, 2);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      int int2 = timeSeriesTableModel0.getColumnCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      boolean boolean1 = timeSeriesTableModel0.isCellEditable(0, 2);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = timeSeriesTableModel0.isCellEditable(0, 0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Class class0 = timeSeriesTableModel0.getColumnClass(2);
      assertNull(class0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      String string1 = timeSeriesTableModel0.getColumnName((-1054));
      assertNull(string1);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      timeSeriesTableModel0.setValueAt((Object) null, 2, 0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      int int3 = timeSeriesTableModel0.getColumnCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, int3);
      
      Class class1 = timeSeriesTableModel0.getColumnClass((-1054));
      assertNull(class1);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      timeSeriesTableModel0.setValueAt((Object) null, (-1054), (-1054));
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      Class class2 = timeSeriesTableModel0.getColumnClass(4);
      assertNull(class2);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      Class class3 = timeSeriesTableModel0.getColumnClass((-212));
      assertNull(class3);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(348, 348).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(348, timeSeriesTableModel0.getRowCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt(902, (-406));
      assertNull(object0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(348, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsInserted((-1385), 902);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(348, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.setValueAt((Object) null, 902, 1473);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(348, timeSeriesTableModel0.getRowCount());
      
      Class class0 = timeSeriesTableModel0.getColumnClass((-444));
      assertNull(class0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(348, timeSeriesTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1642).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(1642, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt((-5413), 1642);
      assertNull(object0);
      assertEquals(1642, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      String string0 = timeSeriesTableModel0.getColumnName(0);
      assertNotNull(string0);
      assertEquals(1642, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals("Period:", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(2364, 2364).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsInserted(1799, 1799);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      Class<TimeSeriesTableModel> class0 = TimeSeriesTableModel.class;
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.removeTableModelListener(tableModelListener0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableCellUpdated(2375, 2375);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsInserted(0, 1799);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      TimeSeriesTableModel[] timeSeriesTableModelArray0 = timeSeriesTableModel0.getListeners(class0);
      assertNotNull(timeSeriesTableModelArray0);
      assertEquals(0, timeSeriesTableModelArray0.length);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      Class class1 = timeSeriesTableModel0.getColumnClass(1799);
      assertNull(class1);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableStructureChanged();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsInserted(0, 0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      String string0 = timeSeriesTableModel0.getColumnName(1799);
      assertNull(string0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.setValueAt((Object) null, (-616), 0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      int int0 = timeSeriesTableModel0.getColumnCount();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      assertEquals(2, int0);
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable(1217, (-4111));
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      assertFalse(boolean0);
      
      Class class2 = timeSeriesTableModel0.getColumnClass(1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Double", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.setValueAt(class0, 1, 1);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(2364, timeSeriesTableModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      timeSeriesTableModel0.fireTableCellUpdated(9, 12);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      Object object0 = timeSeriesTableModel0.getValueAt(1, 1);
      assertNull(object0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      int int0 = timeSeriesTableModel0.getRowCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, int0);
      
      int int1 = timeSeriesTableModel0.getColumnCount();
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(timeSeries0).getItemCount();
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableDataChanged();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      TableModelEvent tableModelEvent0 = mock(TableModelEvent.class, new ViolatedAssumptionAnswer());
      Object object0 = timeSeriesTableModel0.getValueAt(0, 0);
      assertNull(object0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsUpdated(0, (-75));
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableRowsUpdated(1695, (-2314));
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.setValueAt((Object) null, (-75), 413);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Object object1 = timeSeriesTableModel0.getValueAt(0, 0);
      assertNull(object1);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      timeSeriesTableModel0.fireTableChanged(tableModelEvent0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      int int0 = timeSeriesTableModel0.findColumn("~&iek");
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals((-1), int0);
      
      Class class0 = timeSeriesTableModel0.getColumnClass((-1));
      assertNull(class0);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      Class class1 = timeSeriesTableModel0.getColumnClass(2177);
      assertNull(class1);
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      
      boolean boolean0 = timeSeriesTableModel0.isCellEditable(2, (-3442));
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(boolean0);
      
      int int1 = timeSeriesTableModel0.getRowCount();
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeSeries timeSeries0 = mock(TimeSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(timeSeries0).getItemCount();
      doReturn((RegularTimePeriod) null).when(timeSeries0).getTimePeriod(anyInt());
      doReturn((Number) null).when(timeSeries0).getValue(anyInt());
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      timeSeriesTableModel0.fireTableRowsInserted(0, 0);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent0);
      timeSeriesTableModel0.getRowCount();
      timeSeriesTableModel0.isCellEditable(0, 0);
      timeSeriesTableModel0.getColumnClass(0);
      SeriesChangeEvent seriesChangeEvent1 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.seriesChanged(seriesChangeEvent1);
      TableModelListener tableModelListener0 = mock(TableModelListener.class, new ViolatedAssumptionAnswer());
      timeSeriesTableModel0.addTableModelListener(tableModelListener0);
      timeSeriesTableModel0.isCellEditable(0, 0);
      timeSeriesTableModel0.getValueAt((-1), 0);
      timeSeriesTableModel0.getTableModelListeners();
      timeSeriesTableModel0.removeTableModelListener((TableModelListener) null);
      timeSeriesTableModel0.setValueAt((Object) null, (-895), (-2888));
      timeSeriesTableModel0.isCellEditable((-1), 0);
      timeSeriesTableModel0.setValueAt("", 0, (-1));
      timeSeriesTableModel0.getColumnClass(0);
      Object object0 = timeSeriesTableModel0.getValueAt((-840), 1);
      assertNull(object0);
  }
}
