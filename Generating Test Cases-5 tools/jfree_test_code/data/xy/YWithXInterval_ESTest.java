/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:31:37 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.xy.YWithXInterval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YWithXInterval_ESTest extends YWithXInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 1.0);
      YWithXInterval yWithXInterval1 = new YWithXInterval(0.0, 0.0, 0.0);
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertFalse(boolean0);
      assertEquals(0.0, yWithXInterval1.getXHigh(), 0.01);
      assertEquals(0.0, yWithXInterval0.getXLow(), 0.01);
      assertFalse(yWithXInterval1.equals((Object)yWithXInterval0));
      assertEquals(0.0, yWithXInterval0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 2127.0);
      YWithXInterval yWithXInterval1 = new YWithXInterval(0.0, (-194.1112040010102), 0.0);
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertEquals(2127.0, yWithXInterval0.getXHigh(), 0.01);
      assertEquals(0.0, yWithXInterval1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals((-194.1112040010102), yWithXInterval1.getXLow(), 0.01);
      assertEquals(0.0, yWithXInterval0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-248.6), 0.0, 0.0);
      YWithXInterval yWithXInterval1 = new YWithXInterval((-2926.1867), 0.0, 0.0);
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertFalse(yWithXInterval1.equals((Object)yWithXInterval0));
      assertEquals((-2926.1867), yWithXInterval1.getY(), 0.01);
      assertEquals(0.0, yWithXInterval1.getXLow(), 0.01);
      assertEquals(0.0, yWithXInterval1.getXHigh(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 0.0);
      double double0 = yWithXInterval0.getY();
      assertEquals(0.0, yWithXInterval0.getXHigh(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, yWithXInterval0.getXLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(1703.33255895, 1703.33255895, 1703.33255895);
      double double0 = yWithXInterval0.getY();
      assertEquals(1703.33255895, yWithXInterval0.getXLow(), 0.01);
      assertEquals(1703.33255895, yWithXInterval0.getXHigh(), 0.01);
      assertEquals(1703.33255895, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 0.0);
      double double0 = yWithXInterval0.getXLow();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, yWithXInterval0.getY(), 0.01);
      assertEquals(0.0, yWithXInterval0.getXHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(1703.33255895, 1703.33255895, 1703.33255895);
      double double0 = yWithXInterval0.getXLow();
      assertEquals(1703.33255895, yWithXInterval0.getY(), 0.01);
      assertEquals(1703.33255895, yWithXInterval0.getXHigh(), 0.01);
      assertEquals(1703.33255895, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 0.0);
      double double0 = yWithXInterval0.getXHigh();
      assertEquals(0.0, yWithXInterval0.getY(), 0.01);
      assertEquals(0.0, yWithXInterval0.getXLow(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(1703.33255895, 1703.33255895, 1703.33255895);
      double double0 = yWithXInterval0.getXHigh();
      assertEquals(1703.33255895, yWithXInterval0.getXLow(), 0.01);
      assertEquals(1703.33255895, double0, 0.01);
      assertEquals(1703.33255895, yWithXInterval0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 0.0);
      YWithXInterval yWithXInterval1 = new YWithXInterval(0.0, 0.0, 1.0);
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertEquals(1.0, yWithXInterval1.getXHigh(), 0.01);
      assertEquals(0.0, yWithXInterval1.getY(), 0.01);
      assertEquals(0.0, yWithXInterval1.getXLow(), 0.01);
      assertFalse(boolean0);
      assertFalse(yWithXInterval1.equals((Object)yWithXInterval0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval(0.0, 0.0, 0.0);
      YWithXInterval yWithXInterval1 = new YWithXInterval(0.0, 1509.430261913, (-154.4695689667));
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertEquals(0.0, yWithXInterval1.getY(), 0.01);
      assertEquals(1509.430261913, yWithXInterval1.getXLow(), 0.01);
      assertFalse(boolean0);
      assertEquals((-154.4695689667), yWithXInterval1.getXHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-2331.870103), 0.0, (-1.0));
      YWithXInterval yWithXInterval1 = new YWithXInterval(0.0, (-2331.870103), (-1.0));
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertEquals((-1.0), yWithXInterval1.getXHigh(), 0.01);
      assertEquals((-2331.870103), yWithXInterval1.getXLow(), 0.01);
      assertEquals(0.0, yWithXInterval1.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      YWithXInterval yWithXInterval1 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval1);
      assertEquals((-1.0), yWithXInterval1.getXLow(), 0.01);
      assertEquals((-1.0), yWithXInterval1.getXHigh(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1.0), yWithXInterval1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      boolean boolean0 = yWithXInterval0.equals(yWithXInterval0);
      assertEquals((-1.0), yWithXInterval0.getXHigh(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1.0), yWithXInterval0.getY(), 0.01);
      assertEquals((-1.0), yWithXInterval0.getXLow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      Object object0 = new Object();
      boolean boolean0 = yWithXInterval0.equals(object0);
      assertEquals((-1.0), yWithXInterval0.getY(), 0.01);
      assertEquals((-1.0), yWithXInterval0.getXHigh(), 0.01);
      assertEquals((-1.0), yWithXInterval0.getXLow(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      double double0 = yWithXInterval0.getY();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), yWithXInterval0.getXLow(), 0.01);
      assertEquals((-1.0), yWithXInterval0.getXHigh(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      double double0 = yWithXInterval0.getXHigh();
      assertEquals((-1.0), yWithXInterval0.getXLow(), 0.01);
      assertEquals((-1.0), yWithXInterval0.getY(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YWithXInterval yWithXInterval0 = new YWithXInterval((-1.0), (-1.0), (-1.0));
      double double0 = yWithXInterval0.getXLow();
      assertEquals((-1.0), yWithXInterval0.getY(), 0.01);
      assertEquals((-1.0), yWithXInterval0.getXHigh(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }
}
