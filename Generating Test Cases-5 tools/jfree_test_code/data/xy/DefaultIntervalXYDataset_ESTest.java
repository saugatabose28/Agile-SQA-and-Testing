/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:16:48 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultIntervalXYDataset_ESTest extends DefaultIntervalXYDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      boolean boolean0 = defaultIntervalXYDataset0.equals("ivEsuQ9p(@rfs");
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertFalse(boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1915.7363590402;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1915.7363590402;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 3726.0;
      doubleArray3[6] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 3726.0;
      doubleArray2[6] = 1915.7363590402;
      doubleArray6[2] = 1915.7363590402;
      doubleArray3[0] = 1.0;
      doubleArray6[4] = 1915.7363590402;
      doubleArray6[5] = 1.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset1.addSeries("ivEsuQ9p(@rfs", doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain six arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset2 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertTrue(defaultIntervalXYDataset2.getNotify());
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      
      boolean boolean0 = defaultIntervalXYDataset0.equals(defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(boolean0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset2));
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getX((-1639), (-1639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-1213.3142591);
      doubleArray2[3] = 1.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 2869.7;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2869.7;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-1213.3142591);
      doubleArray4[2] = 2869.7;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[5] = doubleArray5;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain six arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultIntervalXYDataset0.indexOf(comparable0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals((-1), int0);
      
      defaultIntervalXYDataset0.setNotify(true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndXValue((-934), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      boolean boolean0 = defaultIntervalXYDataset0.equals(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      int int0 = (-1734);
      int int1 = 108;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartX((-1734), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      DatasetGroup datasetGroup0 = defaultIntervalXYDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      defaultIntervalXYDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndYValue((-1), 152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getY((-2027), (-2027));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getY(0, (-1649));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      boolean boolean0 = defaultIntervalXYDataset0.hasListener(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      int int0 = (-2683);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartYValue((-2683), (-2683));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset2 = (DefaultIntervalXYDataset)defaultIntervalXYDataset1.clone();
      assertNotNull(defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertTrue(defaultIntervalXYDataset2.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset3 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset3);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset3);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset3, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset3, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset3, defaultIntervalXYDataset2);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset3.getNotify());
      assertEquals(0, defaultIntervalXYDataset3.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset2));
      assertTrue(defaultIntervalXYDataset3.equals((Object)defaultIntervalXYDataset2));
      assertTrue(defaultIntervalXYDataset3.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset3.equals((Object)defaultIntervalXYDataset1));
      
      boolean boolean0 = defaultIntervalXYDataset0.equals(defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset3);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset3);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset3);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertTrue(defaultIntervalXYDataset2.getNotify());
      assertTrue(boolean0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset3));
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset2));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset2));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset3));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset3));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      
      int int0 = (-1639);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getX((-1639), (-1639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.setNotify(true);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndXValue(2161, 2161);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2161, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      int int0 = (-1127);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1127);
      doubleArray1[1] = (double) (-1127);
      doubleArray1[2] = (double) (-1127);
      doubleArray1[3] = (double) (-1127);
      doubleArray1[4] = (double) (-1127);
      doubleArray1[5] = (double) (-1127);
      doubleArray1[6] = (double) (-1127);
      doubleArray1[7] = (double) (-1127);
      doubleArray1[8] = (double) (-1127);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1127);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.addSeries((Comparable) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'seriesKey' cannot be null.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      int int0 = 0;
      defaultIntervalXYDataset0.setNotify(true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      boolean boolean0 = defaultIntervalXYDataset0.hasListener(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndYValue(0, (-180));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultIntervalXYDataset0.indexOf(comparable0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      boolean boolean0 = defaultIntervalXYDataset0.equals("VP(:AL%@b,@qNar[8");
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset2 = (DefaultIntervalXYDataset)defaultIntervalXYDataset1.clone();
      assertNotNull(defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset2.getNotify());
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      
      boolean boolean1 = defaultIntervalXYDataset0.equals(defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset2);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset2.getNotify());
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset2));
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset2));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      assertFalse(boolean1 == boolean0);
      
      int int1 = defaultIntervalXYDataset1.hashCode();
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset2);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset2));
      assertFalse(int1 == int0);
      
      int int2 = (-974);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset1.getStartY((-1), (-974));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.hashCode();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      boolean boolean0 = defaultIntervalXYDataset0.equals(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(boolean0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndX(1161, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1161, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      int int0 = 0;
      defaultIntervalXYDataset0.validateObject();
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      
      defaultIntervalXYDataset0.setNotify(false);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartYValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = defaultIntervalXYDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultIntervalXYDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartXValue(1132, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1132, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultIntervalXYDataset0.indexOf(comparable0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      defaultIntervalXYDataset0.validateObject();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndX((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      int int0 = (-1109);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndY((-1109), 2351);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.setNotify(true);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int0 = 5;
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndY(5, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndY((-967), (-967));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int0 = (-235);
      defaultIntervalXYDataset0.setNotify(true);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int1 = 1491;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.addSeries(comparable0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' is null.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Comparable<DefaultIntervalXYDataset> comparable0 = (Comparable<DefaultIntervalXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-573.34549);
      doubleArray1[1] = (-494.30469839);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-573.34549);
      doubleArray3[1] = (-573.34549);
      doubleArray3[2] = (-494.30469839);
      doubleArray3[3] = (-494.30469839);
      doubleArray3[4] = (-573.34549);
      doubleArray3[5] = (-494.30469839);
      doubleArray3[6] = (-494.30469839);
      doubleArray3[7] = (-573.34549);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-494.30469839);
      doubleArray4[1] = (-494.30469839);
      doubleArray4[2] = (-573.34549);
      doubleArray4[3] = (-573.34549);
      doubleArray4[4] = (-494.30469839);
      doubleArray4[5] = (-494.30469839);
      doubleArray4[6] = (-494.30469839);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-573.34549);
      doubleArray5[1] = (-573.34549);
      doubleArray5[2] = (-494.30469839);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-494.30469839);
      doubleArray6[1] = (-573.34549);
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain six arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultIntervalXYDataset0.indexOf(comparable0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getYValue(4, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      boolean boolean0 = defaultIntervalXYDataset0.hasListener((EventListener) null);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertFalse(boolean0);
      
      int int0 = defaultIntervalXYDataset0.getSeriesCount();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, int0);
      
      defaultIntervalXYDataset0.validateObject();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 6.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = defaultIntervalXYDataset0.hasListener((EventListener) null);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartY(1097, 1097);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1097, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      int int0 = (-1972);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getYValue((-1972), (-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      int int0 = (-1019);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartXValue((-1019), (-1019));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      defaultIntervalXYDataset0.validateObject();
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getSeriesKey(121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getSeriesKey((-945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getY(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      int int0 = defaultIntervalXYDataset0.getSeriesCount();
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, int0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultIntervalXYDataset0.indexOf(comparable0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getXValue((-1879), (-1879));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      int int0 = 1369;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getX(1369, 1369);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1369, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      assertNotNull(defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      int int0 = 11;
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartX(11, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = defaultIntervalXYDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultIntervalXYDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = 1347;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndX(1347, 1347);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1347, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getX(1888, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1888, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = defaultIntervalXYDataset0.equals("ivEsuQ9p(@rfs");
      assertTrue(defaultIntervalXYDataset0.getNotify());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset1);
      assertTrue(defaultIntervalXYDataset1.getNotify());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1915.7363590402;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1915.7363590402;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 3726.0;
      doubleArray3[6] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 3726.0;
      doubleArray6[1] = 1915.7363590402;
      doubleArray6[2] = 1915.7363590402;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1915.7363590402;
      doubleArray6[5] = 1.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset1.addSeries("ivEsuQ9p(@rfs", doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain six arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndX(53, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndXValue(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndX(2, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      int int0 = (-2203);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getItemCount((-2203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.addChangeListener(datasetChangeListener0);
      defaultIntervalXYDataset0.hashCode();
      defaultIntervalXYDataset0.validateObject();
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getSeriesKey(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      defaultIntervalXYDataset0.setNotify(false);
      defaultIntervalXYDataset0.validateObject();
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartY(4, (-82));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent0);
      int int0 = 0;
      Comparable<DefaultIntervalXYDataset> comparable0 = (Comparable<DefaultIntervalXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.indexOf(comparable0);
      defaultIntervalXYDataset0.indexOf((Comparable) null);
      SeriesChangeEvent seriesChangeEvent1 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.indexOf((Comparable) null);
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent1);
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      DatasetGroup datasetGroup0 = defaultIntervalXYDataset1.getGroup();
      defaultIntervalXYDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getStartX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultIntervalXYDataset0.removeChangeListener(datasetChangeListener0);
      defaultIntervalXYDataset0.validateObject();
      DatasetChangeListener datasetChangeListener1 = null;
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1427.3663912090203);
      doubleArray1[1] = 1281.078647662;
      doubleArray1[2] = 1099.024565;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 1447.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = (-2250.317969);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1447.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 6.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getEndY(4, (-471));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getItemCount(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      defaultIntervalXYDataset0.hasListener(defaultIntervalXYDataset1);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = defaultIntervalXYDataset1.getGroup();
      defaultIntervalXYDataset0.setGroup(datasetGroup0);
      defaultIntervalXYDataset0.addChangeListener(datasetChangeListener0);
      defaultIntervalXYDataset0.hashCode();
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      defaultIntervalXYDataset0.equals("ivEsuQ9p(@rfs");
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1915.7363590402;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1915.7363590402;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 3726.0;
      doubleArray3[6] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 3726.0;
      doubleArray2[6] = 1915.7363590402;
      doubleArray6[2] = 1915.7363590402;
      doubleArray3[0] = 1.0;
      doubleArray6[4] = 1915.7363590402;
      doubleArray6[5] = 1.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset1.addSeries("ivEsuQ9p(@rfs", doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain six arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset2 = (DefaultIntervalXYDataset)defaultIntervalXYDataset0.clone();
      defaultIntervalXYDataset0.clone();
      defaultIntervalXYDataset0.equals(defaultIntervalXYDataset2);
      defaultIntervalXYDataset2.addChangeListener((DatasetChangeListener) null);
      int int0 = (-1639);
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getX((-1639), (-1639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
