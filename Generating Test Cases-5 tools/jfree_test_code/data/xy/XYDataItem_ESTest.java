/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:27:39 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYDataItem_ESTest extends XYDataItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      int int0 = xYDataItem0.compareTo(xYDataItem0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 61);
      double double0 = xYDataItem0.getYValue();
      assertEquals(61.0, double0, 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-930.74301853816), 0.0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      
      xYDataItem0.setY((-930.74301853816));
      double double0 = xYDataItem0.getYValue();
      assertEquals((-930.74301853816), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0, (Number) null);
      Number number0 = xYDataItem0.getY();
      assertNull(number0);
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1322.09783));
      assertEquals((-1322.09783), xYDataItem0.getYValue(), 0.01);
      
      xYDataItem0.setY((Number) 1);
      xYDataItem0.getY();
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      Number number0 = xYDataItem0.getY();
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1322.09783));
      double double0 = xYDataItem0.getXValue();
      assertEquals((-1322.09783), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 61, (Number) 61);
      double double0 = xYDataItem0.getXValue();
      assertEquals(61.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1322.09783));
      Number number0 = xYDataItem0.getX();
      assertEquals((-1322.09783), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, (double) 1);
      Number number0 = xYDataItem0.getX();
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDataItem xYDataItem0 = null;
      try {
        xYDataItem0 = new XYDataItem((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-54.87734), (-54.87734));
      xYDataItem0.setY((Number) null);
      double double0 = xYDataItem0.getYValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-930.74301853816), 0.0);
      double double0 = xYDataItem0.getYValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-930.74301853816), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      Number number0 = xYDataItem0.getX();
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      double double0 = xYDataItem0.getXValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      xYDataItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0, (Number) null);
      xYDataItem0.hashCode();
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      Object object0 = xYDataItem0.clone();
      assertTrue(object0.equals((Object)xYDataItem0));
      
      xYDataItem0.setY((Number) 0);
      boolean boolean0 = xYDataItem0.equals(object0);
      assertFalse(object0.equals((Object)xYDataItem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-3692.618201049999));
      boolean boolean0 = xYDataItem0.equals("!Hi;R{=%9WP<-@4");
      assertEquals((-3692.618201049999), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      boolean boolean0 = xYDataItem0.equals(xYDataItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYDataItem xYDataItem1 = new XYDataItem(3288.50966455, 3288.50966455);
      boolean boolean0 = xYDataItem0.equals(xYDataItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYDataItem xYDataItem1 = new XYDataItem(3288.50966455, 3288.50966455);
      int int0 = xYDataItem0.compareTo(xYDataItem1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      XYDataItem xYDataItem1 = new XYDataItem((double) 1, (double) 1);
      int int0 = xYDataItem1.compareTo(xYDataItem0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      int int0 = xYDataItem0.compareTo("`G{Jmk&S6,U<z=_W");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      
      xYDataItem0.setY((Number) null);
      xYDataItem0.toString();
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      Object object0 = xYDataItem0.clone();
      boolean boolean0 = xYDataItem0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      Number number0 = xYDataItem0.getY();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      int int0 = xYDataItem0.compareTo(xYDataItem0);
      assertEquals(0, int0);
  }
}
