/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:23:36 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.xy.XYCoordinate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYCoordinate_ESTest extends XYCoordinate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(317.4512116610184, 317.4512116610184);
      xYCoordinate0.hashCode();
      assertEquals(317.4512116610184, xYCoordinate0.getX(), 0.01);
      assertEquals(317.4512116610184, xYCoordinate0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate((-1.0), 0.0);
      xYCoordinate0.hashCode();
      assertEquals((-1.0), xYCoordinate0.getX(), 0.01);
      assertEquals(0.0, xYCoordinate0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, 196.2713748991);
      XYCoordinate xYCoordinate1 = new XYCoordinate(1.0, 1.0);
      boolean boolean0 = xYCoordinate0.equals(xYCoordinate1);
      assertEquals(1.0, xYCoordinate1.getY(), 0.01);
      assertFalse(xYCoordinate1.equals((Object)xYCoordinate0));
      assertEquals(1.0, xYCoordinate0.getX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(0.0, 0.0);
      XYCoordinate xYCoordinate1 = new XYCoordinate((-1.0), 0.0);
      boolean boolean0 = xYCoordinate0.equals(xYCoordinate1);
      assertEquals(0.0, xYCoordinate1.getY(), 0.01);
      assertEquals((-1.0), xYCoordinate1.getX(), 0.01);
      assertFalse(boolean0);
      assertFalse(xYCoordinate1.equals((Object)xYCoordinate0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate();
      double double0 = xYCoordinate0.getY();
      assertEquals(0.0, xYCoordinate0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate((-1.0), 1688.6641317716);
      double double0 = xYCoordinate0.getY();
      assertEquals((-1.0), xYCoordinate0.getX(), 0.01);
      assertEquals(1688.6641317716, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(0.0, 2.9052559349462173);
      double double0 = xYCoordinate0.getX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.9052559349462173, xYCoordinate0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate((-2301.7770402), 0.0);
      double double0 = xYCoordinate0.getX();
      assertEquals((-2301.7770402), double0, 0.01);
      assertEquals(0.0, xYCoordinate0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(0.0, 2.9052559349462173);
      XYCoordinate xYCoordinate1 = new XYCoordinate();
      int int0 = xYCoordinate1.compareTo(xYCoordinate0);
      assertEquals(0.0, xYCoordinate0.getX(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      XYCoordinate xYCoordinate1 = new XYCoordinate(1.0, 1.0);
      int int0 = xYCoordinate1.compareTo(xYCoordinate0);
      assertEquals(1, int0);
      assertEquals(1.0, xYCoordinate0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate();
      XYCoordinate xYCoordinate1 = new XYCoordinate(40.531, 40.531);
      int int0 = xYCoordinate0.compareTo(xYCoordinate1);
      assertEquals((-1), int0);
      assertEquals(40.531, xYCoordinate1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      XYCoordinate xYCoordinate1 = new XYCoordinate();
      int int0 = xYCoordinate0.compareTo(xYCoordinate1);
      assertEquals(1, int0);
      assertEquals((-3080.60879), xYCoordinate0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      // Undeclared exception!
      try { 
        xYCoordinate0.compareTo("(1.0, -3080.60879)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomparable object.
         //
         verifyException("org.jfree.data.xy.XYCoordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      int int0 = xYCoordinate0.compareTo(xYCoordinate0);
      assertEquals(0, int0);
      assertEquals((-3080.60879), xYCoordinate0.getY(), 0.01);
      assertEquals(1.0, xYCoordinate0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate();
      XYCoordinate xYCoordinate1 = new XYCoordinate(0.0, 0.0);
      boolean boolean0 = xYCoordinate0.equals(xYCoordinate1);
      assertEquals(0.0, xYCoordinate1.getY(), 0.01);
      assertEquals(0.0, xYCoordinate1.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate();
      XYCoordinate xYCoordinate1 = new XYCoordinate(191.921369, 191.921369);
      boolean boolean0 = xYCoordinate0.equals(xYCoordinate1);
      assertFalse(boolean0);
      assertEquals(191.921369, xYCoordinate1.getY(), 0.01);
      assertEquals(191.921369, xYCoordinate1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate();
      Object object0 = new Object();
      boolean boolean0 = xYCoordinate0.equals(object0);
      assertEquals(0.0, xYCoordinate0.getX(), 0.01);
      assertEquals(0.0, xYCoordinate0.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      XYCoordinate xYCoordinate1 = new XYCoordinate(1.0, 1.0);
      boolean boolean0 = xYCoordinate0.equals(xYCoordinate1);
      assertFalse(boolean0);
      assertEquals(1.0, xYCoordinate0.getX(), 0.01);
      assertEquals(1.0, xYCoordinate1.getY(), 0.01);
      assertFalse(xYCoordinate1.equals((Object)xYCoordinate0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate();
      boolean boolean0 = xYCoordinate0.equals(xYCoordinate0);
      assertTrue(boolean0);
      assertEquals(0.0, xYCoordinate0.getY(), 0.01);
      assertEquals(0.0, xYCoordinate0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      String string0 = xYCoordinate0.toString();
      assertEquals("(1.0, -3080.60879)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      double double0 = xYCoordinate0.getY();
      assertEquals(1.0, xYCoordinate0.getX(), 0.01);
      assertEquals((-3080.60879), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      double double0 = xYCoordinate0.getX();
      assertEquals((-3080.60879), xYCoordinate0.getY(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYCoordinate xYCoordinate0 = new XYCoordinate(1.0, (-3080.60879));
      xYCoordinate0.hashCode();
      assertEquals((-3080.60879), xYCoordinate0.getY(), 0.01);
      assertEquals(1.0, xYCoordinate0.getX(), 0.01);
  }
}
