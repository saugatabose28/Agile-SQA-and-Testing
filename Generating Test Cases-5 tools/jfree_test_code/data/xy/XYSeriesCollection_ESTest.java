/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:56:12 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeEvent;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.Range;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeriesCollection_ESTest extends XYSeriesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("iQ23k$y_FKb*z6%.0+-").when(xYSeries0).toString();
      doReturn(Double.NaN).when(xYSeries0).getMaxX();
      doReturn(Double.NaN).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection1.getSeries();
      xYSeriesCollection1.setNotify(false);
      xYSeriesCollection0.hasListener(xYSeriesCollection1);
      xYSeriesCollection0.getDomainUpperBound(true);
      xYSeriesCollection1.getIntervalPositionFactor();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getSeriesCount();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      Number number0 = xYSeriesCollection1.getY(0, 0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("wRp<n/f7{LVN!F=P1").when(xYSeries1).toString();
      doReturn("wRp<n/f7{LVN!F=P1").when(xYSeries1).getKey();
      doReturn(Double.POSITIVE_INFINITY).when(xYSeries1).getMaxY();
      doReturn(Double.POSITIVE_INFINITY).when(xYSeries1).getMinY();
      doReturn(number0, number0).when(xYSeries1).getY(anyInt());
      XYSeriesCollection xYSeriesCollection2 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection2.hashCode();
      xYSeriesCollection2.getEndY(0, 0);
      xYSeriesCollection2.getRangeBounds(false);
      xYSeriesCollection2.getY(0, (-10));
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection2.getSeriesIndex(comparable0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getSeriesCount();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection1.getY(0, 0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("/sa-B:9E<_An[oP>}0/").when(xYSeries0).toString();
      doReturn(1319.47).when(xYSeries0).getMaxX();
      doReturn(1319.47).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainUpperBound(true);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("/sa-B:9E<_An[oP>}0/").when(xYSeries1).toString();
      doReturn("/sa-B:9E<_An[oP>}0/").when(xYSeries1).getKey();
      doReturn("/sa-B:9E<_An[oP>}0/").when(xYSeries1).clone();
      doReturn(1319.97).when(xYSeries1).getX(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection1.getStartX(0, 0);
      xYSeriesCollection1.clone();
      xYSeriesCollection1.getIntervalPositionFactor();
      xYSeriesCollection1.getSeriesKey(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection1.indexOf((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getIntervalWidth();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection1.getY(0, 0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeLowerBound(true);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(",DIn1)/pQ%A/bWKUA").when(xYSeries1).toString();
      doReturn(Integer.MAX_VALUE).when(xYSeries1).getItemCount();
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection1.getItemCount(0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.addChangeListener((DatasetChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      xYSeriesCollection0.getDomainLowerBound(false);
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      Number number0 = xYSeriesCollection1.getY(0, 0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("wRp<n/f7{LVN!F=P1").when(xYSeries1).toString();
      doReturn("wRp<n/f7{LVN!F=P1", "wRp<n/f7{LVN!F=P1").when(xYSeries1).getKey();
      doReturn(Double.POSITIVE_INFINITY).when(xYSeries1).getMaxY();
      doReturn(Double.POSITIVE_INFINITY).when(xYSeries1).getMinY();
      doReturn(number0, number0).when(xYSeries1).getY(anyInt());
      XYSeriesCollection xYSeriesCollection2 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection2.hashCode();
      xYSeriesCollection2.getEndY(0, 0);
      xYSeriesCollection2.getRangeBounds(false);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection2.getSeriesIndex(comparable0);
      xYSeriesCollection2.getY(0, (-10));
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection2.getSeriesIndex(comparable1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("!L~pQxVz").when(xYSeries0).toString();
      doReturn("!L~pQxVz").when(xYSeries0).clone();
      doReturn(1.0).when(xYSeries0).getMaxY();
      doReturn(Double.NaN).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.setIntervalWidth(4294.0);
      xYSeriesCollection0.indexOf(xYSeries1);
      Object object0 = xYSeriesCollection0.clone();
      xYSeriesCollection0.getRangeBounds(false);
      xYSeriesCollection0.equals(object0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("d9H#SulDM(").when(xYSeries0).toString();
      doReturn("d9H#SulDM(").when(xYSeries0).clone();
      doReturn((-2.0)).when(xYSeries0).getMaxY();
      doReturn((-2.0)).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.setIntervalWidth(4294.0);
      xYSeriesCollection0.indexOf(xYSeries1);
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)xYSeriesCollection0.clone();
      xYSeriesCollection0.getRangeBounds(false);
      xYSeriesCollection0.removeAllSeries();
      // Undeclared exception!
      try { 
        xYSeriesCollection1.removeAllSeries();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYSeries
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("eatc#n;LcGlI,4-%hy").when(xYSeries0).toString();
      doReturn((-1283.828)).when(xYSeries0).getMaxY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeUpperBound(true);
      int int0 = 5;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartXValue(5, (-4844));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainUpperBound(false);
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection1.getY(0, 0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("il.N)}").when(xYSeries0).toString();
      doReturn("il.N)}").when(xYSeries0).clone();
      doReturn(3552.99928793).when(xYSeries0).getMaxY();
      doReturn(234.2).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.setIntervalWidth(4294.0);
      xYSeriesCollection0.indexOf(xYSeries1);
      Object object0 = xYSeriesCollection0.clone();
      xYSeriesCollection0.getRangeBounds(true);
      xYSeriesCollection0.equals(object0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("?sH;gMg{`8E").when(xYSeries0).toString();
      doReturn("?sH;gMg{`8E").when(xYSeries0).clone();
      doReturn((-42.12724336326462)).when(xYSeries0).getMaxY();
      doReturn((-42.12724336326462)).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.setIntervalWidth(4294.0);
      xYSeriesCollection0.indexOf(xYSeries1);
      Object object0 = xYSeriesCollection0.clone();
      xYSeriesCollection0.getRangeBounds(false);
      xYSeriesCollection0.equals(object0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(xYSeries0).toString();
      doReturn("").when(xYSeries0).getKey();
      doReturn(0.0).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainLowerBound(false);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      xYSeriesCollection0.getIntervalPositionFactor();
      xYSeriesCollection0.getSeriesKey(0);
      XYSeries xYSeries2 = null;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.vetoableChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainUpperBound(false);
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key2").when(xYSeries0).toString();
      doReturn((-2347)).when(xYSeries0).getItemCount();
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.clone();
      xYSeriesCollection1.getItemCount(0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.addChangeListener((DatasetChangeListener) null);
      xYSeriesCollection0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparable<ComparableObjectSeries> comparable0 = (Comparable<ComparableObjectSeries>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.indexOf(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("").when(xYSeries1).toString();
      doReturn(comparable0).when(xYSeries1).getKey();
      doReturn((-1)).when(xYSeries1).getX(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection1.setGroup(datasetGroup0);
      xYSeriesCollection1.getStartX(0, 0);
      xYSeriesCollection1.getIntervalPositionFactor();
      xYSeriesCollection1.getSeriesKey(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection1.indexOf((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = 0;
      xYSeriesCollection0.getDomainOrder();
      Comparable<XYSeries> comparable0 = (Comparable<XYSeries>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYSeries0).getKey();
      xYSeriesCollection0.addSeries(xYSeries0);
      xYSeriesCollection0.removeSeries(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("dataset", "dataset").when(xYSeries0).toString();
      doReturn(true).when(xYSeries0).getAutoSort();
      doReturn((-820.65187638)).when(xYSeries0).getMaxX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainUpperBound(false);
      xYSeriesCollection0.setIntervalWidth(0.5);
      xYSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.hashCode();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "org.jfree.data.xy.IntervalXYDelegate", (String) null).when(xYSeries0).toString();
      doReturn("org.jfree.data.xy.IntervalXYDelegate").when(xYSeries0).getKey();
      doReturn(2599, 742).when(xYSeries0).getItemCount();
      doReturn(6960, (Number) null, (Number) null, (Number) null, (Number) null).when(xYSeries0).getX(anyInt());
      doReturn((Number) null).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      boolean boolean0 = true;
      xYSeriesCollection1.setAutoWidth(true);
      xYSeriesCollection1.getSeriesKey(0);
      xYSeriesCollection1.getEndY(0, 0);
      xYSeriesCollection1.isAutoWidth();
      xYSeriesCollection1.getX(0, 1148);
      // Undeclared exception!
      try { 
        xYSeriesCollection1.getX(1148, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1148, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeLowerBound(false);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key2").when(xYSeries1).toString();
      doReturn("Duplicate key2", "Duplicate key2").when(xYSeries1).getKey();
      doReturn((-845.576290238)).when(xYSeries1).getMaxY();
      doReturn(1115.919546185615).when(xYSeries1).getMinY();
      doReturn((Number) null).when(xYSeries1).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection1.hashCode();
      xYSeriesCollection1.getRangeBounds(true);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.getSeriesIndex(comparable0);
      xYSeriesCollection1.getY(0, 0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.getSeriesIndex(comparable1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(") to be non-negative.").when(xYSeries0).toString();
      doReturn((-1.0)).when(xYSeries0).getMaxX();
      doReturn((-1.0)).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainBounds(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getYValue(435, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 435, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("H1FD`L[HU", "H1FD`L[HU", "H1FD`L[HU").when(xYSeries0).toString();
      doReturn(2104.754, Double.POSITIVE_INFINITY).when(xYSeries0).getMaxX();
      doReturn((-981.5009168556597)).when(xYSeries0).getMinX();
      doReturn(2104.754).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainLowerBound(true);
      xYSeriesCollection0.getRangeLowerBound(true);
      xYSeriesCollection0.getDomainUpperBound(false);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      Object object0 = xYSeriesCollection1.clone();
      xYSeriesCollection0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.setIntervalWidth(4294.0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeBounds(false);
      xYSeriesCollection0.equals(xYSeriesCollection1);
      xYSeriesCollection0.getIntervalWidth();
      XYSeries xYSeries2 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeSeries(xYSeries2);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      xYSeriesCollection0.vetoableChange(propertyChangeEvent0);
      xYSeriesCollection0.getDomainUpperBound(false);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX((-2601), (-1456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getIntervalPositionFactor();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("").when(xYSeries0).toString();
      doReturn("").when(xYSeries0).getKey();
      doReturn(0.5).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      DatasetGroup datasetGroup0 = xYSeriesCollection1.getGroup();
      xYSeriesCollection1.setGroup(datasetGroup0);
      xYSeriesCollection1.getStartX(0, 0);
      xYSeriesCollection1.getIntervalPositionFactor();
      xYSeriesCollection1.getSeriesKey(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection1.indexOf((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("csU3ON").when(xYSeries0).toString();
      doReturn(538.3168573).when(xYSeries0).getMaxX();
      doReturn(538.3168573).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainBounds(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getYValue(435, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 435, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(",'I4ms|J,UCM)", "Duplicate items in 'rowKeys'.").when(xYSeries0).toString();
      doReturn(",'I4ms|J,UCM)").when(xYSeries0).getKey();
      doReturn(Double.NEGATIVE_INFINITY).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainLowerBound(false);
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      xYSeriesCollection0.getIntervalPositionFactor();
      xYSeriesCollection0.getSeriesKey(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.indexOf((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("9+k").when(xYSeries0).toString();
      doReturn(4294.0).when(xYSeries0).getMaxY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeUpperBound(true);
      xYSeriesCollection0.hashCode();
      int int0 = (-949);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries((-949));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("9", "i'DPHgv7Ml2YsF |o]F", "i'DPHgv7Ml2YsF |o]F").when(xYSeries0).toString();
      doReturn(1335.6, 1335.6).when(xYSeries0).getMaxX();
      doReturn(1335.6).when(xYSeries0).getMinX();
      doReturn((-2217.5729)).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainLowerBound(true);
      xYSeriesCollection0.getRangeLowerBound(true);
      xYSeriesCollection0.getDomainUpperBound(false);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      XYSeriesCollection xYSeriesCollection2 = (XYSeriesCollection)xYSeriesCollection1.clone();
      xYSeriesCollection0.equals(xYSeriesCollection2);
      xYSeriesCollection2.getRangeLowerBound(true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYSeries0).getKey();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = 10;
      int int1 = 0;
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYSeries1).getKey();
      xYSeriesCollection0.addSeries(xYSeries1);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.seriesChanged(seriesChangeEvent0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX(1910, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1910, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("dataset", (String) null).when(xYSeries0).toString();
      doReturn(true).when(xYSeries0).getAutoSort();
      doReturn(0.0).when(xYSeries0).getMaxX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainUpperBound(false);
      xYSeriesCollection0.setIntervalWidth(0.5);
      xYSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("").when(xYSeries0).toString();
      doReturn(true).when(xYSeries0).getAutoSort();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.setIntervalWidth(0.5);
      xYSeriesCollection0.getDomainOrder();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(xYSeries0).toString();
      doReturn(0.0, 0.0).when(xYSeries0).getMinX();
      doReturn((Number) null, (Number) null, (Number) null).when(xYSeries0).getX(anyInt());
      doReturn((Number) null, (Number) null).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      xYSeriesCollection0.vetoableChange(propertyChangeEvent0);
      int int0 = 0;
      xYSeriesCollection0.getEndX(0, 0);
      xYSeriesCollection0.getSeries();
      xYSeriesCollection0.getIntervalPositionFactor();
      xYSeriesCollection0.getY(0, 0);
      int int1 = 0;
      xYSeriesCollection0.getStartX(0, 0);
      xYSeriesCollection0.getDomainLowerBound(false);
      xYSeriesCollection0.getXValue(0, 0);
      int int2 = 0;
      xYSeriesCollection0.getStartY(0, 0);
      xYSeriesCollection0.getDomainLowerBound(false);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection((XYSeries) null);
      xYSeriesCollection1.setNotify(false);
      // Undeclared exception!
      try { 
        xYSeriesCollection1.getEndX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(xYSeries0).toString();
      doReturn((Comparable) null).when(xYSeries0).getKey();
      doReturn(0, 0).when(xYSeries0).getItemCount();
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      doReturn((Number) null).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      boolean boolean0 = true;
      xYSeriesCollection0.setAutoWidth(true);
      xYSeriesCollection0.getSeriesKey(0);
      xYSeriesCollection0.getEndY(0, 0);
      xYSeriesCollection0.isAutoWidth();
      xYSeriesCollection0.getX(0, 1148);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX(1148, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1148, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = 0;
      xYSeriesCollection0.getStartX(0, 0);
      XYSeries xYSeries1 = xYSeriesCollection0.getSeries(0);
      xYSeriesCollection0.removeSeries(xYSeries1);
      boolean boolean0 = false;
      xYSeriesCollection0.getDomainLowerBound(false);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      xYSeriesCollection0.vetoableChange(propertyChangeEvent0);
      xYSeriesCollection0.getRangeUpperBound(false);
      int int1 = 1;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartX(1, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(xYSeries0).toString();
      doReturn((Comparable) null).when(xYSeries0).getKey();
      doReturn(0.0).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainLowerBound(false);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      xYSeriesCollection0.getIntervalPositionFactor();
      xYSeriesCollection0.getSeriesKey(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.indexOf((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.indexOf(xYSeries0);
      Comparable<String> comparable0 = null;
      xYSeriesCollection0.indexOf((Comparable) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(0, 1094);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn((Comparable) null).when(xYSeries0).getKey();
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      xYSeriesCollection0.getStartX(0, 0);
      xYSeriesCollection0.getIntervalPositionFactor();
      xYSeriesCollection0.getSeriesKey(0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.indexOf((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      DatasetGroup datasetGroup0 = xYSeriesCollection1.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      xYSeriesCollection0.getDomainUpperBound(false);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = 3704;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries(3704);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.removeChangeListener((DatasetChangeListener) null);
      xYSeriesCollection0.validateObject();
      int int0 = 0;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn((Comparable) null, (Comparable) null).when(xYSeries0).getKey();
      doReturn(0.0).when(xYSeries0).getMaxY();
      doReturn(0.0).when(xYSeries0).getMinY();
      doReturn((Number) null, (Number) null).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.hashCode();
      xYSeriesCollection0.getEndY(0, 0);
      xYSeriesCollection0.getRangeBounds(false);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.getSeriesIndex(comparable0);
      xYSeriesCollection0.getY(0, 0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.getSeriesIndex(comparable1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn((Comparable) null).when(xYSeries0).getKey();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getSeriesKey(0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getEndY(0, 2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getSeriesCount();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getItemCount(419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getStartX(0, 703);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartX((-3946), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getSeries();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(xYSeries0).toString();
      doReturn((Object) null).when(xYSeries0).clone();
      doReturn(0.0).when(xYSeries0).getMinY();
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeLowerBound(true);
      xYSeriesCollection0.getSeries(0);
      xYSeriesCollection0.getStartX(0, 5);
      xYSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(5, (-2715));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0).when(xYSeries0).getItemCount();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getItemCount(0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndXValue(1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxX();
      doReturn(0.0).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainBounds(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getYValue(435, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 435, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainOrder();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries((-1956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = (-4635);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries((-4635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX(1931, 1113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1931, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeriesIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeSeries(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.indexOf(xYSeries1);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndX((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection0.equals(xYSeriesCollection1);
      int int0 = 1399;
      // Undeclared exception!
      try { 
        xYSeriesCollection1.getStartY((-1828), 1399);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = (-703);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeriesKey((-703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYSeries1).getKey();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.addSeries(xYSeries1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries1).toString();
      doReturn(0.0).when(xYSeries1).getMaxX();
      doReturn(0.0).when(xYSeries1).getMinX();
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection1.getDomainUpperBound(true);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getYValue((-1280), (-1952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxY();
      doReturn(0.0).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.validateObject();
      xYSeriesCollection0.getRangeBounds(true);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYSeries1).getKey();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.addSeries(xYSeries1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.addSeries((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = 0;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getY((-494), 3425);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.isAutoWidth();
      xYSeriesCollection0.setNotify(true);
      xYSeriesCollection0.getDomainBounds(false);
      int int0 = (-1300);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((-1300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxY();
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = 0;
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection0.hasListener(xYSeriesCollection1);
      XYSeries xYSeries2 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.indexOf(xYSeries2);
      xYSeriesCollection0.getRangeUpperBound(false);
      xYSeriesCollection0.getEndX(0, 0);
      xYSeriesCollection0.removeAllSeries();
      xYSeriesCollection0.getDomainUpperBound(false);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.setIntervalWidth(1157.0);
      xYSeriesCollection0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = 0;
      XYSeries xYSeries1 = null;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries((XYSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYSeries0).getKey();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: Mock for Comparable, hashCode: 744314056
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX((-182), (-182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Comparable) null).when(xYSeries0).getKey();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      boolean boolean0 = false;
      xYSeriesCollection0.getSeriesCount();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((Comparable) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 1
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getIntervalPositionFactor();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: Mock for Comparable, hashCode: 410831712
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(xYSeries0).toString();
      doReturn(0, 0).when(xYSeries0).getItemCount();
      doReturn(0.0).when(xYSeries0).getMaxY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.setAutoWidth(true);
      xYSeriesCollection0.getRangeUpperBound(true);
      xYSeriesCollection0.removeAllSeries();
      xYSeriesCollection0.clone();
      xYSeriesCollection0.hashCode();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalPositionFactor((-1708.526348));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.removeAllSeries();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndX(3, (-999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      Comparable<IntervalXYDelegate> comparable0 = (Comparable<IntervalXYDelegate>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.getSeriesIndex(comparable0);
      xYSeriesCollection0.getRangeLowerBound(true);
      xYSeriesCollection0.getRangeUpperBound(true);
      xYSeriesCollection0.setAutoWidth(true);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xYSeries0).clone();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndY(2170, 2170);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2170, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getIntervalWidth();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getItemCount(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      boolean boolean0 = false;
      int int0 = 0;
      xYSeriesCollection0.getRangeUpperBound(true);
      xYSeriesCollection0.getRangeUpperBound(false);
      int int1 = 1;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.hashCode();
      xYSeriesCollection0.getSeriesIndex(6960);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalPositionFactor((-1969.235945530751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = (-4635);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeriesKey((-4635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalPositionFactor((-4139.80456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = 1412;
      int int1 = 0;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartX(1412, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1412, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeBounds(false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxX();
      doReturn(0.0).when(xYSeries0).getMinX();
      doReturn(0.0).when(xYSeries0).getMinY();
      doReturn((Number) null, (Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeChangeListener(datasetChangeListener0);
      xYSeriesCollection0.setAutoWidth(false);
      xYSeriesCollection0.getStartXValue(0, 0);
      xYSeriesCollection0.getDomainLowerBound(true);
      xYSeriesCollection0.getRangeLowerBound(false);
      xYSeriesCollection0.getX(0, 1);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndY(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetGroup datasetGroup0 = xYSeriesCollection0.getGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeSeries(xYSeries0);
      xYSeriesCollection0.getDomainBounds(false);
      xYSeriesCollection0.getDomainLowerBound(false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.removeAllSeries();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndY((-1045), (-1093));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = 0;
      xYSeriesCollection0.getStartX(0, 0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalWidth((-845.576290238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'width' argument.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Comparable<XYSeriesCollection> comparable0 = (Comparable<XYSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.setAutoWidth(false);
      int int0 = 2237;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getY(2237, 1005);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2237, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndY(1547, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1547, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      xYSeriesCollection0.validateObject();
      xYSeriesCollection0.vetoableChange(propertyChangeEvent0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalWidth((-2217.5729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'width' argument.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.setIntervalWidth(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartX(2020, 833);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2020, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xYSeries0).clone();
      doReturn((Number) null).when(xYSeries0).getX(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getEndXValue(0, 0);
      xYSeriesCollection0.clone();
      xYSeriesCollection0.setAutoWidth(false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.setAutoWidth(true);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getYValue((-553), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxX();
      doReturn(0.0).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.setIntervalWidth(537.26247);
      boolean boolean0 = false;
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeSeries(xYSeries1);
      int int0 = (-3677);
      xYSeriesCollection0.getDomainLowerBound(true);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY((-703), 376);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainOrder();
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyChangeEvent0).getPropertyName();
      xYSeriesCollection0.vetoableChange(propertyChangeEvent0);
      xYSeriesCollection0.getRangeLowerBound(true);
      Object object0 = xYSeriesCollection0.clone();
      xYSeriesCollection0.equals(object0);
      xYSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getSeries((-3677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = 2278;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getYValue(2278, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2278, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(xYSeries0).getY(anyInt());
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getY(0, 0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("wRp<n/f7{LVN!F=P1").when(xYSeries1).toString();
      doReturn("wRp<n/f7{LVN!F=P1", "wRp<n/f7{LVN!F=P1").when(xYSeries1).getKey();
      doReturn(Double.POSITIVE_INFINITY).when(xYSeries1).getMaxY();
      doReturn(Double.POSITIVE_INFINITY).when(xYSeries1).getMinY();
      doReturn((Number) null, (Number) null).when(xYSeries1).getY(anyInt());
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection1.hashCode();
      xYSeriesCollection1.getEndY(0, 0);
      xYSeriesCollection1.getRangeBounds(false);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.getSeriesIndex(comparable0);
      xYSeriesCollection1.getY(0, (-10));
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection1.getSeriesIndex(comparable1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = (-1008);
      xYSeriesCollection0.getDomainLowerBound(false);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalPositionFactor((-2273.53923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getDomainOrder();
      xYSeriesCollection0.getIntervalPositionFactor();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX((-649), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(xYSeries0).toString();
      doReturn(0.0).when(xYSeries0).getMaxX();
      doReturn(0.0).when(xYSeries0).getMinX();
      doReturn(0.0).when(xYSeries0).getMinY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.removeChangeListener((DatasetChangeListener) null);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeSeries(xYSeries1);
      xYSeriesCollection0.getDomainBounds(true);
      xYSeriesCollection0.getRangeLowerBound(true);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("Key").when(xYSeries0).toString();
      doReturn((-94.801)).when(xYSeries0).getMinX();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getDomainLowerBound(false);
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection1.getSeries();
      xYSeriesCollection1.setNotify(false);
      xYSeriesCollection0.hasListener(xYSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.removeChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalPositionFactor((-1548.799583502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      boolean boolean0 = false;
      xYSeriesCollection0.getDomainUpperBound(false);
      xYSeriesCollection0.removeChangeListener((DatasetChangeListener) null);
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.indexOf(xYSeries0);
      XYSeries xYSeries1 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      xYSeriesCollection0.indexOf(xYSeries1);
      xYSeriesCollection0.setIntervalPositionFactor(0.0);
      int int0 = 10;
      int int1 = 0;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndX(10, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int int0 = (-3);
      xYSeriesCollection0.getDomainOrder();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn(comparable0).when(xYSeries0).getKey();
      xYSeriesCollection0.addSeries(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.removeSeries((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYSeries xYSeries0 = mock(XYSeries.class, new ViolatedAssumptionAnswer());
      doReturn("V2").when(xYSeries0).toString();
      doReturn(1019.81981667).when(xYSeries0).getMaxY();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeUpperBound(false);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartXValue((-1), (-4844));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
