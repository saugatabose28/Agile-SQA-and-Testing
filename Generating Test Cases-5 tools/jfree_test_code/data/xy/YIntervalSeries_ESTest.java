/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:19:21 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.xy.YIntervalDataItem;
import org.jfree.data.xy.YIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YIntervalSeries_ESTest extends YIntervalSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0);
      yIntervalSeries0.add(0.0, 0.0, (-1530.518309975), 0.0);
      assertTrue(yIntervalSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<YIntervalDataItem> comparable0 = (Comparable<YIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0);
      yIntervalSeries0.add(944.275959877, (-1970.6738), 2049.278251289, 2049.278251289);
      assertTrue(yIntervalSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      yIntervalSeries0.add((double) (-3278), (double) 678, (double) 678, (double) 678);
      double double0 = yIntervalSeries0.getYValue(0);
      assertEquals(678.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      yIntervalSeries0.add((double) 0, (-874.796000974), (-874.796000974), (-874.796000974));
      double double0 = yIntervalSeries0.getYValue(0);
      assertEquals((-874.796000974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<YIntervalDataItem> comparable0 = (Comparable<YIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, false, false);
      yIntervalSeries0.add(0.0, 0.0, 0.0, 0.0);
      double double0 = yIntervalSeries0.getYLowValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      yIntervalSeries0.add((double) (-3296), (-874.796000974), (-874.796000974), (-874.796000974));
      double double0 = yIntervalSeries0.getYLowValue(0);
      assertEquals((-874.796000974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      yIntervalSeries0.add((double) (-3296), (-874.796000974), (-874.796000974), (-874.796000974));
      double double0 = yIntervalSeries0.getYHighValue(0);
      assertEquals((-874.796000974), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      yIntervalSeries0.add((double) 0, (-874.796000974), (-874.796000974), (-874.796000974));
      YIntervalDataItem yIntervalDataItem1 = (YIntervalDataItem)yIntervalSeries0.getDataItem(0);
      assertEquals(0.0, yIntervalDataItem1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, true, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getYValue(24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, false, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getYLowValue((-822));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<YIntervalDataItem> comparable0 = (Comparable<YIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, false, false);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getYHighValue((-609));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, false, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getX((-1241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getDataItem((-3255));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.add((YIntervalDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      YIntervalDataItem yIntervalDataItem1 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(yIntervalDataItem1).compareTo(any());
      yIntervalSeries0.add(yIntervalDataItem1, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.add((double) (-3296), (-874.796000974), (-874.796000974), (-874.796000974));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YIntervalSeries yIntervalSeries0 = null;
      try {
        yIntervalSeries0 = new YIntervalSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      YIntervalSeries yIntervalSeries0 = null;
      try {
        yIntervalSeries0 = new YIntervalSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getYLowValue(93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YIntervalDataItem yIntervalDataItem0 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(yIntervalDataItem0, true, true);
      yIntervalSeries0.add((double) (-3296), (-874.796000974), (-874.796000974), (-874.796000974));
      YIntervalDataItem yIntervalDataItem1 = mock(YIntervalDataItem.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        yIntervalSeries0.add(yIntervalDataItem1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, false, false);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getYValue((-265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, true, false);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getYHighValue(2216);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2216, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(comparable0, false, false);
      // Undeclared exception!
      try { 
        yIntervalSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
