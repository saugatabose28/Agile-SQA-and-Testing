/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:16:29 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.xy.XYIntervalDataItem;
import org.jfree.data.xy.XYIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYIntervalSeries_ESTest extends XYIntervalSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      xYIntervalSeries0.add(102002.0, 102002.0, (-1319.8), (-1319.8), 102002.0, Double.POSITIVE_INFINITY);
      assertEquals(1, xYIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0, true, true);
      xYIntervalSeries0.add(700.0, (-6628.45491), (double) Integer.MAX_VALUE, (-6628.45491), 0.0, 0.0);
      assertEquals(1, xYIntervalSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      xYIntervalSeries0.add(102017.1839877246, 102017.1839877246, (-1297.0297755398008), (-1297.0297755398008), 102017.1839877246, 102017.1839877246);
      double double0 = xYIntervalSeries0.getYValue(0);
      assertEquals((-1297.0297755398008), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYIntervalDataItem1).toString();
      doReturn(0.0).when(xYIntervalDataItem1).getYLowValue();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, false, false);
      xYIntervalSeries0.add(xYIntervalDataItem1, false);
      double double0 = xYIntervalSeries0.getYLowValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYIntervalDataItem1).toString();
      doReturn(0.0).when(xYIntervalDataItem1).getYLowValue();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, false, false);
      xYIntervalSeries0.add(xYIntervalDataItem1, false);
      double double0 = xYIntervalSeries0.getYLowValue(0);
      assertEquals(284.1293135, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, true, true);
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xYIntervalDataItem1).toString();
      doReturn(0.0).when(xYIntervalDataItem1).getYHighValue();
      xYIntervalSeries0.add(xYIntervalDataItem1, true);
      double double0 = xYIntervalSeries0.getYHighValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, true, true);
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn("y(pIH!kN45").when(xYIntervalDataItem1).toString();
      doReturn(5.51).when(xYIntervalDataItem1).getYHighValue();
      xYIntervalSeries0.add(xYIntervalDataItem1, true);
      double double0 = xYIntervalSeries0.getYHighValue(0);
      assertEquals(5.51, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, true, true);
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn("X/'F5aB7Lw0!").when(xYIntervalDataItem1).toString();
      doReturn((-2328.90692)).when(xYIntervalDataItem1).getYHighValue();
      xYIntervalSeries0.add(xYIntervalDataItem1, true);
      double double0 = xYIntervalSeries0.getYHighValue(0);
      assertEquals((-2328.90692), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, true, true);
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn("X/'F5aB7Lw0!").when(xYIntervalDataItem1).toString();
      doReturn((Double) null).when(xYIntervalDataItem1).getX();
      xYIntervalSeries0.add(xYIntervalDataItem1, true);
      Number number0 = xYIntervalSeries0.getX(0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, true, true);
      Double double0 = new Double(0.0);
      XYIntervalDataItem xYIntervalDataItem1 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      doReturn("y(pIH!kN45").when(xYIntervalDataItem1).toString();
      doReturn(double0).when(xYIntervalDataItem1).getX();
      xYIntervalSeries0.add(xYIntervalDataItem1, true);
      Number number0 = xYIntervalSeries0.getX(0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYValue((-1126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYLowValue((-1136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYHighValue((-585));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXLowValue((-1126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXHighValue((-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getX((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0, true, true);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = null;
      try {
        xYIntervalSeries0 = new XYIntervalSeries((Comparable) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = null;
      try {
        xYIntervalSeries0 = new XYIntervalSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getDataItem((-1038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYHighValue(2017);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2017, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXHighValue(19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYLowValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0, true, true);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXLowValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<XYIntervalDataItem> comparable0 = (Comparable<XYIntervalDataItem>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(comparable0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYIntervalDataItem xYIntervalDataItem0 = mock(XYIntervalDataItem.class, new ViolatedAssumptionAnswer());
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYIntervalDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getX(50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
