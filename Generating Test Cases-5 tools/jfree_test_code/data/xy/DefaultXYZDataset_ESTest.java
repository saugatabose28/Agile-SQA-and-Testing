/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:38:06 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DomainOrder;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.DefaultXYZDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultXYZDataset_ESTest extends DefaultXYZDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      
      DatasetGroup datasetGroup0 = defaultXYZDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultXYZDataset0.removeChangeListener((DatasetChangeListener) null);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      defaultXYZDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1629.54492016);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1340.9651590146);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2258.2909323064);
      doubleArray1[5] = 1939.0660233303433;
      doubleArray1[6] = 452.7;
      doubleArray1[7] = (-1270.9978);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1939.0660233303433;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1629.54492016);
      doubleArray2[4] = (-1340.9651590146);
      doubleArray2[5] = (-1340.9651590146);
      doubleArray2[6] = (-1629.54492016);
      doubleArray2[7] = 452.7;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2258.2909323064);
      doubleArray3[2] = 452.7;
      doubleArray3[3] = 1939.0660233303433;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain three arrays all having the same length.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      boolean boolean0 = defaultXYZDataset0.equals(defaultXYZDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1299.388059594;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1299.388059594;
      doubleArray2[2] = 1299.388059594;
      doubleArray2[3] = 1299.388059594;
      doubleArray2[4] = 1299.388059594;
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 3.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getZValue((-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      int int0 = (-1);
      int int1 = (-1430);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getXValue((-1), (-1430));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = null;
      defaultXYZDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 345.9;
      doubleArray1[1] = (-1917.389);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2448.07793835;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2409.996422);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2448.07793835;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain three arrays all having the same length.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-829.46214078643);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-829.46214078643);
      doubleArray2[1] = (-829.46214078643);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-829.46214078643);
      doubleArray3[1] = (-829.46214078643);
      doubleArray3[2] = (-829.46214078643);
      doubleArray3[3] = (-829.46214078643);
      doubleArray3[4] = (-829.46214078643);
      doubleArray3[5] = (-829.46214078643);
      doubleArray3[6] = (-829.46214078643);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 2028.088442;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain three arrays all having the same length.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      defaultXYZDataset0.validateObject();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      int int0 = (-658);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getY(1797, (-658));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1797, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYZDataset0.indexOf(comparable0);
      assertEquals((-1), int0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries((-1), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 3.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = 0;
      int int1 = (-2174);
      defaultXYZDataset0.setNotify(false);
      assertFalse(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getZ(0, (-2174));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset1 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeChangeListener(datasetChangeListener0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset2 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset2.getSeriesCount());
      assertTrue(defaultXYZDataset2.getNotify());
      
      defaultXYZDataset0.hashCode();
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset2));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      int int0 = (-2538);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getYValue((-1), (-2538));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DomainOrder domainOrder0 = defaultXYZDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getYValue(391, (-824));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 391, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DefaultXYZDataset defaultXYZDataset1 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      defaultXYZDataset0.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset2 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset0);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset2.getNotify());
      assertEquals(0, defaultXYZDataset2.getSeriesCount());
      
      int int0 = 1;
      DatasetGroup datasetGroup0 = defaultXYZDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset2));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultXYZDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset2));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = defaultXYZDataset0.getGroup();
      assertNotNull(datasetGroup1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertSame(datasetGroup1, datasetGroup0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset2));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup1.getID());
      
      defaultXYZDataset0.setGroup(datasetGroup1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertSame(datasetGroup1, datasetGroup0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset2));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup1.getID());
      
      int int1 = (-1618);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getZValue(1, (-1618));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getItemCount(299);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYZDataset1.hasListener(defaultXYZDataset0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertFalse(boolean0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      defaultXYZDataset0.seriesChanged((SeriesChangeEvent) null);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultXYZDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultXYZDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean1 = defaultXYZDataset0.hasListener(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultXYZDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeSeries(comparable0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = 809;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getXValue(809, 809);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 809, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset1 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      int int0 = (-867);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getSeriesKey((-867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = 1637;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeChangeListener(datasetChangeListener1);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      defaultXYZDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getX(11, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYZDataset0.hasListener(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertFalse(boolean0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      defaultXYZDataset0.setNotify(false);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset2 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset2.getSeriesCount());
      assertFalse(defaultXYZDataset2.getNotify());
      
      int int0 = (-3238);
      int int1 = 6;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getY((-3238), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' is null.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      
      DatasetGroup datasetGroup0 = defaultXYZDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultXYZDataset0.removeChangeListener((DatasetChangeListener) null);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      defaultXYZDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      DefaultXYZDataset defaultXYZDataset2 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset2);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset2, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset2.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(0, defaultXYZDataset2.getSeriesCount());
      assertTrue(defaultXYZDataset2.getNotify());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getYValue((-2955), (-2955));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getSeriesKey(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset1 = (DefaultXYZDataset)defaultXYZDataset0.clone();
      assertNotNull(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      
      boolean boolean0 = defaultXYZDataset0.equals(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(boolean0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.getNotify());
      
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 452.7;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 452.7;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 452.7;
      doubleArray8[4] = (-2287.7332902);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      
      doubleArray9[0] = Double.NaN;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 452.7;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = 0.0;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries((Comparable) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'seriesKey' cannot be null.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYZDataset0.hasListener(defaultXYZDataset1);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertFalse(boolean0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      defaultXYZDataset0.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      int int0 = defaultXYZDataset1.getSeriesCount();
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertEquals(0, int0);
      assertTrue(defaultXYZDataset1.getNotify());
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      
      int int1 = defaultXYZDataset0.indexOf(0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      
      DomainOrder domainOrder0 = defaultXYZDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertNotSame(defaultXYZDataset0, defaultXYZDataset1);
      assertTrue(defaultXYZDataset0.equals((Object)defaultXYZDataset1));
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(defaultXYZDataset0.getNotify());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getZ((-1065), (-1065));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2205.1514201053;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 640.2;
      doubleArray1[3] = (-1356.383701);
      doubleArray1[4] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2205.1514201053;
      doubleArray2[1] = 2205.1514201053;
      doubleArray2[2] = 345.9;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1356.383701);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 2205.1514201053;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 345.9;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 2205.1514201053;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 2205.1514201053;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries((Comparable) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'seriesKey' cannot be null.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeChangeListener(datasetChangeListener0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeSeries(comparable0);
      int int0 = (-1188);
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getItemCount((-1188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1706.24374775;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-350.8278236);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-761.4);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = 1883.144091892;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1883.144091892;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-761.4);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = (-2494.34265);
      doubleArray4[7] = 1.0;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries((Comparable) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'seriesKey' cannot be null.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      defaultXYZDataset0.equals((Object) null);
      int int0 = defaultXYZDataset0.getSeriesCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Comparable<DefaultXYZDataset> comparable0 = (Comparable<DefaultXYZDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeSeries(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getSeriesKey(1412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getX((-1472), (-1472));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeChangeListener(datasetChangeListener0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.removeSeries(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYZDataset0.hashCode();
      defaultXYZDataset0.getDomainOrder();
      defaultXYZDataset0.getDomainOrder();
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getZ((-2181), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1816.7218155767277);
      doubleArray1[1] = 391.483;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-3357.058);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1816.7218155767277);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1816.7218155767277);
      doubleArray4[4] = (-1816.7218155767277);
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 391.483;
      doubleArray5[2] = 391.483;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (-1816.7218155767277);
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 391.483;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 391.483;
      doubleArray6[3] = 391.483;
      doubleArray6[4] = (-2496.3519948901094);
      doubleArray6[5] = (-1816.7218155767277);
      doubleArray6[6] = 391.483;
      doubleArray6[7] = (-3357.058);
      doubleArray6[8] = (-3357.058);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 1187.77018842;
      doubleArray7[1] = (-1816.7218155767277);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 391.483;
      doubleArray7[6] = (-1816.7218155767277);
      doubleArray7[7] = 391.483;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 3.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getSeriesKey((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Object object0 = defaultXYZDataset0.clone();
      defaultXYZDataset0.equals(object0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1299.388059594;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1299.388059594;
      doubleArray2[2] = 1299.388059594;
      doubleArray2[4] = 1299.388059594;
      doubleArray0[1] = doubleArray2;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Object object0 = defaultXYZDataset0.clone();
      defaultXYZDataset0.equals(object0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1327.53271056349;
      doubleArray1[1] = (-24.637348322696504);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-24.637348322696504);
      doubleArray2[1] = 1327.53271056349;
      doubleArray1[0] = 1327.53271056349;
      doubleArray2[3] = 1327.53271056349;
      defaultXYZDataset0.removeSeries((-24.637348322696504));
      doubleArray2[4] = 1327.53271056349;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 3.
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      defaultXYZDataset0.getGroup();
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getItemCount(371);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }
}
