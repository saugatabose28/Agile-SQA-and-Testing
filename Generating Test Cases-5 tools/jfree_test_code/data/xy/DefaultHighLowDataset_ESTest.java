/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:10:11 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultHighLowDataset_ESTest extends DefaultHighLowDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1265.8290571);
      doubleArray0[1] = 1729.24261581483;
      doubleArray0[2] = 675.02;
      doubleArray0[3] = (-3959.34);
      doubleArray0[4] = 1573.7;
      doubleArray0[5] = (-3813.1705485173);
      doubleArray0[6] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.getXDate(1, 0);
      dateArray0[0] = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1265.8290571);
      doubleArray1[1] = 1729.24261581483;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      defaultHighLowDataset0.getHighValue(0, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2182.026001;
      doubleArray0[1] = (-734.137);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[7] = (-2013.6328871279754);
      DefaultHighLowDataset.createNumberArray(doubleArray0);
      Date[] dateArray0 = new Date[10];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(2182.026001, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.hashCode();
      int int0 = (-1);
      int int1 = 1;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX((-1), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.getOpenValue(0, 0);
      defaultHighLowDataset0.getVolumeValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-516.6941);
      doubleArray0[1] = 2078.89897517294;
      doubleArray0[2] = (-2486.233);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 3174.78539132122;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2405.27982784);
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      DefaultHighLowDataset.createNumberArray(doubleArray0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-516.6941);
      doubleArray1[3] = (-516.6941);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-516.6941);
      doubleArray1[8] = (-516.6941);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-516.6941);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2078.89897517294;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (-2486.233);
      doubleArray2[6] = 2078.89897517294;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(Double.NaN, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray2);
      defaultHighLowDataset0.getCloseValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = 2782.0128356174;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1840.6641449041297);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1939.6585917012;
      DefaultHighLowDataset.createNumberArray(doubleArray0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1939.6585917012;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 5.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1939.6585917012;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-539.5133780106953);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1939.6585917012;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(2782.0128356174, dateArray0, doubleArray1, doubleArray0, doubleArray2, doubleArray2, doubleArray2);
      defaultHighLowDataset1.validateObject();
      defaultHighLowDataset0.equals(defaultHighLowDataset1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 304.4827;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 219.9533383537;
      doubleArray0[4] = 11.0;
      doubleArray0[5] = 1506.65028505343;
      doubleArray0[6] = 1603.5;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = (-2.41604542086);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1603.5;
      doubleArray1[1] = 11.0;
      doubleArray1[2] = 219.9533383537;
      doubleArray1[3] = (-2.41604542086);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 304.4827;
      doubleArray1[6] = 1.0;
      Date[] dateArray0 = new Date[0];
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1140.592113329;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1603.5;
      doubleArray2[6] = 1506.65028505343;
      doubleArray2[7] = 1506.65028505343;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1603.5;
      doubleArray3[1] = 1506.65028505343;
      doubleArray3[2] = (double) 1438;
      doubleArray3[3] = (double) 702;
      doubleArray3[4] = 11.0;
      doubleArray3[5] = (-1824.5881102717385);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray1, doubleArray0, doubleArray1, doubleArray2, doubleArray3);
      defaultHighLowDataset0.getClose(0, 5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 753.6732226802648;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 753.6732226802648;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 753.6732226802648;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {753.6732226802648, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {753.6732226802648, 0.0, 1.0, 0.0, 0.0, 0.0, 753.6732226802648}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getLowValue(0, 5);
      assertArrayEquals(new double[] {753.6732226802648, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {753.6732226802648, 0.0, 1.0, 0.0, 0.0, 0.0, 753.6732226802648}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.getLow(0, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 843.041176;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset1);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertTrue(boolean0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      defaultHighLowDataset0.getOpenValue(1, 1);
      // Undeclared exception!
      try { 
        defaultHighLowDataset1.getOpen(1, 346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 346
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 753.6732226802648;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 753.6732226802648;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 753.6732226802648;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 753.6732226802648;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      defaultHighLowDataset0.getLowValue(0, 5);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 753.6732226802648;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-9.322828058600393);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 753.6732226802648;
      doubleArray1[1] = (-9.322828058600393);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-9.322828058600393);
      doubleArray1[4] = (-9.322828058600393);
      doubleArray1[5] = (-9.322828058600393);
      doubleArray1[6] = 753.6732226802648;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      defaultHighLowDataset0.getLowValue(0, 5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[7];
      Date[] dateArray1 = new Date[5];
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(date0).getTime();
      doReturn("' argument.").when(date0).toString();
      dateArray1[0] = date0;
      dateArray1[1] = date0;
      dateArray1[2] = date0;
      dateArray1[3] = date0;
      dateArray1[4] = date0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 234.2;
      doubleArray0[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray1, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.addChangeListener(datasetChangeListener0);
      Date date1 = defaultHighLowDataset0.getXDate(2, 2);
      dateArray0[0] = date1;
      defaultHighLowDataset0.getX(5, 2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.equals(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 753.6732226802648;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 753.6732226802648;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 753.6732226802648;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      defaultHighLowDataset0.getLowValue(0, 5);
      int int0 = 1139;
      int int1 = 2;
      defaultHighLowDataset0.getLow(1139, 2);
      int int2 = 1;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 216.602;
      doubleArray0[2] = (-4920.764531623918);
      doubleArray0[3] = 20.16444422994;
      doubleArray0[4] = 426.6432;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.removeChangeListener(datasetChangeListener0);
      defaultHighLowDataset0.getOpenValue(1, 5);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY((-1703), (-1703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1703
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2804.6633117;
      doubleArray0[0] = 217.87738521082;
      doubleArray0[3] = 217.87738521082;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 217.87738521082;
      doubleArray1[1] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      defaultHighLowDataset0.getOpen(2, 2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[0] = (-37.67);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-37.67);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1271.8532064218248;
      doubleArray1[3] = (-37.67);
      doubleArray1[4] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      int int0 = 0;
      defaultHighLowDataset0.getVolumeValue(0, 0);
      defaultHighLowDataset0.getVolume(0, 0);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1314.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-498.6918883088);
      doubleArray0[4] = (-1491.82);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-3119.545208);
      doubleArray0[7] = 1694.74113;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.getVolume(4, 4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 506.84213227;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1093.7554);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2275.74960689;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      defaultHighLowDataset0.indexOf(1.0);
      defaultHighLowDataset0.hashCode();
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(1.0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      defaultHighLowDataset0.hasListener(defaultHighLowDataset1);
      defaultHighLowDataset0.getHigh(884, 1);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(884, 884);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 884
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3085.6464781929;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-2245.393);
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(3085.6464781929, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultHighLowDataset0.getGroup();
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(datasetGroup0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultHighLowDataset0.setGroup(datasetGroup0);
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultHighLowDataset0.hashCode();
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getClose((-1659), 1);
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpenValue(1, (-4352));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4352
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2804.6633117;
      doubleArray0[2] = 217.87738521082;
      doubleArray0[3] = (-443.0604);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 217.87738521082;
      doubleArray1[1] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2804.6633117, 217.87738521082, (-443.0604)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {217.87738521082, 0.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getOpen(2, 2);
      assertArrayEquals(new double[] {0.0, 2804.6633117, 217.87738521082, (-443.0604)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {217.87738521082, 0.0}, doubleArray1, 0.01);
      assertNotNull(number0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(217.87738521082, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1301.118587653;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 234.2;
      doubleArray0[6] = 0.0;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1301.118587653, 0.0, (-1.0), 234.2, 0.0}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1301.118587653, 0.0, (-1.0), 234.2, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double0 = defaultHighLowDataset0.getCloseValue((-1136), 2);
      assertArrayEquals(new double[] {0.0, 0.0, 1301.118587653, 0.0, (-1.0), 234.2, 0.0}, doubleArray0, 0.01);
      assertEquals(1301.118587653, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY((-1136), 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-334.56891);
      doubleArray0[1] = 1670.1857;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2517.8);
      doubleArray0[4] = (-70.2655);
      doubleArray0[5] = (-574.390367085);
      doubleArray0[6] = 2870.4;
      doubleArray0[7] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.validateObject();
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.removeChangeListener((DatasetChangeListener) null);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getItemCount(0);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getClose(0, 0);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertNotNull(number0);
      assertEquals((-334.56891), number0);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int1 = defaultHighLowDataset0.getItemCount(0);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number1 = defaultHighLowDataset0.getHigh(0, 0);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals((-334.56891), number1);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double0 = defaultHighLowDataset0.getYValue((-373), 0);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertEquals((-334.56891), double0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Comparable<DefaultHighLowDataset> comparable1 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = defaultHighLowDataset0.indexOf(comparable1);
      assertArrayEquals(new double[] {(-334.56891), 1670.1857, 0.0, (-2517.8), (-70.2655), (-574.390367085), 2870.4, 0.0}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int3 = (-2651);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate((-2651), (-2651));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2651
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      boolean boolean0 = defaultHighLowDataset0.equals("");
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolumeValue((-1), (-1434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1434
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3085.6464781929;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-2245.393);
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {3085.6464781929, Double.POSITIVE_INFINITY, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(3085.6464781929, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3085.6464781929, Double.POSITIVE_INFINITY, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = 1;
      int int1 = (-4352);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpenValue(1, (-4352));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4352
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-37.67);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-37.67);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1271.8532064218248;
      doubleArray1[3] = (-37.67);
      doubleArray1[4] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-37.67)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-37.67), 1.0, 1271.8532064218248, (-37.67), 1.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = 0;
      double double0 = defaultHighLowDataset0.getVolumeValue(0, 0);
      assertArrayEquals(new double[] {1.0, (-37.67)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-37.67), 1.0, 1271.8532064218248, (-37.67), 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = defaultHighLowDataset0.getVolume(0, 0);
      assertArrayEquals(new double[] {1.0, (-37.67)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-37.67), 1.0, 1271.8532064218248, (-37.67), 1.0}, doubleArray1, 0.01);
      assertNotNull(number0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(number0.equals((Object)double0));
      assertEquals(1.0, number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 829.7494002104;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-638.318742188);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2222.993577;
      doubleArray0[7] = 2.0;
      doubleArray0[8] = (-3892.2576);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 829.7494002104;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3892.2576);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {829.7494002104, 0.0, 0.0, (-638.318742188), 1.0, 0.0, 2222.993577, 2.0, (-3892.2576)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {829.7494002104, 0.0, (-3892.2576)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolume(11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 216.602;
      doubleArray0[2] = (-4920.764531623918);
      doubleArray0[3] = 20.16444422994;
      doubleArray0[4] = 426.6432;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 216.602, (-4920.764531623918), 20.16444422994, 426.6432, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getVolumeValue((-2330), (-2330));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2330
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4392.7);
      double double0 = (-2077.66917352);
      doubleArray0[2] = (-2077.66917352);
      double double1 = 1.0;
      doubleArray0[3] = 1.0;
      double double2 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double3 = (-1229.867289488);
      doubleArray0[6] = (-1229.867289488);
      double double4 = 1.0;
      doubleArray0[7] = 1.0;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4392.7), (-2077.66917352), 1.0, 0.0, 0.0, (-1229.867289488), 1.0}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, numberArray0.length);
      
      Number[] numberArray1 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4392.7), (-2077.66917352), 1.0, 0.0, 0.0, (-1229.867289488), 1.0}, doubleArray0, 0.01);
      assertNotNull(numberArray1);
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertNotSame(numberArray1, numberArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, numberArray1.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        DefaultHighLowDataset.createNumberArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-519.3);
      doubleArray0[2] = (-2509.716510701288);
      doubleArray0[3] = (-813.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2316.172556041085);
      doubleArray0[6] = (-2634.1463871);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-2509.716510701288);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-2316.172556041085);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 543.621;
      doubleArray1[6] = (-2316.172556041085);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-2509.716510701288);
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray2, doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, (-519.3), (-2509.716510701288), (-813.0), 0.0, (-2316.172556041085), (-2634.1463871)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, (-2509.716510701288), 1.0, (-2316.172556041085), 0.0, 543.621, (-2316.172556041085), 0.0, (-2509.716510701288)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Number number0 = defaultHighLowDataset0.getY(10, 0);
      assertArrayEquals(new double[] {1.0, (-519.3), (-2509.716510701288), (-813.0), 0.0, (-2316.172556041085), (-2634.1463871)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, (-2509.716510701288), 1.0, (-2316.172556041085), 0.0, 543.621, (-2316.172556041085), 0.0, (-2509.716510701288)}, doubleArray1, 0.01);
      assertNotNull(number0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, number0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3095.89;
      doubleArray0[2] = 1203.389458216;
      doubleArray0[3] = 3660.68374193;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3095.89, 1203.389458216, 3660.68374193}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.removeChangeListener(datasetChangeListener0);
      assertArrayEquals(new double[] {0.0, 3095.89, 1203.389458216, 3660.68374193}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      int int0 = defaultHighLowDataset0.indexOf(3660.68374193);
      assertArrayEquals(new double[] {0.0, 3095.89, 1203.389458216, 3660.68374193}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertArrayEquals(new double[] {0.0, 3095.89, 1203.389458216, 3660.68374193}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      double double0 = defaultHighLowDataset0.getLowValue(0, 0);
      assertArrayEquals(new double[] {0.0, 3095.89, 1203.389458216, 3660.68374193}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, numberArray0.length);
      
      Number[] numberArray1 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(numberArray1);
      assertFalse(numberArray1.equals((Object)numberArray0));
      assertNotSame(numberArray1, numberArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, numberArray1.length);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3857.69309617;
      doubleArray1[1] = (-248.20728);
      doubleArray1[2] = 3481.5;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3857.69309617, (-248.20728), 3481.5}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getCloseValue((-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, numberArray0.length);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Date date0 = defaultHighLowDataset0.getXDate(2, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNull(date0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      dateArray0[1] = null;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(0, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[1];
      double double0 = (-782.666991411);
      doubleArray0[0] = (-782.666991411);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-782.666991411)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = (-2804);
      DatasetGroup datasetGroup0 = defaultHighLowDataset0.getGroup();
      assertArrayEquals(new double[] {(-782.666991411)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(datasetGroup0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultHighLowDataset0.setGroup(datasetGroup0);
      assertArrayEquals(new double[] {(-782.666991411)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int1 = (-1092);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpen((-2804), (-1092));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1092
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3085.6464781929;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-2245.393);
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(3085.6464781929, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.hashCode();
      assertArrayEquals(new double[] {3085.6464781929, 0.0, (-2245.393)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpenValue(1, (-4352));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4352
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3150.53827381);
      doubleArray1[3] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3150.53827381), 1.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset((-3150.53827381), dateArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3150.53827381), 1.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.hasListener(defaultHighLowDataset1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3150.53827381), 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      int int0 = defaultHighLowDataset0.indexOf(0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3150.53827381), 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertEquals(0, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int1 = (-1058);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getClose((-1058), (-1058));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1058
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3723.7;
      doubleArray0[2] = 2157.58131;
      doubleArray0[3] = (-1322.35417792891);
      doubleArray0[4] = (-2404.376659029);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1020.826;
      doubleArray0[8] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 3723.7, 2157.58131, (-1322.35417792891), (-2404.376659029), 0.0, 0.0, 1020.826, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHighValue(728, 728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 728
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[7];
      Date[] dateArray1 = new Date[5];
      assertFalse(dateArray1.equals((Object)dateArray0));
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn("' argument.").when(date0).toString();
      dateArray1[0] = date0;
      dateArray1[1] = date0;
      dateArray1[2] = date0;
      dateArray1[3] = date0;
      dateArray1[4] = date0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 234.2;
      doubleArray0[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray1, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 234.2, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertEquals(5, dateArray1.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.addChangeListener(datasetChangeListener0);
      assertArrayEquals(new double[] {(-1.0), 234.2, 0.0}, doubleArray0, 0.01);
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertNotSame(dateArray1, dateArray0);
      assertEquals(5, dateArray1.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Date date1 = defaultHighLowDataset0.getXDate(0, 0);
      assertArrayEquals(new double[] {(-1.0), 234.2, 0.0}, doubleArray0, 0.01);
      assertNotNull(date1);
      assertFalse(dateArray1.equals((Object)dateArray0));
      assertSame(date1, date0);
      assertNotSame(dateArray1, dateArray0);
      assertEquals(5, dateArray1.length);
      assertEquals(3, doubleArray0.length);
      assertEquals("' argument.", date1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      dateArray0[0] = date1;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX(5, 545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 545
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3526.491);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 3553.18511345305;
      doubleArray0[7] = 6256.0;
      doubleArray0[8] = (-1.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3526.491), Double.NaN, 0.0, Double.NaN, 3553.18511345305, 6256.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getItemCount(321);
      assertArrayEquals(new double[] {0.0, 0.0, (-3526.491), Double.NaN, 0.0, Double.NaN, 3553.18511345305, 6256.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[8];
      double[] doubleArray0 = null;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, (double[]) null, (double[]) null, (double[]) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2595.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-1754.0);
      doubleArray0[3] = (-1146.152);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2595.0), Double.NEGATIVE_INFINITY, (-1754.0), (-1146.152)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getLowValue((-989), 135);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 135
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 922.866;
      doubleArray0[2] = 915.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1492.4174831);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1981.041368234245);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 922.866, 915.0, 0.0, 0.0, (-1492.4174831), 0.0, (-1981.041368234245)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHigh(6, (-1673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1673
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1216.187785305);
      doubleArray0[1] = (-2126.6846458052455);
      doubleArray0[2] = 4417.47534712;
      doubleArray0[3] = Double.NaN;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {(-1216.187785305), (-2126.6846458052455), 4417.47534712, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2126.6846458052455);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(Double.NaN, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1216.187785305), (-2126.6846458052455), 4417.47534712, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2126.6846458052455)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.validateObject();
      assertArrayEquals(new double[] {(-1216.187785305), (-2126.6846458052455), 4417.47534712, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2126.6846458052455)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[5];
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-892.486);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-892.486)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = 934;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate(934, (-276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -276
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2943.1792407354);
      doubleArray0[2] = (-2095.9187715453004);
      doubleArray0[3] = 2137.6;
      doubleArray0[4] = (-3112.0285827);
      doubleArray0[5] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2943.1792407354), (-2095.9187715453004), 2137.6, (-3112.0285827), 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.addChangeListener(datasetChangeListener0);
      assertArrayEquals(new double[] {0.0, (-2943.1792407354), (-2095.9187715453004), 2137.6, (-3112.0285827), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHighLowDataset0.addChangeListener(datasetChangeListener1);
      assertArrayEquals(new double[] {0.0, (-2943.1792407354), (-2095.9187715453004), 2137.6, (-3112.0285827), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.setNotify(true);
      assertArrayEquals(new double[] {0.0, (-2943.1792407354), (-2095.9187715453004), 2137.6, (-3112.0285827), 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY(1025, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2182.026001;
      doubleArray0[1] = (-734.137);
      doubleArray0[2] = 1588.03777053;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1045.52);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2015.415306818774);
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {2182.026001, (-734.137), 1588.03777053, (-1.0), Double.NaN, (-1045.52), 0.0, (-2015.415306818774)}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(2182.026001, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2182.026001, (-734.137), 1588.03777053, (-1.0), Double.NaN, (-1045.52), 0.0, (-2015.415306818774)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.hashCode();
      assertArrayEquals(new double[] {2182.026001, (-734.137), 1588.03777053, (-1.0), Double.NaN, (-1045.52), 0.0, (-2015.415306818774)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXValue((-127), (-127));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -127
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1252.2696528523);
      doubleArray0[0] = (-1252.2696528523);
      double double1 = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2033.97059556173;
      doubleArray0[3] = 0.0;
      double double2 = 0.0;
      doubleArray0[4] = 0.0;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {(-1252.2696528523), (-1.0), 2033.97059556173, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, numberArray0.length);
      
      Date[] dateArray0 = new Date[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1252.2696528523), (-1.0), 2033.97059556173, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getXDate((-2172), (-2172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2172
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = defaultHighLowDataset0.getSeriesCount();
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 345.9;
      doubleArray0[1] = (-743.728);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 276.7222;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 952.855789433;
      doubleArray0[7] = 654.7734892999894;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, (Date[]) null, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1584.3696;
      doubleArray0[1] = 345.9;
      doubleArray0[2] = 2.0;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, (Date[]) null, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 843.041176;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset1);
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      Comparable<DefaultHighLowDataset> comparable1 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultHighLowDataset1.indexOf(comparable1);
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertEquals((-1), int0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertTrue(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertTrue(boolean0);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      assertTrue(defaultHighLowDataset1.getNotify());
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getOpenValue(1, 1);
      assertArrayEquals(new double[] {0.0, 843.041176}, doubleArray0, 0.01);
      assertTrue(defaultHighLowDataset0.equals((Object)defaultHighLowDataset1));
      assertEquals(843.041176, double0, 0.01);
      assertNotSame(defaultHighLowDataset0, defaultHighLowDataset1);
      assertEquals(0, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        defaultHighLowDataset1.getOpen(1, 346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 346
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double0 = defaultHighLowDataset0.getYValue(0, 0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      double double1 = defaultHighLowDataset0.getVolumeValue(0, 0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1265.8290571);
      doubleArray0[1] = 1729.24261581483;
      doubleArray0[2] = 675.02;
      doubleArray0[3] = (-3959.34);
      doubleArray0[4] = 1573.7;
      doubleArray0[5] = (-3813.1705485173);
      doubleArray0[6] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1265.8290571), 1729.24261581483, 675.02, (-3959.34), 1573.7, (-3813.1705485173), 1.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Date date0 = defaultHighLowDataset0.getXDate(1, 0);
      assertArrayEquals(new double[] {(-1265.8290571), 1729.24261581483, 675.02, (-3959.34), 1573.7, (-3813.1705485173), 1.0}, doubleArray0, 0.01);
      assertNull(date0);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      dateArray0[0] = null;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1265.8290571);
      doubleArray1[1] = 1729.24261581483;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1265.8290571), 1729.24261581483, 675.02, (-3959.34), 1573.7, (-3813.1705485173), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1265.8290571), 1729.24261581483}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset1);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertTrue(defaultHighLowDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getHighValue(0, 2932);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2932
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2182.026001;
      doubleArray0[1] = (-734.137);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[7] = (-2013.6328871279754);
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertArrayEquals(new double[] {2182.026001, (-734.137), 0.0, (-1.0), Double.NaN, 0.0, 0.0, (-2013.6328871279754)}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(2182.026001, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2182.026001, (-734.137), 0.0, (-1.0), Double.NaN, 0.0, 0.0, (-2013.6328871279754)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      defaultHighLowDataset0.hashCode();
      assertArrayEquals(new double[] {2182.026001, (-734.137), 0.0, (-1.0), Double.NaN, 0.0, 0.0, (-2013.6328871279754)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      int int0 = (-1);
      int int1 = 1;
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getX((-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3619.79);
      doubleArray0[1] = 145.34;
      doubleArray0[2] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3619.79), 145.34, 1.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.hashCode();
      assertArrayEquals(new double[] {(-3619.79), 145.34, 1.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean0 = defaultHighLowDataset0.equals("org.jfree.data.general.DefaultPieDatasetTest");
      assertArrayEquals(new double[] {(-3619.79), 145.34, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      int int0 = (-1027);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getLow((-1027), (-1027));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1027
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-529.1537094);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 918.7123686;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3066.5631);
      doubleArray1[2] = (-529.1537094);
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, (Date[]) null, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 402.6357797477894;
      doubleArray0[1] = 3638.195870270879;
      doubleArray0[2] = 510.112;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2502.363929;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {402.6357797477894, 3638.195870270879, 510.112, 0.0, 2502.363929}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
      
      Comparable comparable1 = defaultHighLowDataset0.getSeriesKey((-1099));
      assertArrayEquals(new double[] {402.6357797477894, 3638.195870270879, 510.112, 0.0, 2502.363929}, doubleArray0, 0.01);
      assertNotNull(comparable1);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(defaultHighLowDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 304.4827;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 218.43351114636752;
      doubleArray0[4] = 11.0;
      doubleArray0[5] = 1506.65028505343;
      doubleArray0[6] = 1603.5;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = (-2.41604542086);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1603.5;
      doubleArray1[1] = 11.0;
      doubleArray1[2] = 218.43351114636752;
      doubleArray1[3] = (-2.41604542086);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 304.4827;
      doubleArray1[6] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {304.4827, 0.0, 1.0, 218.43351114636752, 11.0, 1506.65028505343, 1603.5, Double.NaN, (-2.41604542086)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1603.5, 11.0, 218.43351114636752, (-2.41604542086), Double.NaN, 304.4827, 1.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertTrue(defaultHighLowDataset0.getNotify());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getOpen(1438, 702);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 702
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 758.528266;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-181.28542344822);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3115.644725;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-855.5615366221431);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2426.4306875;
      doubleArray1[3] = 0.0;
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-855.5615366221431);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray2, doubleArray3);
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getCloseValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-27.698132125313613);
      doubleArray0[1] = 844.4014774123145;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparable0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = (DefaultHighLowDataset)defaultHighLowDataset0.clone();
      boolean boolean0 = defaultHighLowDataset0.equals(defaultHighLowDataset1);
      assertTrue(boolean0);
      
      defaultHighLowDataset1.getItemCount(5);
      double double0 = defaultHighLowDataset1.getHighValue(5, 0);
      assertEquals((-27.698132125313613), double0, 0.01);
  }
}
