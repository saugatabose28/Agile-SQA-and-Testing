/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:45:09 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.SeriesChangeListener;
import org.jfree.data.xy.NormalizedMatrixSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NormalizedMatrixSeries_ESTest extends NormalizedMatrixSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.xy.NormalizedMatrixSeries", 1, 1);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListener vetoableChangeListener1 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener1);
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener0);
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      SeriesChangeListener seriesChangeListener1 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener1);
      double[][] doubleArray0 = new double[4][4];
      normalizedMatrixSeries0.setNotify(true);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
      normalizedMatrixSeries0.data = doubleArray0;
      normalizedMatrixSeries0.update(1, 1, 0.0);
      normalizedMatrixSeries0.setScaleFactor(1);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.removePropertyChangeListener(propertyChangeListener0);
      normalizedMatrixSeries0.getItem(0);
      normalizedMatrixSeries0.setScaleFactor((-719.5255));
      normalizedMatrixSeries0.update(1, 2, (-1425.72));
      normalizedMatrixSeries0.setScaleFactor(1);
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.zeroAll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("XX1MkCh5", 1164, 0);
      normalizedMatrixSeries0.data = null;
      normalizedMatrixSeries0.getScaleFactor();
      normalizedMatrixSeries0.getScaleFactor();
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.update(0, 0, (-1558.8928224437));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("XX1MkCh5", 1164, 0);
      normalizedMatrixSeries0.setScaleFactor((-1678.46672));
      normalizedMatrixSeries0.getScaleFactor();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4254;
      int int1 = 102000;
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.category.DefaultIntervalCategoryDataset", 102000, 4254);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.xy.NormalizedMatrixSeries", 72, 72);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      Number number0 = normalizedMatrixSeries0.getItem(72);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      int int0 = 0;
      Number number1 = normalizedMatrixSeries0.getItem(0);
      assertTrue(number1.equals((Object)number0));
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.removeVetoableChangeListener(vetoableChangeListener0);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setKey("org.jfree.data.xy.NormalizedMatrixSeries");
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double0 = normalizedMatrixSeries0.getScaleFactor();
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      boolean boolean0 = normalizedMatrixSeries0.isEmpty();
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(5184, normalizedMatrixSeries0.getItemCount());
      assertEquals(72, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(72, normalizedMatrixSeries0.getColumnsCount());
      assertFalse(boolean0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      int int1 = 463;
      double double1 = 0.0;
      // Undeclared exception!
      normalizedMatrixSeries0.zeroAll();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.xy.NormalizedMatrixSeries", 1, 1);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.removeChangeListener(seriesChangeListener0);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setNotify(false);
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertFalse(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.zeroAll();
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertFalse(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.data = null;
      assertFalse(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      
      normalizedMatrixSeries0.setScaleFactor(1);
      assertFalse(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      NormalizedMatrixSeries normalizedMatrixSeries1 = (NormalizedMatrixSeries)normalizedMatrixSeries0.clone();
      assertFalse(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNull(normalizedMatrixSeries1.getDescription());
      assertEquals(1.0, normalizedMatrixSeries1.getScaleFactor(), 0.01);
      assertFalse(normalizedMatrixSeries1.getNotify());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertNotSame(normalizedMatrixSeries1, normalizedMatrixSeries0);
      assertNotNull(normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(0.0);
      assertFalse(normalizedMatrixSeries0.getNotify());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.getItem(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("TimeSeriesDataset.addSeries(): cannot add null array of values.", 209, 0);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(209, normalizedMatrixSeries0.getRowCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = (double) 209;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 209;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-34.0);
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = 1.0;
      doubleArray6[6] = (double) 209;
      doubleArray6[7] = (-2235.9);
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 1.0;
      doubleArray7[1] = (-34.0);
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      normalizedMatrixSeries0.data = doubleArray0;
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertEquals(2, normalizedMatrixSeries0.getColumnsCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(14, normalizedMatrixSeries0.getItemCount());
      
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener0);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertEquals(2, normalizedMatrixSeries0.getColumnsCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(14, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(0);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertEquals(2, normalizedMatrixSeries0.getColumnsCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(14, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      Number number0 = normalizedMatrixSeries0.getItem(0);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertEquals(2, normalizedMatrixSeries0.getColumnsCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(14, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("TimeSeriesDataset.addSeries(): cannot add null array of values.", 239, 0);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(239, normalizedMatrixSeries0.getRowCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener0);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(239, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(0);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(239, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double0 = normalizedMatrixSeries0.getScaleFactor();
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(239, normalizedMatrixSeries0.getRowCount());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("", 1, 1);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3733.0007756;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3733.0007756;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 3733.0007756;
      doubleArray3[4] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = 3733.0007756;
      doubleArray4[3] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 3733.0007756;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 1;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = (double) 1;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1.0;
      doubleArray6[5] = (double) 1;
      doubleArray6[6] = 1.0;
      doubleArray6[7] = 3733.0007756;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 1.0;
      doubleArray7[6] = 3733.0007756;
      doubleArray7[7] = 3733.0007756;
      doubleArray0[6] = doubleArray7;
      normalizedMatrixSeries0.data = doubleArray0;
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(7, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(7, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      Number number0 = normalizedMatrixSeries0.getItem(1);
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(7, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertNotNull(number0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.zeroAll();
      assertEquals(7, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(7, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 513;
      int int1 = 0;
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("bVRuINm`[", 513, 0);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.setScaleFactor(0.0);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setNotify(true);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setDescription("");
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals("", normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      boolean boolean0 = normalizedMatrixSeries0.equals("bVRuINm`[");
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals("", normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertFalse(boolean0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setDescription("");
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals("", normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener1 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener1);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals("", normalizedMatrixSeries0.getDescription());
      assertEquals(513, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.data = null;
      assertEquals(0.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals("", normalizedMatrixSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.zeroAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("", 260, 0);
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(260, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      NormalizedMatrixSeries normalizedMatrixSeries1 = (NormalizedMatrixSeries)normalizedMatrixSeries0.clone();
      assertTrue(normalizedMatrixSeries1.equals((Object)normalizedMatrixSeries0));
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(260, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(0, normalizedMatrixSeries1.getItemCount());
      assertTrue(normalizedMatrixSeries1.getNotify());
      assertEquals(260, normalizedMatrixSeries1.getRowCount());
      assertEquals(0, normalizedMatrixSeries1.getColumnsCount());
      assertNull(normalizedMatrixSeries1.getDescription());
      assertEquals(1.0, normalizedMatrixSeries1.getScaleFactor(), 0.01);
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertNotSame(normalizedMatrixSeries1, normalizedMatrixSeries0);
      assertNotNull(normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener0);
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(0, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(260, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(0, normalizedMatrixSeries0.getItemCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 260;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 260;
      doubleArray2[4] = (double) 260;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = (double) 260;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 260;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (double) 260;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 202007.0;
      doubleArray4[2] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 1.0;
      doubleArray7[1] = (double) 260;
      doubleArray7[2] = 202007.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 202007.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 0;
      doubleArray8[3] = (double) 260;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = (-1.0);
      doubleArray0[7] = doubleArray8;
      normalizedMatrixSeries0.data = doubleArray0;
      assertEquals(8, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(8, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      
      boolean boolean0 = normalizedMatrixSeries0.equals(normalizedMatrixSeries1);
      assertFalse(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertFalse(normalizedMatrixSeries1.equals((Object)normalizedMatrixSeries0));
      assertEquals(8, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(8, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(0, normalizedMatrixSeries1.getItemCount());
      assertTrue(normalizedMatrixSeries1.getNotify());
      assertEquals(260, normalizedMatrixSeries1.getRowCount());
      assertEquals(0, normalizedMatrixSeries1.getColumnsCount());
      assertNull(normalizedMatrixSeries1.getDescription());
      assertEquals(1.0, normalizedMatrixSeries1.getScaleFactor(), 0.01);
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertNotSame(normalizedMatrixSeries1, normalizedMatrixSeries0);
      assertFalse(boolean0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setKey("");
      assertFalse(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(8, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(8, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.update(0, 0, 2601.43103636);
      assertFalse(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(8, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(8, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double0 = normalizedMatrixSeries0.getScaleFactor();
      assertFalse(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(8, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(8, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double1 = normalizedMatrixSeries0.getScaleFactor();
      assertFalse(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(double1, double0, 0.01);
      assertEquals(8, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(8, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, double1, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 10;
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("=Lk2`xAne~D]*drt*3", 10, 10);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(10);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.setScaleFactor(10);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      boolean boolean0 = normalizedMatrixSeries0.isEmpty();
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertFalse(boolean0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setDescription((String) null);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.removeVetoableChangeListener(vetoableChangeListener0);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      NormalizedMatrixSeries normalizedMatrixSeries1 = (NormalizedMatrixSeries)normalizedMatrixSeries0.clone();
      assertTrue(normalizedMatrixSeries1.equals((Object)normalizedMatrixSeries0));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries1.getNotify());
      assertEquals(10, normalizedMatrixSeries1.getRowCount());
      assertEquals(10.0, normalizedMatrixSeries1.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries1.getDescription());
      assertEquals(10, normalizedMatrixSeries1.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries1.getItemCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertNotSame(normalizedMatrixSeries1, normalizedMatrixSeries0);
      assertNotNull(normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      Double double0 = (Double)normalizedMatrixSeries0.getItem(10);
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.zeroAll();
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(10);
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double1 = normalizedMatrixSeries0.getScaleFactor();
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(10.0, double1, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double2 = normalizedMatrixSeries0.getScaleFactor();
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(double2, double1, 0.01);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(10.0, double2, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      boolean boolean1 = normalizedMatrixSeries0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertFalse(boolean1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.addChangeListener((SeriesChangeListener) null);
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double3 = normalizedMatrixSeries0.getScaleFactor();
      assertTrue(normalizedMatrixSeries0.equals((Object)normalizedMatrixSeries1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(10.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(10, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(100, normalizedMatrixSeries0.getItemCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(10, normalizedMatrixSeries0.getRowCount());
      assertNotSame(normalizedMatrixSeries0, normalizedMatrixSeries1);
      assertEquals(10.0, double3, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      int int1 = (-3151);
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.getItem((-3151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.xy.NormalizedMatrixSeries", 1, 1);
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListener vetoableChangeListener1 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener1);
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener0);
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      SeriesChangeListener seriesChangeListener1 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener1);
      assertEquals(1, normalizedMatrixSeries0.getItemCount());
      assertEquals(1, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 4.9E-324;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      normalizedMatrixSeries0.data = doubleArray0;
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      
      normalizedMatrixSeries0.update(1, 1, 0.0);
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(1);
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      int int0 = 0;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.removePropertyChangeListener(propertyChangeListener0);
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      Number number0 = normalizedMatrixSeries0.getItem(0);
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals((-1.0), number0);
      assertNotNull(number0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor((-719.5255));
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals((-719.5255), normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(1);
      assertEquals(4, normalizedMatrixSeries0.getItemCount());
      assertEquals(4, normalizedMatrixSeries0.getRowCount());
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1, normalizedMatrixSeries0.getColumnsCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.zeroAll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("s%i0_OW $.`>", 42, 42);
      assertEquals(42, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1764, normalizedMatrixSeries0.getItemCount());
      assertEquals(42, normalizedMatrixSeries0.getColumnsCount());
      assertNotNull(normalizedMatrixSeries0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      Number number0 = normalizedMatrixSeries0.getItem(42);
      assertEquals(42, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1764, normalizedMatrixSeries0.getItemCount());
      assertEquals(42, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      double double0 = normalizedMatrixSeries0.getScaleFactor();
      assertEquals(42, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertNull(normalizedMatrixSeries0.getDescription());
      assertEquals(1764, normalizedMatrixSeries0.getItemCount());
      assertEquals(42, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.setDescription("s%i0_OW $.`>");
      assertEquals(42, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1764, normalizedMatrixSeries0.getItemCount());
      assertEquals("s%i0_OW $.`>", normalizedMatrixSeries0.getDescription());
      assertEquals(42, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      normalizedMatrixSeries0.fireSeriesChanged();
      assertEquals(42, normalizedMatrixSeries0.getRowCount());
      assertTrue(normalizedMatrixSeries0.getNotify());
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      assertEquals(1764, normalizedMatrixSeries0.getItemCount());
      assertEquals("s%i0_OW $.`>", normalizedMatrixSeries0.getDescription());
      assertEquals(42, normalizedMatrixSeries0.getColumnsCount());
      assertEquals(1.0, NormalizedMatrixSeries.DEFAULT_SCALE_FACTOR, 0.01);
      
      int int0 = 595;
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.update(595, 42, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries(").", 1, 616);
      normalizedMatrixSeries0.setNotify(true);
      normalizedMatrixSeries0.setNotify(false);
      normalizedMatrixSeries0.fireSeriesChanged();
      normalizedMatrixSeries0.zeroAll();
      Number number0 = normalizedMatrixSeries0.getItem(1);
      assertEquals(Double.NaN, number0);
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 334;
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("", 334, 0);
      normalizedMatrixSeries0.setDescription("");
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.update(0, 1022, (-641.6366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("values", 4303, 0);
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.update(0, 1927, (-184.63184));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      NormalizedMatrixSeries normalizedMatrixSeries0 = null;
      try {
        normalizedMatrixSeries0 = new NormalizedMatrixSeries("h^P+", 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 201;
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("", 201, 201);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("", 12, 0);
      normalizedMatrixSeries0.getScaleFactor();
      normalizedMatrixSeries0.zeroAll();
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.getItem(1785);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 6;
      NormalizedMatrixSeries normalizedMatrixSeries0 = null;
      try {
        normalizedMatrixSeries0 = new NormalizedMatrixSeries("(rOv~EY>AQit}q5=", (-1411), 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      int int0 = 3676;
      NormalizedMatrixSeries normalizedMatrixSeries0 = null;
      try {
        normalizedMatrixSeries0 = new NormalizedMatrixSeries((String) null, 2476, 3676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.xy.DefaultWindDataset", 2, 2);
      double double0 = normalizedMatrixSeries0.getScaleFactor();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("", 25, 46);
      Number number0 = normalizedMatrixSeries0.getItem(0);
      assertEquals(0.0, number0);
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("6dx$-zuYK0Egc1I>(#A", 2, 2);
      assertEquals(1.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
      
      normalizedMatrixSeries0.setScaleFactor(2);
      assertEquals(2.0, normalizedMatrixSeries0.getScaleFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NormalizedMatrixSeries normalizedMatrixSeries0 = new NormalizedMatrixSeries("org.jfree.data.xy.NormalizedMatrixSeries", 1, 1);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListener vetoableChangeListener1 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addVetoableChangeListener(vetoableChangeListener1);
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      normalizedMatrixSeries0.addChangeListener(seriesChangeListener0);
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray0[2] = doubleArray0[1];
      normalizedMatrixSeries0.data = doubleArray0;
      normalizedMatrixSeries0.update(1, 1, 4.9E-324);
      normalizedMatrixSeries0.setScaleFactor(1);
      normalizedMatrixSeries0.getItem(0);
      normalizedMatrixSeries0.setScaleFactor(1);
      normalizedMatrixSeries0.zeroAll();
      normalizedMatrixSeries0.getScaleFactor();
      // Undeclared exception!
      try { 
        normalizedMatrixSeries0.getItem(2221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
