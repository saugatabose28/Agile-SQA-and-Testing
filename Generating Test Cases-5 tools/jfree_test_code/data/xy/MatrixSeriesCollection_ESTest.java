/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:51:29 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatrixSeriesCollection_ESTest extends MatrixSeriesCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 32;
      MatrixSeries matrixSeries0 = new MatrixSeries("r", 32, 0);
      assertNotNull(matrixSeries0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.zeroAll();
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Comparable comparable0 = matrixSeriesCollection0.getSeriesKey(0);
      assertNotNull(comparable0);
      assertEquals("r", comparable0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection1);
      assertFalse(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      boolean boolean0 = matrixSeriesCollection0.equals(matrixSeriesCollection1);
      assertFalse(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertFalse(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertFalse(boolean0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      matrixSeries0.removeChangeListener(matrixSeriesCollection0);
      assertFalse(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = matrixSeriesCollection0.equals(matrixSeries0);
      assertFalse(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      int int1 = matrixSeriesCollection0.getSeriesCount();
      assertFalse(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getSeries(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 0);
      assertNotNull(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      int int1 = matrixSeriesCollection0.getItemCount(0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeries0.setNotify(true);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.removeChangeListener(datasetChangeListener0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      int int2 = matrixSeriesCollection0.indexOf("");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      int int3 = (-3274);
      boolean boolean0 = matrixSeries0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX((-3274), (-3274));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("b.k3/j;N", 2490, 0);
      assertNotNull(matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      matrixSeries0.removeChangeListener(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeries matrixSeries1 = matrixSeriesCollection0.getSeries(0);
      assertNotNull(matrixSeries1);
      assertSame(matrixSeries0, matrixSeries1);
      assertSame(matrixSeries1, matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(2490, matrixSeries1.getRowCount());
      assertEquals(0, matrixSeries1.getColumnsCount());
      assertEquals(0, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      assertNull(matrixSeries1.getDescription());
      
      matrixSeriesCollection0.hashCode();
      assertSame(matrixSeries0, matrixSeries1);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertSame(matrixSeries0, matrixSeries1);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries1.setDescription("Index outside valid range.");
      assertSame(matrixSeries0, matrixSeries1);
      assertSame(matrixSeries1, matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals("Index outside valid range.", matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2490, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(2490, matrixSeries1.getRowCount());
      assertEquals(0, matrixSeries1.getColumnsCount());
      assertEquals("Index outside valid range.", matrixSeries1.getDescription());
      assertEquals(0, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX(3222, 3222);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3222, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 689;
      int int1 = 0;
      MatrixSeries matrixSeries0 = new MatrixSeries("/k&.zfe,hqY?|*l|", 689, 0);
      assertNotNull(matrixSeries0);
      assertEquals(689, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeries0.addChangeListener(matrixSeriesCollection0);
      assertEquals(689, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.validateObject();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection1);
      assertFalse(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertEquals(689, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      boolean boolean0 = matrixSeriesCollection1.hasListener(matrixSeriesCollection0);
      assertFalse(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertFalse(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertFalse(boolean0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(689, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getY(0, 810);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("B&P[Eey`,Pni&5", 567, 0);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(567, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(567, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getY(0, (-1553));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = matrixSeriesCollection0.equals("");
      assertFalse(boolean0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.setNotify(false);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ(2965, (-1973));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2965, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = 2629;
      int int1 = 0;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2629, 0);
      assertNotNull(matrixSeries0);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      matrixSeries0.setNotify(true);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      matrixSeries0.removePropertyChangeListener(propertyChangeListener0);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      String string1 = "";
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.removeChangeListener(datasetChangeListener1);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.addChangeListener(datasetChangeListener0);
      assertEquals(2629, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("r", 1, 0);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.zeroAll();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      Comparable comparable0 = matrixSeriesCollection0.getSeriesKey(0);
      assertNotNull(comparable0);
      assertEquals("r", comparable0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      int int1 = 812;
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ(812, 812);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 812, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = matrixSeriesCollection0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      matrixSeriesCollection0.setGroup(datasetGroup0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX((-95), 733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      boolean boolean0 = matrixSeriesCollection0.equals(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertTrue(boolean0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      matrixSeriesCollection0.setNotify(false);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertFalse(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries((MatrixSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.removeAllSeries();
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      
      boolean boolean0 = matrixSeriesCollection0.equals(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertTrue(boolean0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ((-881), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      String string0 = "hul'-`(!ViQe";
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      boolean boolean0 = matrixSeriesCollection0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("categories.default-prefix", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      boolean boolean1 = matrixSeries0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      PropertyChangeListener propertyChangeListener0 = null;
      matrixSeries0.addChangeListener(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      // Undeclared exception!
      try { 
        matrixSeries0.update(1, (-3351), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZValue(0, 416);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries((-1271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("DefaultIntervalCategoryDataset: the number of categories in the start value dataset does not match the number of categories in the end value dataset.", 1926, 0);
      assertNotNull(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1926, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1926, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getItemCount((-3090));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 3040;
      int int1 = 0;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 3040, 0);
      assertNotNull(matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      matrixSeries0.addPropertyChangeListener(propertyChangeListener0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeries0.setDescription("b_r39Am6M#>,]h,D5");
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals("b_r39Am6M#>,]h,D5", matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      
      matrixSeries0.setKey("");
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals("b_r39Am6M#>,]h,D5", matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      
      int int2 = 0;
      int int3 = (-1972);
      boolean boolean0 = true;
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals("b_r39Am6M#>,]h,D5", matrixSeries0.getDescription());
      assertEquals(3040, matrixSeries0.getRowCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MatrixSeries matrixSeries0 = null;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.addSeries((MatrixSeries) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(matrixSeriesCollection1.getNotify());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection2 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection2);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertTrue(matrixSeriesCollection2.equals((Object)matrixSeriesCollection1));
      assertTrue(matrixSeriesCollection2.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection2);
      assertNotSame(matrixSeriesCollection2, matrixSeriesCollection0);
      assertNotSame(matrixSeriesCollection2, matrixSeriesCollection1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertTrue(matrixSeriesCollection2.getNotify());
      assertEquals(0, matrixSeriesCollection2.getSeriesCount());
      
      matrixSeriesCollection0.hashCode();
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection2));
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection2);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries(707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertNotNull(matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, matrixSeriesCollection1.getSeriesCount());
      assertTrue(matrixSeriesCollection1.getNotify());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 3394, 0);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(3394, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(3394, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getItemCount(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("938iSJ", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      matrixSeriesCollection0.removeAllSeries();
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("``MiRb@FG9 ", 1957, 0);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1957, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeriesCollection0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1957, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      int int0 = matrixSeriesCollection0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      int int1 = matrixSeriesCollection0.getSeriesCount();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getXValue((-1), (-1247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.getNotify());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getY((-514), (-1481));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      matrixSeriesCollection0.hasListener(matrixSeriesCollection1);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries((-1118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      matrixSeriesCollection0.removeAllSeries();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey(1192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries((-1122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      int int0 = (-33);
      matrixSeriesCollection0.removeAllSeries();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey((-33));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      matrixSeriesCollection0.equals((Object) null);
      MatrixSeries matrixSeries0 = new MatrixSeries("kategories.default-prefix", 1, 1);
      matrixSeries0.isEmpty();
      matrixSeries0.addChangeListener(matrixSeriesCollection0);
      // Undeclared exception!
      try { 
        matrixSeries0.update(1, (-3351), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      int int0 = (-780);
      matrixSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries((-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.removeAllSeries();
      matrixSeriesCollection0.addSeries(matrixSeries0);
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection1.seriesChanged(seriesChangeEvent0);
      matrixSeriesCollection0.equals(matrixSeriesCollection1);
      matrixSeriesCollection0.equals(matrixSeries0);
      matrixSeriesCollection0.hashCode();
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getSeries(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX((-1708), 1023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1010;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.removeSeries(1885);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      matrixSeriesCollection0.setNotify(true);
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      matrixSeriesCollection0.hasListener(matrixSeriesCollection1);
      matrixSeriesCollection0.hashCode();
      int int0 = (-1759);
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getZValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      int int0 = 2603;
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getItemCount(2603);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2629, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      matrixSeries0.setNotify(true);
      matrixSeriesCollection0.removeSeries(matrixSeries0);
      matrixSeries0.fireSeriesChanged();
      matrixSeries0.fireSeriesChanged();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.removeChangeListener(datasetChangeListener1);
      matrixSeriesCollection0.addChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getZ((-3103), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX(1315, 1315);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1315, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.seriesChanged(seriesChangeEvent0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.removeChangeListener(datasetChangeListener0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeriesKey(3450);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }
}
