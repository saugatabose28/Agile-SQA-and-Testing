/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:36:49 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultOHLCDataset_ESTest extends DefaultOHLCDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      Comparable<DefaultOHLCDataset> comparable1 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(1, (Number) null).when(oHLCDataItem0).getClose();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int1 = 0;
      int int2 = (-1);
      double double0 = defaultOHLCDataset1.getCloseValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      Number number0 = defaultOHLCDataset1.getY(0, 0);
      assertNotNull(number0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(1, number0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(number0.equals((Object)int1));
      assertTrue(number0.equals((Object)int0));
      assertFalse(number0.equals((Object)int2));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int3 = defaultOHLCDataset0.getItemCount(0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(1, int3);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getClose(1, 2610);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2610
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getItemCount(1);
      assertEquals(5, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = defaultOHLCDataset0.getItemCount(1);
      assertEquals(5, int1);
      assertTrue(int1 == int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(5, (Number) null).when(oHLCDataItem0).getClose();
      doReturn(5).when(oHLCDataItem0).getHigh();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset1.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset1.equals(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertTrue(boolean0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      double double0 = defaultOHLCDataset1.getYValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals(5.0, double0, 0.01);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[2];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      int int2 = defaultOHLCDataset1.indexOf(oHLCDataItem0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      oHLCDataItemArray1[0] = oHLCDataItem0;
      oHLCDataItemArray1[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset3 = (DefaultOHLCDataset)defaultOHLCDataset1.clone();
      assertNotNull(defaultOHLCDataset3);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset4 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray1);
      assertNotNull(defaultOHLCDataset4);
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset4.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      
      boolean boolean1 = defaultOHLCDataset1.equals(defaultOHLCDataset4);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset5 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset5);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset4));
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset5.getNotify());
      assertEquals(1, defaultOHLCDataset5.getSeriesCount());
      
      boolean boolean2 = defaultOHLCDataset4.equals(defaultOHLCDataset5);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset4);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean2);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset5));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset4));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      assertTrue(defaultOHLCDataset5.getNotify());
      assertEquals(1, defaultOHLCDataset5.getSeriesCount());
      
      double double1 = defaultOHLCDataset1.getHighValue(0, 0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals(5.0, double1, 0.01);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertEquals(double1, double0, 0.01);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset5));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      double double2 = defaultOHLCDataset2.getCloseValue(0, 1);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset4);
      assertEquals(5.0, double2, 0.01);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset5));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset5));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset4));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getClose(0, 1228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1228
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(date0).toString();
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(date1).toString();
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1994), 0).when(oHLCDataItem0).compareTo(any());
      doReturn(date0, date1).when(oHLCDataItem0).getDate();
      doReturn((Number) null).when(oHLCDataItem0).getLow();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.equals(oHLCDataItem0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(boolean0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.validateObject();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = (-3829);
      boolean boolean1 = defaultOHLCDataset1.hasListener(defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(boolean1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset0.getLowValue(0, 1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int1 = 5;
      Date date2 = defaultOHLCDataset1.getXDate((-1), 0);
      assertNotNull(date2);
      assertNotSame(date2, date1);
      assertSame(date2, date0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(date2.equals((Object)date1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Date date3 = defaultOHLCDataset0.getXDate((-3829), 1);
      assertNotNull(date3);
      assertNotSame(date3, date0);
      assertNotSame(date3, date2);
      assertSame(date3, date1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(date3.equals((Object)date0));
      assertFalse(date3.equals((Object)date2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue((-961), (-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -961
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultOHLCDataset0.indexOf(comparable2);
      assertEquals((-1), int0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(oHLCDataItem0).getClose();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int1 = 0;
      int int2 = (-1);
      double double0 = defaultOHLCDataset1.getCloseValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals((-1.0), double0, 0.01);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getClose(1, 2610);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2610
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItemArray0[3];
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[2];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      oHLCDataItemArray1[0] = oHLCDataItem0;
      oHLCDataItemArray1[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItemArray0[4], oHLCDataItemArray1);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.addChangeListener(datasetChangeListener0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.equals(defaultOHLCDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("4", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getItemCount(0);
      assertEquals(3, int0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1994), (-825), 1).when(oHLCDataItem0).compareTo(any());
      doReturn(3).when(oHLCDataItem0).getLow();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      defaultOHLCDataset1.sortDataByDate();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset1.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset1.equals(oHLCDataItem0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(boolean0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      defaultOHLCDataset1.validateObject();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset1.getLowValue(0, 1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals(3.0, double0, 0.01);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getCloseValue((-3829), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      Comparable<DefaultOHLCDataset> comparable1 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(oHLCDataItem0).getOpen();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset1.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int1 = 0;
      double double0 = defaultOHLCDataset1.getOpenValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int2 = defaultOHLCDataset1.getSeriesCount();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(1, int2);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int3 = (-434);
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getCloseValue((-434), 1763);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1763
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("?=<2vl&B").when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("?=<2vl&B", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn("").when(oHLCDataItem0).toString();
      doReturn(2315, 10, 2315, 1783, (-292)).when(oHLCDataItem0).compareTo(any());
      doReturn((Date) null).when(oHLCDataItem0).getDate();
      doReturn((-1)).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset2 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      boolean boolean0 = defaultOHLCDataset1.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertFalse(boolean0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      int int1 = defaultOHLCDataset1.indexOf(oHLCDataItem0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int2 = defaultOHLCDataset1.getSeriesCount();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset3 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset3.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean1 = defaultOHLCDataset3.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertFalse(boolean1);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      defaultOHLCDataset3.sortDataByDate();
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      defaultOHLCDataset1.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      defaultOHLCDataset1.setNotify(true);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Date date0 = defaultOHLCDataset1.getXDate((-1), 0);
      assertNull(date0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset1.getVolumeValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertEquals((-1.0), double0, 0.01);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int3 = defaultOHLCDataset1.getItemCount(1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertEquals(9, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset4 = (DefaultOHLCDataset)defaultOHLCDataset3.clone();
      assertNotNull(defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      
      defaultOHLCDataset3.sortDataByDate();
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset4));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset5 = (DefaultOHLCDataset)defaultOHLCDataset3.clone();
      assertNotNull(defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset4));
      assertTrue(defaultOHLCDataset5.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset5.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset5.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset5.getNotify());
      assertEquals(1, defaultOHLCDataset5.getSeriesCount());
      
      defaultOHLCDataset2.addChangeListener((DatasetChangeListener) null);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset5);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset5));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset4));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      Comparable comparable1 = defaultOHLCDataset2.getSeriesKey(103);
      assertNotNull(comparable1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset5);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset5));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset4));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      defaultOHLCDataset1.sortDataByDate();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset5));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("F9$(?#S", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getHighValue(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItemArray0[1];
      oHLCDataItemArray0[3] = oHLCDataItemArray0[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      boolean boolean0 = defaultOHLCDataset0.equals(defaultOHLCDataset0);
      assertTrue(boolean0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(":G", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.indexOf(":G");
      assertEquals(0, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = defaultOHLCDataset0.getItemCount(243);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(oHLCDataItem0).getClose();
      doReturn(5).when(oHLCDataItem0).getHigh();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.equals(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(boolean0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset0.getYValue(0, 0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[2];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      int int2 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals((-1), int2);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      oHLCDataItemArray1[0] = oHLCDataItem0;
      oHLCDataItemArray1[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset3 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray1);
      assertNotNull(defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset3.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      boolean boolean1 = defaultOHLCDataset0.equals(defaultOHLCDataset3);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      boolean boolean2 = defaultOHLCDataset3.equals(defaultOHLCDataset0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean2);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      
      double double1 = defaultOHLCDataset0.getHighValue(0, 0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset3);
      assertEquals(5.0, double1, 0.01);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultOHLCDataset0.indexOf(comparable1);
      assertEquals((-1), int0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = defaultOHLCDataset0.getItemCount(0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      String string0 = "_LS=|#qz=jqb";
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int2 = defaultOHLCDataset0.indexOf("_LS=|#qz=jqb");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getX(0, 2172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2172
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[2] = oHLCDataItemArray0[1];
      oHLCDataItemArray0[3] = oHLCDataItemArray0[2];
      oHLCDataItemArray0[4] = oHLCDataItemArray0[3];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolume(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultOHLCDataset0.indexOf(comparable2);
      assertEquals((-1), int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(oHLCDataItem0).getOpen();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset1.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int1 = 0;
      double double0 = defaultOHLCDataset1.getOpenValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals((-1.0), double0, 0.01);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int2 = defaultOHLCDataset1.getSeriesCount();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      int int3 = (-434);
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getCloseValue((-434), 1763);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1763
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[5] = oHLCDataItemArray0[1];
      oHLCDataItemArray0[3] = oHLCDataItemArray0[2];
      oHLCDataItemArray0[4] = oHLCDataItemArray0[3];
      oHLCDataItemArray0[5] = oHLCDataItemArray0[4];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = (-3740);
      int int1 = 1;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getCloseValue(410, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      int int0 = (-10);
      int int1 = 887;
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int2 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getLow((-10), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("t8", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getClose(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfree.data.xy.DefaultOHLCDataset").when(comparable0).toString();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = 2064;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.addChangeListener(datasetChangeListener1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.validateObject();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Comparable comparable1 = defaultOHLCDataset0.getSeriesKey(2064);
      assertNotNull(comparable1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getLowValue((-841), (-3384));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getItemCount(31);
      assertEquals(9, int0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, 1, 1).when(oHLCDataItem0).compareTo(any());
      doReturn(9).when(oHLCDataItem0).getHigh();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      defaultOHLCDataset1.setNotify(true);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      defaultOHLCDataset1.sortDataByDate();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      Number number0 = defaultOHLCDataset1.getHigh((-2436), 0);
      assertNotNull(number0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(9, number0);
      assertTrue(number0.equals((Object)int0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      defaultOHLCDataset1.sortDataByDate();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getHighValue((-1545), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      int int0 = (-514);
      int int1 = 3;
      int int2 = 11;
      int int3 = 0;
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int4 = 1;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getOpenValue(11, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[7];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray1[0] = oHLCDataItem0;
      oHLCDataItemArray1[1] = oHLCDataItem0;
      oHLCDataItemArray1[2] = oHLCDataItem0;
      oHLCDataItemArray1[3] = oHLCDataItem0;
      oHLCDataItemArray1[4] = oHLCDataItem0;
      oHLCDataItemArray1[5] = oHLCDataItem0;
      oHLCDataItemArray1[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray1);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(7, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertEquals((-1), int0);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(7, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      OHLCDataItem oHLCDataItem1 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(oHLCDataItem1).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset1.setGroup(datasetGroup0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = defaultOHLCDataset1.getVolume(0, 0);
      assertNotNull(number0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals((-1), number0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(number0.equals((Object)int0));
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset1.getLowValue(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getItemCount(1131);
      assertEquals(9, int0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn("").when(oHLCDataItem0).toString();
      doReturn(1131, 1131, 1131, 0, 0).when(oHLCDataItem0).compareTo(any());
      doReturn((Date) null).when(oHLCDataItem0).getDate();
      doReturn(9).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset2 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      boolean boolean0 = defaultOHLCDataset1.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(boolean0);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int1 = defaultOHLCDataset1.indexOf(oHLCDataItem0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int2 = defaultOHLCDataset1.getSeriesCount();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset3 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset3.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean1 = defaultOHLCDataset3.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertFalse(boolean1);
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertTrue(boolean1 == boolean0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      
      defaultOHLCDataset3.sortDataByDate();
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      
      defaultOHLCDataset1.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      defaultOHLCDataset1.setNotify(true);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Date date0 = defaultOHLCDataset1.getXDate((-1), 0);
      assertNull(date0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset1.getVolumeValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals(9.0, double0, 0.01);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int3 = defaultOHLCDataset1.getItemCount(1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertEquals(9, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset4 = (DefaultOHLCDataset)defaultOHLCDataset3.clone();
      assertNotNull(defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertTrue(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      
      defaultOHLCDataset3.sortDataByDate();
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset5 = (DefaultOHLCDataset)defaultOHLCDataset3.clone();
      assertNotNull(defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset5, defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset5.equals((Object)defaultOHLCDataset4));
      assertTrue(defaultOHLCDataset5.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset5.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset5.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset5.getSeriesCount());
      assertTrue(defaultOHLCDataset5.getNotify());
      
      defaultOHLCDataset2.addChangeListener((DatasetChangeListener) null);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset4);
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset4));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset5));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      Comparable comparable2 = defaultOHLCDataset2.getSeriesKey(103);
      assertNotNull(comparable2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset4);
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset4));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset5));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      defaultOHLCDataset1.sortDataByDate();
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset5);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset5));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(oHLCDataItem0).compareTo(any());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      doReturn((Number) null).when(oHLCDataItem0).getLow();
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = defaultOHLCDataset0.getY(0, 0);
      assertNull(number0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.validateObject();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = (-370);
      int int1 = 0;
      Number number1 = defaultOHLCDataset0.getLow((-370), 0);
      assertNull(number1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int2 = defaultOHLCDataset0.getItemCount(0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int3 = 0;
      double double0 = defaultOHLCDataset0.getVolumeValue(0, 0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset2 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertFalse(boolean0);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.sortDataByDate();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.setNotify(false);
      assertFalse(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getY(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(1, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset1.getGroup();
      assertNotNull(datasetGroup0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getHigh(0, 938);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getItemCount((-1662));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getOpen(465, 465);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Comparable comparable0 = defaultOHLCDataset0.getSeriesKey(2198);
      assertNull(comparable0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable1, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset1.seriesChanged(seriesChangeEvent0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(boolean0);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      defaultOHLCDataset0.setNotify(false);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = 13;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.sortDataByDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(oHLCDataItem0).compareTo(any());
      doReturn((Date) null).when(oHLCDataItem0).getDate();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals((-1), int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getX(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      doReturn((Number) null).when(oHLCDataItem0).getOpen();
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      double double0 = defaultOHLCDataset0.getOpenValue((-1342), 1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Number number0 = defaultOHLCDataset0.getVolume(2364, 0);
      assertNull(number0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Number number1 = defaultOHLCDataset0.getClose(2364, 1);
      assertNull(number1);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getOpenValue((-2482), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Number number0 = defaultOHLCDataset0.getVolume(0, 0);
      assertNull(number0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number number0 = defaultOHLCDataset0.getY(0, 0);
      assertNull(number0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparable<DefaultOHLCDataset> comparable0 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(oHLCDataItem0).compareTo(any());
      doReturn((Number) null, (Number) null).when(oHLCDataItem0).getLow();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Number number0 = defaultOHLCDataset0.getLow(0, 0);
      assertNull(number0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      double double0 = defaultOHLCDataset0.getLowValue(0, 0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparable<DefaultOHLCDataset> comparable0 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals((-1), int0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = (-5204);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue(11, (-5204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5204
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getLow(2488, (-1618));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1618
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparable<DefaultOHLCDataset> comparable0 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getHigh();
      doReturn((Number) null, (Number) null).when(oHLCDataItem0).getOpen();
      doReturn((Number) null, (Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Number number0 = defaultOHLCDataset0.getOpen((-1666), 0);
      assertNull(number0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      double double0 = defaultOHLCDataset0.getVolumeValue(1, 1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      Number number1 = defaultOHLCDataset0.getHigh(0, 0);
      assertNull(number1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      double double1 = defaultOHLCDataset0.getVolumeValue(0, 0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      double double2 = defaultOHLCDataset0.getOpenValue(0, 0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getHigh((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getOpen((-489), (-489));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -489
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(oHLCDataItem0).compareTo(any());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.validateObject();
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = null;
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      defaultOHLCDataset0.removeChangeListener((DatasetChangeListener) null);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.removeChangeListener((DatasetChangeListener) null);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getClose(474, 474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 474
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolume((-1386), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.removeChangeListener(datasetChangeListener1);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = 3189;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getY(3189, 3189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3189
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(oHLCDataItem0).compareTo(any());
      doReturn((Date) null).when(oHLCDataItem0).getDate();
      doReturn((Number) null).when(oHLCDataItem0).getHigh();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean0 = defaultOHLCDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getItemCount((-282));
      assertEquals(4, int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Date date0 = defaultOHLCDataset0.getXDate(4, 0);
      assertNull(date0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean1 = defaultOHLCDataset0.equals((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number number0 = defaultOHLCDataset0.getHigh(4, 2);
      assertNull(number0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int1 = defaultOHLCDataset0.getItemCount(4);
      assertEquals(4, int1);
      assertTrue(int1 == int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean2 = defaultOHLCDataset0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.setNotify(false);
      assertEquals(4, oHLCDataItemArray0.length);
      assertFalse(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getHighValue(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(oHLCDataItem0).compareTo(any());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(7, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.setNotify(false);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(defaultOHLCDataset0.getNotify());
      assertFalse(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertFalse(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(defaultOHLCDataset0.getNotify());
      
      int int0 = 1988;
      int int1 = 1539;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getCloseValue(1988, 1539);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1539
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getHighValue(0, 574);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 574
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      boolean boolean0 = defaultOHLCDataset0.equals(oHLCDataItem0);
      assertFalse(boolean0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(oHLCDataItem0).compareTo(any());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[2] = oHLCDataItemArray0[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = (-1103);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.sortDataByDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      double double0 = defaultOHLCDataset0.getVolumeValue(1, 1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.validateObject();
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolume((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparable<DefaultOHLCDataset> comparable0 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Comparable comparable1 = defaultOHLCDataset0.getSeriesKey(0);
      assertNotNull(comparable1);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getY(467, 514);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 514
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getLowValue(0, (-3666));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3666
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int0 = 981;
      int int1 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals((-1), int1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(int1 == int0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset2 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset2.hasListener(defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertFalse(boolean0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      boolean boolean1 = defaultOHLCDataset0.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertFalse(boolean1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      int int2 = 0;
      boolean boolean2 = defaultOHLCDataset2.hasListener(defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertFalse(boolean2);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getX(0, (-4592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4592
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      double double0 = defaultOHLCDataset0.getCloseValue(1, 1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getLow();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      double double0 = defaultOHLCDataset0.getLowValue(1, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparable<String> comparable0 = null;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXValue(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      doReturn((Number) null).when(oHLCDataItem0).getLow();
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = defaultOHLCDataset0.getY(0, 0);
      assertNull(number0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.validateObject();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = 0;
      Number number1 = defaultOHLCDataset0.getLow((-368), 0);
      assertNull(number1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = 0;
      double double0 = defaultOHLCDataset0.getVolumeValue(0, 0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset2 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset2);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(boolean0);
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Kq|},H'x").when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = 0;
      int int1 = 0;
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int2 = defaultOHLCDataset0.indexOf(comparable1);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset((-1), oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(0, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      int int3 = defaultOHLCDataset0.getSeriesCount();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(1, int3);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int4 = defaultOHLCDataset1.indexOf(1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals((-1), int4);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(boolean0);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(0, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXValue((-447), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      doReturn((Number) null).when(oHLCDataItem0).getHigh();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.equals(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(boolean0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset0.getYValue(0, 0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[2];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals((-1), int0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      oHLCDataItemArray1[0] = oHLCDataItem0;
      oHLCDataItemArray1[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset3 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray1);
      assertNotNull(defaultOHLCDataset3);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset3.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      
      boolean boolean1 = defaultOHLCDataset0.equals(defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset3);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean1);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset3));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset4 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset4);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      
      boolean boolean2 = defaultOHLCDataset3.equals(defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset4);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean2);
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset4));
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertTrue(defaultOHLCDataset4.getNotify());
      
      double double1 = defaultOHLCDataset0.getHighValue(0, 0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset3);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertEquals(double1, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset4));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset3));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = defaultOHLCDataset0.getItemCount(6);
      assertEquals(5, int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = defaultOHLCDataset0.getItemCount(1);
      assertEquals(5, int1);
      assertTrue(int1 == int0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(oHLCDataItem0).getClose();
      doReturn(5).when(oHLCDataItem0).getHigh();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset2 = (DefaultOHLCDataset)defaultOHLCDataset1.clone();
      assertNotNull(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      boolean boolean0 = defaultOHLCDataset1.equals(defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset2, defaultOHLCDataset1);
      assertTrue(boolean0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset2.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset2.equals((Object)defaultOHLCDataset1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset2.getSeriesCount());
      assertTrue(defaultOHLCDataset2.getNotify());
      
      double double0 = defaultOHLCDataset1.getYValue(0, 0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(5.0, double0, 0.01);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[2];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      int int2 = defaultOHLCDataset1.indexOf(oHLCDataItem0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      oHLCDataItemArray1[0] = oHLCDataItem0;
      oHLCDataItemArray1[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset3 = (DefaultOHLCDataset)defaultOHLCDataset1.clone();
      assertNotNull(defaultOHLCDataset3);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset3, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset3.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset3.equals((Object)defaultOHLCDataset0));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset3.getSeriesCount());
      assertTrue(defaultOHLCDataset3.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset4 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray1);
      assertNotNull(defaultOHLCDataset4);
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset4.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset4.addChangeListener(datasetChangeListener0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset4.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      
      boolean boolean1 = defaultOHLCDataset1.equals(defaultOHLCDataset4);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertFalse(boolean1);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(2, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset4.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
      
      boolean boolean2 = defaultOHLCDataset4.equals(defaultOHLCDataset4);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset4, defaultOHLCDataset2);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertTrue(boolean2);
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset1));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset4.equals((Object)defaultOHLCDataset2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(2, oHLCDataItemArray1.length);
      assertTrue(defaultOHLCDataset4.getNotify());
      assertEquals(1, defaultOHLCDataset4.getSeriesCount());
      
      double double1 = defaultOHLCDataset1.getHighValue(0, 0);
      assertNotSame(oHLCDataItemArray0, oHLCDataItemArray1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset2);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset3);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset4);
      assertEquals(5.0, double1, 0.01);
      assertFalse(oHLCDataItemArray0.equals((Object)oHLCDataItemArray1));
      assertEquals(double1, double0, 0.01);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset2));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset3));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset4));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.getNotify());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getOpen();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int0 = 0;
      double double0 = defaultOHLCDataset0.getOpenValue(0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int1 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int2 = (-434);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getCloseValue((-434), 1763);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1763
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1994), 0).when(oHLCDataItem0).compareTo(any());
      doReturn((Date) null, (Date) null).when(oHLCDataItem0).getDate();
      doReturn((Number) null).when(oHLCDataItem0).getLow();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      boolean boolean0 = defaultOHLCDataset0.equals(oHLCDataItem0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(boolean0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      defaultOHLCDataset0.validateObject();
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int0 = (-3829);
      boolean boolean1 = defaultOHLCDataset1.hasListener(defaultOHLCDataset0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(boolean1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      double double0 = defaultOHLCDataset0.getLowValue(0, 1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      int int1 = 5;
      Date date0 = defaultOHLCDataset1.getXDate((-1), 0);
      assertNull(date0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      assertTrue(defaultOHLCDataset1.getNotify());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Date date1 = defaultOHLCDataset0.getXDate((-3829), 1);
      assertNull(date1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(defaultOHLCDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolumeValue((-961), (-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -961
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = defaultOHLCDataset0.getVolume(0, 0);
      assertNull(number0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.getSeriesCount();
      assertEquals(1, int0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertTrue(defaultOHLCDataset0.getNotify());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getLowValue(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      int int0 = 0;
      int int1 = (-1);
      defaultOHLCDataset0.getCloseValue(0, 0);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getClose(1, 2610);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2610
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = mock(OHLCDataItem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(oHLCDataItem0).compareTo(any());
      doReturn((Number) null).when(oHLCDataItem0).getClose();
      doReturn((Number) null, (Number) null).when(oHLCDataItem0).getLow();
      doReturn((Number) null).when(oHLCDataItem0).getVolume();
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(comparable0, oHLCDataItemArray0);
      defaultOHLCDataset0.sortDataByDate();
      defaultOHLCDataset0.getSeriesCount();
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset1.seriesChanged(seriesChangeEvent0);
      defaultOHLCDataset1.hasListener(defaultOHLCDataset0);
      defaultOHLCDataset0.hasListener(defaultOHLCDataset1);
      DatasetGroup datasetGroup0 = defaultOHLCDataset0.getGroup();
      defaultOHLCDataset0.setGroup(datasetGroup0);
      defaultOHLCDataset0.setGroup(datasetGroup0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultOHLCDataset0.removeChangeListener(datasetChangeListener0);
      defaultOHLCDataset0.getLow(1, 1);
      defaultOHLCDataset0.getVolumeValue(1, 1);
      defaultOHLCDataset0.equals(datasetGroup0);
      int int0 = 0;
      defaultOHLCDataset0.getY(1, 0);
      defaultOHLCDataset0.getLowValue(1, 1);
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(1, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }
}
