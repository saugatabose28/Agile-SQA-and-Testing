/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:27:33 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.DefaultWindDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWindDataset_ESTest extends DefaultWindDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "\"@.w%>(U[w4 Z@";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = stringArray0[1];
      stringArray0[5] = "";
      Object[][][] objectArray0 = new Object[2][6][7];
      Object[][] objectArray1 = new Object[1][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray0[1] = objectArray1;
      Object[][] objectArray2 = new Object[7][0];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object[]) stringArray0;
      Object[] objectArray3 = new Object[4];
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[][][] objectArray0 = new Object[6][7][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = defaultWindDataset0.equals("{UEjZq1/.' _cfAR");
      assertFalse(boolean0);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getYValue(3, (-496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      int int0 = (-5);
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindForce((-5), (-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getX((-2213), (-2254));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[][] objectArray0 = new Object[0][9];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, objectArray0.length);
      
      Object[][][] objectArray1 = new Object[2][0][4];
      objectArray1[0] = objectArray0;
      objectArray1[1] = objectArray0;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(list0, objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object[][][] objectArray0 = new Object[1][4][4];
      Object[][] objectArray1 = new Object[7][3];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[4] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray1[6] = (Object[]) stringArray0;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getY(718, (-5799));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 718, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getSeriesKey((-1148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1148
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getSeriesKey((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -3
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultWindDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getY((-510), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      int int0 = (-1577);
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindDirection((-1577), (-1577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][7][9];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, objectArray0.length);
      
      int int0 = 0;
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultWindDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: 0
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K#FDbh'jH,^P ";
      stringArray0[1] = "T,C|5?Wvrx/<p)e[wU";
      Object[][][] objectArray0 = new Object[2][7][3];
      Object[][] objectArray1 = new Object[2][0];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[5][8];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object[]) stringArray0;
      Object[] objectArray3 = new Object[0];
      objectArray2[1] = objectArray3;
      objectArray2[2] = (Object[]) stringArray0;
      objectArray2[3] = (Object[]) stringArray0;
      objectArray2[4] = (Object[]) stringArray0;
      objectArray0[1] = objectArray2;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultWindDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      Object[][] objectArray0 = new Object[3][7];
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) datasetChangeListener0;
      objectArray1[1] = (Object) defaultWindDataset0;
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertTrue(defaultWindDataset1.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      objectArray1[2] = (Object) defaultWindDataset1;
      objectArray1[3] = (Object) datasetChangeListener0;
      objectArray1[4] = (Object) defaultWindDataset0;
      objectArray1[5] = (Object) datasetChangeListener0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[5];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object) defaultWindDataset1;
      objectArray2[1] = (Object) defaultWindDataset1;
      objectArray2[2] = (Object) datasetChangeListener0;
      DefaultWindDataset defaultWindDataset2 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset2);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset2.getSeriesCount());
      assertTrue(defaultWindDataset2.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset2, defaultWindDataset0);
      assertNotSame(defaultWindDataset2, defaultWindDataset1);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset1));
      
      objectArray2[3] = (Object) defaultWindDataset2;
      objectArray2[4] = (Object) datasetChangeListener0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[5];
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray1));
      
      objectArray3[0] = (Object) datasetChangeListener0;
      objectArray3[1] = (Object) defaultWindDataset1;
      objectArray3[2] = (Object) datasetChangeListener0;
      objectArray3[3] = (Object) defaultWindDataset2;
      objectArray3[4] = (Object) defaultWindDataset0;
      objectArray0[2] = objectArray3;
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindForce(2462, 2462);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2462, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][3][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, objectArray0.length);
      
      defaultWindDataset0.setNotify(false);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Object[][] objectArray1 = new Object[5][2];
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) defaultWindDataset0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[2];
      assertFalse(objectArray3.equals((Object)objectArray2));
      
      objectArray3[0] = (Object) defaultWindDataset0;
      objectArray3[1] = (Object) defaultWindDataset0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[4];
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray4.equals((Object)objectArray3));
      
      objectArray4[0] = (Object) defaultWindDataset0;
      objectArray4[1] = (Object) defaultWindDataset0;
      objectArray4[2] = (Object) defaultWindDataset0;
      objectArray4[3] = (Object) defaultWindDataset0;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[2];
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      
      objectArray5[0] = (Object) defaultWindDataset0;
      objectArray5[1] = (Object) defaultWindDataset0;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[9];
      assertFalse(objectArray6.equals((Object)objectArray3));
      assertFalse(objectArray6.equals((Object)objectArray5));
      assertFalse(objectArray6.equals((Object)objectArray4));
      assertFalse(objectArray6.equals((Object)objectArray2));
      
      objectArray6[0] = (Object) defaultWindDataset0;
      objectArray6[1] = (Object) defaultWindDataset0;
      objectArray6[2] = (Object) defaultWindDataset0;
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertFalse(defaultWindDataset1.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertEquals(0, objectArray0.length);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      objectArray6[3] = (Object) defaultWindDataset1;
      objectArray6[4] = (Object) defaultWindDataset0;
      objectArray6[5] = (Object) defaultWindDataset0;
      DefaultWindDataset defaultWindDataset2 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset2);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset2.getSeriesCount());
      assertFalse(defaultWindDataset2.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset2, defaultWindDataset0);
      assertNotSame(defaultWindDataset2, defaultWindDataset1);
      assertEquals(0, objectArray0.length);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset0));
      
      objectArray6[6] = (Object) defaultWindDataset2;
      DefaultWindDataset defaultWindDataset3 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset3);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertFalse(defaultWindDataset3.getNotify());
      assertEquals(0, defaultWindDataset3.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset3, defaultWindDataset2);
      assertNotSame(defaultWindDataset3, defaultWindDataset0);
      assertNotSame(defaultWindDataset3, defaultWindDataset1);
      assertEquals(0, objectArray0.length);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset0));
      
      objectArray6[7] = (Object) defaultWindDataset3;
      objectArray6[8] = (Object) defaultWindDataset0;
      objectArray1[4] = objectArray6;
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(5, objectArray1.length);
      
      int int0 = defaultWindDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertEquals(0, objectArray0.length);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindDirection(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][6][5];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindDirection(0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      int int0 = defaultWindDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindForce(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultWindDataset0.getItemCount((-1306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1306
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[][][] objectArray0 = new Object[9][5][6];
      Object[][] objectArray1 = new Object[4][1];
      Object[] objectArray2 = new Object[1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertTrue(defaultWindDataset1.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      objectArray2[0] = (Object) defaultWindDataset1;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[6];
      assertFalse(objectArray3.equals((Object)objectArray2));
      
      DefaultWindDataset defaultWindDataset2 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset2);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertTrue(defaultWindDataset2.getNotify());
      assertEquals(0, defaultWindDataset2.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset2, defaultWindDataset1);
      assertNotSame(defaultWindDataset2, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset0));
      
      objectArray3[0] = (Object) defaultWindDataset2;
      objectArray3[1] = (Object) defaultWindDataset0;
      objectArray3[2] = (Object) defaultWindDataset1;
      objectArray3[3] = (Object) defaultWindDataset0;
      objectArray3[4] = (Object) defaultWindDataset1;
      DefaultWindDataset defaultWindDataset3 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset3);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertTrue(defaultWindDataset3.getNotify());
      assertEquals(0, defaultWindDataset3.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset3, defaultWindDataset1);
      assertNotSame(defaultWindDataset3, defaultWindDataset0);
      assertNotSame(defaultWindDataset3, defaultWindDataset2);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset0));
      
      objectArray3[5] = (Object) defaultWindDataset3;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[4];
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray4.equals((Object)objectArray3));
      
      objectArray4[0] = (Object) defaultWindDataset0;
      objectArray4[1] = (Object) defaultWindDataset0;
      objectArray4[2] = (Object) defaultWindDataset3;
      objectArray4[3] = (Object) defaultWindDataset2;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[2];
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      
      objectArray5[0] = (Object) defaultWindDataset0;
      objectArray5[1] = (Object) defaultWindDataset0;
      objectArray1[3] = objectArray5;
      objectArray0[0] = objectArray1;
      Object[][] objectArray6 = new Object[7][7];
      assertFalse(objectArray6.equals((Object)objectArray1));
      
      objectArray6[0] = objectArray3;
      objectArray6[1] = objectArray2;
      objectArray6[2] = objectArray5;
      objectArray6[3] = objectArray2;
      objectArray6[4] = objectArray2;
      objectArray6[5] = objectArray3;
      objectArray6[6] = objectArray3;
      objectArray0[1] = objectArray6;
      Object[][] objectArray7 = new Object[9][4];
      assertFalse(objectArray7.equals((Object)objectArray6));
      assertFalse(objectArray7.equals((Object)objectArray1));
      
      Object[] objectArray8 = new Object[3];
      assertFalse(objectArray8.equals((Object)objectArray2));
      assertFalse(objectArray8.equals((Object)objectArray4));
      assertFalse(objectArray8.equals((Object)objectArray5));
      assertFalse(objectArray8.equals((Object)objectArray3));
      
      objectArray8[0] = (Object) defaultWindDataset1;
      objectArray8[1] = (Object) defaultWindDataset2;
      objectArray8[2] = (Object) defaultWindDataset1;
      objectArray7[0] = objectArray8;
      objectArray7[1] = objectArray4;
      objectArray7[2] = objectArray3;
      objectArray7[3] = objectArray3;
      objectArray7[4] = objectArray5;
      objectArray7[5] = objectArray3;
      objectArray7[6] = objectArray2;
      Object[] objectArray9 = new Object[5];
      assertFalse(objectArray9.equals((Object)objectArray8));
      assertFalse(objectArray9.equals((Object)objectArray2));
      assertFalse(objectArray9.equals((Object)objectArray4));
      assertFalse(objectArray9.equals((Object)objectArray3));
      assertFalse(objectArray9.equals((Object)objectArray5));
      
      objectArray9[0] = (Object) defaultWindDataset2;
      objectArray9[1] = (Object) defaultWindDataset3;
      DefaultWindDataset defaultWindDataset4 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset4);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset4.getSeriesCount());
      assertTrue(defaultWindDataset4.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset4, defaultWindDataset2);
      assertNotSame(defaultWindDataset4, defaultWindDataset0);
      assertNotSame(defaultWindDataset4, defaultWindDataset1);
      assertNotSame(defaultWindDataset4, defaultWindDataset3);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset0));
      
      objectArray9[2] = (Object) defaultWindDataset4;
      DefaultWindDataset defaultWindDataset5 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset5);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset5.getSeriesCount());
      assertTrue(defaultWindDataset5.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset5, defaultWindDataset3);
      assertNotSame(defaultWindDataset5, defaultWindDataset1);
      assertNotSame(defaultWindDataset5, defaultWindDataset2);
      assertNotSame(defaultWindDataset5, defaultWindDataset0);
      assertNotSame(defaultWindDataset5, defaultWindDataset4);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset2));
      
      objectArray9[3] = (Object) defaultWindDataset5;
      objectArray9[4] = (Object) defaultWindDataset3;
      objectArray7[7] = objectArray9;
      objectArray7[8] = objectArray2;
      objectArray0[2] = objectArray7;
      Object[][] objectArray10 = new Object[9][7];
      assertFalse(objectArray10.equals((Object)objectArray6));
      assertFalse(objectArray10.equals((Object)objectArray7));
      assertFalse(objectArray10.equals((Object)objectArray1));
      
      objectArray10[0] = objectArray4;
      objectArray10[1] = objectArray2;
      objectArray10[2] = objectArray9;
      objectArray10[3] = objectArray9;
      objectArray10[4] = objectArray9;
      objectArray10[5] = objectArray3;
      objectArray10[6] = objectArray8;
      Object[] objectArray11 = new Object[7];
      assertFalse(objectArray11.equals((Object)objectArray2));
      assertFalse(objectArray11.equals((Object)objectArray4));
      assertFalse(objectArray11.equals((Object)objectArray8));
      assertFalse(objectArray11.equals((Object)objectArray9));
      assertFalse(objectArray11.equals((Object)objectArray3));
      assertFalse(objectArray11.equals((Object)objectArray5));
      
      objectArray11[0] = (Object) defaultWindDataset2;
      DefaultWindDataset defaultWindDataset6 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset6);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset6.getSeriesCount());
      assertTrue(defaultWindDataset6.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset6, defaultWindDataset3);
      assertNotSame(defaultWindDataset6, defaultWindDataset5);
      assertNotSame(defaultWindDataset6, defaultWindDataset4);
      assertNotSame(defaultWindDataset6, defaultWindDataset1);
      assertNotSame(defaultWindDataset6, defaultWindDataset0);
      assertNotSame(defaultWindDataset6, defaultWindDataset2);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset5));
      
      objectArray11[1] = (Object) defaultWindDataset6;
      objectArray11[2] = (Object) defaultWindDataset1;
      objectArray11[3] = (Object) defaultWindDataset3;
      objectArray11[4] = (Object) defaultWindDataset4;
      objectArray11[5] = (Object) defaultWindDataset3;
      objectArray11[6] = (Object) defaultWindDataset0;
      objectArray10[7] = objectArray11;
      objectArray10[8] = objectArray2;
      objectArray0[3] = objectArray10;
      Object[][] objectArray12 = new Object[0][3];
      assertFalse(objectArray12.equals((Object)objectArray7));
      assertFalse(objectArray12.equals((Object)objectArray10));
      assertFalse(objectArray12.equals((Object)objectArray1));
      assertFalse(objectArray12.equals((Object)objectArray6));
      
      objectArray0[4] = objectArray12;
      Object[][] objectArray13 = new Object[7][6];
      assertFalse(objectArray13.equals((Object)objectArray1));
      assertFalse(objectArray13.equals((Object)objectArray12));
      assertFalse(objectArray13.equals((Object)objectArray10));
      assertFalse(objectArray13.equals((Object)objectArray6));
      assertFalse(objectArray13.equals((Object)objectArray7));
      
      objectArray13[0] = objectArray9;
      objectArray13[1] = objectArray2;
      objectArray13[2] = objectArray5;
      objectArray13[3] = objectArray9;
      objectArray13[4] = objectArray2;
      objectArray13[5] = objectArray4;
      objectArray13[6] = objectArray9;
      objectArray0[5] = objectArray13;
      Object[][] objectArray14 = new Object[0][3];
      assertFalse(objectArray14.equals((Object)objectArray10));
      assertFalse(objectArray14.equals((Object)objectArray12));
      assertFalse(objectArray14.equals((Object)objectArray13));
      assertFalse(objectArray14.equals((Object)objectArray6));
      assertFalse(objectArray14.equals((Object)objectArray1));
      assertFalse(objectArray14.equals((Object)objectArray7));
      
      objectArray0[6] = objectArray14;
      Object[][] objectArray15 = new Object[7][5];
      assertFalse(objectArray15.equals((Object)objectArray6));
      assertFalse(objectArray15.equals((Object)objectArray7));
      assertFalse(objectArray15.equals((Object)objectArray13));
      assertFalse(objectArray15.equals((Object)objectArray1));
      assertFalse(objectArray15.equals((Object)objectArray10));
      assertFalse(objectArray15.equals((Object)objectArray12));
      assertFalse(objectArray15.equals((Object)objectArray14));
      
      objectArray15[0] = objectArray5;
      objectArray15[1] = objectArray11;
      objectArray15[2] = objectArray9;
      Object[] objectArray16 = new Object[6];
      assertFalse(objectArray16.equals((Object)objectArray8));
      assertFalse(objectArray16.equals((Object)objectArray9));
      assertFalse(objectArray16.equals((Object)objectArray11));
      assertFalse(objectArray16.equals((Object)objectArray3));
      assertFalse(objectArray16.equals((Object)objectArray5));
      assertFalse(objectArray16.equals((Object)objectArray2));
      assertFalse(objectArray16.equals((Object)objectArray4));
      
      objectArray16[0] = (Object) defaultWindDataset5;
      objectArray16[1] = (Object) defaultWindDataset6;
      DefaultWindDataset defaultWindDataset7 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset7);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertTrue(defaultWindDataset7.getNotify());
      assertEquals(0, defaultWindDataset7.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset7, defaultWindDataset3);
      assertNotSame(defaultWindDataset7, defaultWindDataset5);
      assertNotSame(defaultWindDataset7, defaultWindDataset1);
      assertNotSame(defaultWindDataset7, defaultWindDataset2);
      assertNotSame(defaultWindDataset7, defaultWindDataset4);
      assertNotSame(defaultWindDataset7, defaultWindDataset0);
      assertNotSame(defaultWindDataset7, defaultWindDataset6);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset2));
      
      objectArray16[2] = (Object) defaultWindDataset7;
      objectArray16[3] = (Object) defaultWindDataset0;
      objectArray16[4] = (Object) defaultWindDataset5;
      objectArray16[5] = (Object) defaultWindDataset3;
      objectArray15[3] = objectArray16;
      objectArray15[4] = objectArray2;
      objectArray15[5] = objectArray11;
      objectArray15[6] = objectArray8;
      objectArray0[7] = objectArray15;
      Object[][] objectArray17 = new Object[6][9];
      assertFalse(objectArray17.equals((Object)objectArray6));
      assertFalse(objectArray17.equals((Object)objectArray10));
      assertFalse(objectArray17.equals((Object)objectArray13));
      assertFalse(objectArray17.equals((Object)objectArray7));
      assertFalse(objectArray17.equals((Object)objectArray15));
      assertFalse(objectArray17.equals((Object)objectArray1));
      assertFalse(objectArray17.equals((Object)objectArray12));
      assertFalse(objectArray17.equals((Object)objectArray14));
      
      objectArray17[0] = objectArray5;
      objectArray17[1] = objectArray8;
      objectArray17[2] = objectArray4;
      objectArray17[3] = objectArray5;
      objectArray17[4] = objectArray9;
      objectArray17[5] = objectArray9;
      objectArray0[8] = objectArray17;
      DefaultWindDataset defaultWindDataset8 = null;
      try {
        defaultWindDataset8 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][][] objectArray0 = new Object[0][2][9];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      DatasetGroup datasetGroup0 = defaultWindDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      defaultWindDataset0.setGroup(datasetGroup0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultWindDataset0.getXValue(0, 2359);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[][][] objectArray0 = new Object[7][4][3];
      Object[][] objectArray1 = new Object[6][5];
      Object[] objectArray2 = new Object[9];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertTrue(defaultWindDataset1.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      objectArray2[0] = (Object) defaultWindDataset1;
      DefaultWindDataset defaultWindDataset2 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset2);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset2.getSeriesCount());
      assertTrue(defaultWindDataset2.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset2, defaultWindDataset0);
      assertNotSame(defaultWindDataset2, defaultWindDataset1);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset1));
      
      objectArray2[1] = (Object) defaultWindDataset2;
      DefaultWindDataset defaultWindDataset3 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset3);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset3.getNotify());
      assertEquals(0, defaultWindDataset3.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset3, defaultWindDataset1);
      assertNotSame(defaultWindDataset3, defaultWindDataset2);
      assertNotSame(defaultWindDataset3, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset0));
      
      objectArray2[2] = (Object) defaultWindDataset3;
      DefaultWindDataset defaultWindDataset4 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset4);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset4.getNotify());
      assertEquals(0, defaultWindDataset4.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset4, defaultWindDataset2);
      assertNotSame(defaultWindDataset4, defaultWindDataset1);
      assertNotSame(defaultWindDataset4, defaultWindDataset3);
      assertNotSame(defaultWindDataset4, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset2));
      
      objectArray2[3] = (Object) defaultWindDataset4;
      DefaultWindDataset defaultWindDataset5 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset5);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset5.getNotify());
      assertEquals(0, defaultWindDataset5.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset5, defaultWindDataset4);
      assertNotSame(defaultWindDataset5, defaultWindDataset2);
      assertNotSame(defaultWindDataset5, defaultWindDataset1);
      assertNotSame(defaultWindDataset5, defaultWindDataset0);
      assertNotSame(defaultWindDataset5, defaultWindDataset3);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset1));
      
      objectArray2[4] = (Object) defaultWindDataset5;
      DefaultWindDataset defaultWindDataset6 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset6);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset6.getSeriesCount());
      assertTrue(defaultWindDataset6.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset6, defaultWindDataset3);
      assertNotSame(defaultWindDataset6, defaultWindDataset1);
      assertNotSame(defaultWindDataset6, defaultWindDataset2);
      assertNotSame(defaultWindDataset6, defaultWindDataset5);
      assertNotSame(defaultWindDataset6, defaultWindDataset0);
      assertNotSame(defaultWindDataset6, defaultWindDataset4);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset1));
      
      objectArray2[5] = (Object) defaultWindDataset6;
      DefaultWindDataset defaultWindDataset7 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset7);
      assertEquals(0, defaultWindDataset7.getSeriesCount());
      assertTrue(defaultWindDataset7.getNotify());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotSame(defaultWindDataset7, defaultWindDataset3);
      assertNotSame(defaultWindDataset7, defaultWindDataset5);
      assertNotSame(defaultWindDataset7, defaultWindDataset1);
      assertNotSame(defaultWindDataset7, defaultWindDataset4);
      assertNotSame(defaultWindDataset7, defaultWindDataset2);
      assertNotSame(defaultWindDataset7, defaultWindDataset6);
      assertNotSame(defaultWindDataset7, defaultWindDataset0);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      
      objectArray2[6] = (Object) defaultWindDataset7;
      DefaultWindDataset defaultWindDataset8 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset8);
      assertTrue(defaultWindDataset8.getNotify());
      assertEquals(0, defaultWindDataset8.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotSame(defaultWindDataset8, defaultWindDataset5);
      assertNotSame(defaultWindDataset8, defaultWindDataset0);
      assertNotSame(defaultWindDataset8, defaultWindDataset6);
      assertNotSame(defaultWindDataset8, defaultWindDataset4);
      assertNotSame(defaultWindDataset8, defaultWindDataset3);
      assertNotSame(defaultWindDataset8, defaultWindDataset7);
      assertNotSame(defaultWindDataset8, defaultWindDataset1);
      assertNotSame(defaultWindDataset8, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset8);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset8.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset7));
      
      objectArray2[7] = (Object) defaultWindDataset8;
      DefaultWindDataset defaultWindDataset9 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset9);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset9.getNotify());
      assertEquals(0, defaultWindDataset9.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset9);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset8);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset9, defaultWindDataset6);
      assertNotSame(defaultWindDataset9, defaultWindDataset7);
      assertNotSame(defaultWindDataset9, defaultWindDataset5);
      assertNotSame(defaultWindDataset9, defaultWindDataset2);
      assertNotSame(defaultWindDataset9, defaultWindDataset8);
      assertNotSame(defaultWindDataset9, defaultWindDataset1);
      assertNotSame(defaultWindDataset9, defaultWindDataset3);
      assertNotSame(defaultWindDataset9, defaultWindDataset4);
      assertNotSame(defaultWindDataset9, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset8));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset8));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset9.equals((Object)defaultWindDataset5));
      
      objectArray2[8] = (Object) defaultWindDataset9;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[7];
      assertFalse(objectArray3.equals((Object)objectArray2));
      
      objectArray3[0] = (Object) defaultWindDataset6;
      objectArray3[1] = (Object) defaultWindDataset3;
      objectArray3[2] = (Object) defaultWindDataset9;
      objectArray3[3] = (Object) defaultWindDataset6;
      objectArray3[4] = (Object) defaultWindDataset2;
      objectArray3[5] = (Object) defaultWindDataset7;
      objectArray3[6] = (Object) defaultWindDataset3;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[6];
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray2));
      
      objectArray4[0] = (Object) defaultWindDataset5;
      objectArray4[1] = (Object) defaultWindDataset9;
      objectArray4[2] = (Object) defaultWindDataset3;
      objectArray4[3] = (Object) defaultWindDataset3;
      objectArray4[4] = (Object) defaultWindDataset8;
      objectArray4[5] = (Object) defaultWindDataset2;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[8];
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray3));
      
      objectArray5[0] = (Object) defaultWindDataset0;
      objectArray5[1] = (Object) defaultWindDataset4;
      objectArray5[2] = (Object) defaultWindDataset4;
      DefaultWindDataset defaultWindDataset10 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset10);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset10.getSeriesCount());
      assertTrue(defaultWindDataset10.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset9);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset8);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset10);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset10, defaultWindDataset8);
      assertNotSame(defaultWindDataset10, defaultWindDataset3);
      assertNotSame(defaultWindDataset10, defaultWindDataset5);
      assertNotSame(defaultWindDataset10, defaultWindDataset1);
      assertNotSame(defaultWindDataset10, defaultWindDataset7);
      assertNotSame(defaultWindDataset10, defaultWindDataset2);
      assertNotSame(defaultWindDataset10, defaultWindDataset6);
      assertNotSame(defaultWindDataset10, defaultWindDataset9);
      assertNotSame(defaultWindDataset10, defaultWindDataset4);
      assertNotSame(defaultWindDataset10, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset8));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset9));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset9));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset8));
      assertTrue(defaultWindDataset10.equals((Object)defaultWindDataset1));
      
      objectArray5[3] = (Object) defaultWindDataset10;
      DefaultWindDataset defaultWindDataset11 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset11);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset11.getSeriesCount());
      assertTrue(defaultWindDataset11.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset9);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset11);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset8);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset10);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset11, defaultWindDataset2);
      assertNotSame(defaultWindDataset11, defaultWindDataset9);
      assertNotSame(defaultWindDataset11, defaultWindDataset4);
      assertNotSame(defaultWindDataset11, defaultWindDataset7);
      assertNotSame(defaultWindDataset11, defaultWindDataset10);
      assertNotSame(defaultWindDataset11, defaultWindDataset1);
      assertNotSame(defaultWindDataset11, defaultWindDataset5);
      assertNotSame(defaultWindDataset11, defaultWindDataset3);
      assertNotSame(defaultWindDataset11, defaultWindDataset0);
      assertNotSame(defaultWindDataset11, defaultWindDataset8);
      assertNotSame(defaultWindDataset11, defaultWindDataset6);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset8));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset10));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset9));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset8));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset7));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset9));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset10));
      assertTrue(defaultWindDataset11.equals((Object)defaultWindDataset3));
      
      objectArray5[4] = (Object) defaultWindDataset11;
      objectArray5[5] = (Object) defaultWindDataset0;
      objectArray5[6] = (Object) defaultWindDataset6;
      objectArray5[7] = (Object) defaultWindDataset8;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[1];
      assertFalse(objectArray6.equals((Object)objectArray3));
      assertFalse(objectArray6.equals((Object)objectArray5));
      assertFalse(objectArray6.equals((Object)objectArray4));
      assertFalse(objectArray6.equals((Object)objectArray2));
      
      objectArray6[0] = (Object) defaultWindDataset5;
      objectArray1[4] = objectArray6;
      Object[] objectArray7 = new Object[2];
      assertFalse(objectArray7.equals((Object)objectArray5));
      assertFalse(objectArray7.equals((Object)objectArray2));
      assertFalse(objectArray7.equals((Object)objectArray4));
      assertFalse(objectArray7.equals((Object)objectArray3));
      assertFalse(objectArray7.equals((Object)objectArray6));
      
      objectArray7[0] = (Object) defaultWindDataset11;
      objectArray7[1] = (Object) defaultWindDataset1;
      objectArray1[5] = objectArray7;
      objectArray0[0] = objectArray1;
      Object[][] objectArray8 = new Object[0][5];
      assertFalse(objectArray8.equals((Object)objectArray1));
      
      objectArray0[1] = objectArray8;
      Object[][] objectArray9 = new Object[2][5];
      assertFalse(objectArray9.equals((Object)objectArray8));
      assertFalse(objectArray9.equals((Object)objectArray1));
      
      objectArray9[0] = objectArray6;
      objectArray9[1] = objectArray3;
      objectArray0[2] = objectArray9;
      Object[][] objectArray10 = new Object[3][1];
      assertFalse(objectArray10.equals((Object)objectArray8));
      assertFalse(objectArray10.equals((Object)objectArray1));
      assertFalse(objectArray10.equals((Object)objectArray9));
      
      objectArray10[0] = objectArray3;
      objectArray10[1] = objectArray6;
      objectArray10[2] = objectArray4;
      objectArray0[3] = objectArray10;
      Object[][] objectArray11 = new Object[0][4];
      assertFalse(objectArray11.equals((Object)objectArray9));
      assertFalse(objectArray11.equals((Object)objectArray1));
      assertFalse(objectArray11.equals((Object)objectArray10));
      assertFalse(objectArray11.equals((Object)objectArray8));
      
      objectArray0[4] = objectArray11;
      Object[][] objectArray12 = new Object[0][5];
      assertFalse(objectArray12.equals((Object)objectArray8));
      assertFalse(objectArray12.equals((Object)objectArray1));
      assertFalse(objectArray12.equals((Object)objectArray10));
      assertFalse(objectArray12.equals((Object)objectArray9));
      assertFalse(objectArray12.equals((Object)objectArray11));
      
      objectArray0[5] = objectArray12;
      Object[][] objectArray13 = new Object[3][3];
      assertFalse(objectArray13.equals((Object)objectArray10));
      assertFalse(objectArray13.equals((Object)objectArray1));
      assertFalse(objectArray13.equals((Object)objectArray9));
      assertFalse(objectArray13.equals((Object)objectArray11));
      assertFalse(objectArray13.equals((Object)objectArray12));
      assertFalse(objectArray13.equals((Object)objectArray8));
      
      objectArray13[0] = objectArray3;
      objectArray13[1] = objectArray4;
      objectArray13[2] = objectArray4;
      objectArray0[6] = objectArray13;
      DefaultWindDataset defaultWindDataset12 = null;
      try {
        defaultWindDataset12 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultWindDataset cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[][][] objectArray0 = new Object[5][0][1];
      Object[][] objectArray1 = new Object[4][1];
      Object[] objectArray2 = new Object[8];
      String[] stringArray0 = null;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      Object[][] objectArray0 = new Object[0][6];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, objectArray0.length);
      
      int int0 = 0;
      defaultWindDataset0.setNotify(false);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: 0
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[][] objectArrayArray0 = null;
      // Undeclared exception!
      try { 
        DefaultWindDataset.seriesNameListFromDataArray((Object[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[][][] objectArray0 = new Object[4][9][9];
      Object[][] objectArray1 = new Object[0][7];
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[0][0];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray0[1] = objectArray2;
      Object[][] objectArray3 = new Object[6][4];
      assertFalse(objectArray3.equals((Object)objectArray1));
      assertFalse(objectArray3.equals((Object)objectArray2));
      
      Object[] objectArray4 = new Object[3];
      List<String> list0 = null;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((List) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKeys' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[][][] objectArray0 = new Object[4][9][4];
      Object[][] objectArray1 = new Object[4][8];
      Object[] objectArray2 = new Object[7];
      String[] stringArray0 = new String[2];
      String string0 = "%S";
      stringArray0[0] = "%S";
      String string1 = "Zd9x|A)I(";
      stringArray0[1] = "Zd9x|A)I(";
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getX(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "x82Fx`v3:NZIdofZzg}";
      Object[][][] objectArray0 = new Object[0][4][1];
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[][] objectArray0 = new Object[0][9];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, objectArray0.length);
      
      Object[][][] objectArray1 = new Object[1][9][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray1);
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray1.length);
      
      defaultWindDataset0.validateObject();
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray1.length);
      
      Comparable comparable0 = defaultWindDataset0.getSeriesKey(0);
      assertNotNull(comparable0);
      assertEquals("Series 1", comparable0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray1.length);
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getXValue(885, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 885, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.jfree.data.xy.DefaultWindDataset";
      stringArray0[2] = "";
      stringArray0[3] = "vJInkT{~L:7'Hok";
      stringArray0[4] = "d!\"Vo(mTo+FME0>4PKD";
      stringArray0[5] = "";
      Object[][][] objectArray0 = new Object[1][4][5];
      Object[][] objectArray1 = new Object[6][4];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[4] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindDirection(0, 4287);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      Object[][] objectArray0 = new Object[2][0];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) defaultWindDataset0;
      objectArray1[1] = (Object) defaultWindDataset0;
      objectArray1[2] = (Object) defaultWindDataset0;
      objectArray1[3] = (Object) defaultWindDataset0;
      objectArray1[4] = (Object) defaultWindDataset0;
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertTrue(defaultWindDataset1.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      objectArray1[5] = (Object) defaultWindDataset1;
      objectArray1[6] = (Object) defaultWindDataset0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[1];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object) defaultWindDataset0;
      objectArray0[1] = objectArray2;
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][7][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = defaultWindDataset0.equals("{UEjZq1/.' _cfAR");
      assertFalse(boolean0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      DatasetGroup datasetGroup0 = defaultWindDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(0, objectArray0.length);
      
      defaultWindDataset0.setGroup(datasetGroup0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = defaultWindDataset0.hasListener((EventListener) null);
      assertFalse(boolean1);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getY(0, 697);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[][][] objectArray0 = new Object[3][2][7];
      Object[][] objectArray1 = new Object[8][6];
      Object[] objectArray2 = new Object[5];
      String[] stringArray0 = new String[4];
      stringArray0[1] = ")k0U]sVZ`~;NV@v;-6";
      stringArray0[2] = "";
      stringArray0[3] = "Invalid series index: ";
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      defaultWindDataset0.setNotify(false);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertFalse(defaultWindDataset1.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      boolean boolean0 = defaultWindDataset0.equals(defaultWindDataset1);
      assertTrue(boolean0);
      assertFalse(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertFalse(defaultWindDataset1.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      int int0 = (-1148);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindForce(3, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[][][] objectArray0 = new Object[6][1][0];
      Object[][] objectArray1 = new Object[9][2];
      Object[] objectArray2 = new Object[1];
      String[] stringArray0 = new String[0];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertTrue(defaultWindDataset1.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      boolean boolean0 = defaultWindDataset0.equals(defaultWindDataset1);
      assertTrue(boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertTrue(defaultWindDataset1.getNotify());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultWindDataset0.indexOf(comparable0);
      assertEquals((-1), int0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getItemCount(150);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: 150
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[][] objectArray0 = new Object[9][7];
      Object[] objectArray1 = new Object[3];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset1);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertTrue(defaultWindDataset1.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      objectArray1[0] = (Object) defaultWindDataset1;
      DefaultWindDataset defaultWindDataset2 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset2);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset2.getNotify());
      assertEquals(0, defaultWindDataset2.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset2, defaultWindDataset0);
      assertNotSame(defaultWindDataset2, defaultWindDataset1);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset2.equals((Object)defaultWindDataset0));
      
      objectArray1[1] = (Object) defaultWindDataset2;
      DefaultWindDataset defaultWindDataset3 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset3);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset3.getSeriesCount());
      assertTrue(defaultWindDataset3.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset3, defaultWindDataset0);
      assertNotSame(defaultWindDataset3, defaultWindDataset2);
      assertNotSame(defaultWindDataset3, defaultWindDataset1);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset3.equals((Object)defaultWindDataset0));
      
      objectArray1[2] = (Object) defaultWindDataset3;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[4];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object) defaultWindDataset0;
      objectArray2[1] = (Object) defaultWindDataset0;
      objectArray2[2] = (Object) defaultWindDataset2;
      objectArray2[3] = (Object) defaultWindDataset2;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray1));
      
      objectArray3[0] = (Object) defaultWindDataset1;
      DefaultWindDataset defaultWindDataset4 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset4);
      assertTrue(defaultWindDataset4.getNotify());
      assertEquals(0, defaultWindDataset4.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotSame(defaultWindDataset4, defaultWindDataset0);
      assertNotSame(defaultWindDataset4, defaultWindDataset2);
      assertNotSame(defaultWindDataset4, defaultWindDataset3);
      assertNotSame(defaultWindDataset4, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset4.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      
      objectArray3[1] = (Object) defaultWindDataset4;
      objectArray3[2] = (Object) defaultWindDataset0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[7];
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray4.equals((Object)objectArray3));
      
      objectArray4[0] = (Object) defaultWindDataset3;
      objectArray4[1] = (Object) defaultWindDataset1;
      objectArray4[2] = (Object) defaultWindDataset2;
      objectArray4[3] = (Object) defaultWindDataset4;
      objectArray4[4] = (Object) defaultWindDataset2;
      objectArray4[5] = (Object) defaultWindDataset1;
      DefaultWindDataset defaultWindDataset5 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset5);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset5.getSeriesCount());
      assertTrue(defaultWindDataset5.getNotify());
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset5, defaultWindDataset3);
      assertNotSame(defaultWindDataset5, defaultWindDataset2);
      assertNotSame(defaultWindDataset5, defaultWindDataset4);
      assertNotSame(defaultWindDataset5, defaultWindDataset0);
      assertNotSame(defaultWindDataset5, defaultWindDataset1);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset5.equals((Object)defaultWindDataset2));
      
      objectArray4[6] = (Object) defaultWindDataset5;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[8];
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray1));
      
      objectArray5[0] = (Object) defaultWindDataset5;
      objectArray5[1] = (Object) defaultWindDataset2;
      objectArray5[2] = (Object) defaultWindDataset3;
      objectArray5[3] = (Object) defaultWindDataset2;
      objectArray5[4] = (Object) defaultWindDataset4;
      objectArray5[5] = (Object) defaultWindDataset4;
      objectArray5[6] = (Object) defaultWindDataset2;
      DefaultWindDataset defaultWindDataset6 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset6);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset6.getNotify());
      assertEquals(0, defaultWindDataset6.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset6, defaultWindDataset0);
      assertNotSame(defaultWindDataset6, defaultWindDataset4);
      assertNotSame(defaultWindDataset6, defaultWindDataset2);
      assertNotSame(defaultWindDataset6, defaultWindDataset5);
      assertNotSame(defaultWindDataset6, defaultWindDataset1);
      assertNotSame(defaultWindDataset6, defaultWindDataset3);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset6.equals((Object)defaultWindDataset4));
      
      objectArray5[7] = (Object) defaultWindDataset6;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[1];
      assertFalse(objectArray6.equals((Object)objectArray1));
      assertFalse(objectArray6.equals((Object)objectArray4));
      assertFalse(objectArray6.equals((Object)objectArray5));
      assertFalse(objectArray6.equals((Object)objectArray2));
      assertFalse(objectArray6.equals((Object)objectArray3));
      
      objectArray6[0] = (Object) defaultWindDataset1;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[5];
      assertFalse(objectArray7.equals((Object)objectArray6));
      assertFalse(objectArray7.equals((Object)objectArray1));
      assertFalse(objectArray7.equals((Object)objectArray4));
      assertFalse(objectArray7.equals((Object)objectArray5));
      assertFalse(objectArray7.equals((Object)objectArray2));
      assertFalse(objectArray7.equals((Object)objectArray3));
      
      objectArray7[0] = (Object) defaultWindDataset2;
      objectArray7[1] = (Object) defaultWindDataset6;
      objectArray7[2] = (Object) defaultWindDataset4;
      objectArray7[3] = (Object) defaultWindDataset3;
      objectArray7[4] = (Object) defaultWindDataset3;
      objectArray0[6] = objectArray7;
      Object[] objectArray8 = new Object[3];
      assertFalse(objectArray8.equals((Object)objectArray5));
      assertFalse(objectArray8.equals((Object)objectArray4));
      assertFalse(objectArray8.equals((Object)objectArray2));
      assertFalse(objectArray8.equals((Object)objectArray7));
      assertFalse(objectArray8.equals((Object)objectArray6));
      assertFalse(objectArray8.equals((Object)objectArray1));
      assertFalse(objectArray8.equals((Object)objectArray3));
      
      objectArray8[0] = (Object) defaultWindDataset2;
      objectArray8[1] = (Object) defaultWindDataset6;
      objectArray8[2] = (Object) defaultWindDataset2;
      objectArray0[7] = objectArray8;
      Object[] objectArray9 = new Object[6];
      assertFalse(objectArray9.equals((Object)objectArray3));
      assertFalse(objectArray9.equals((Object)objectArray2));
      assertFalse(objectArray9.equals((Object)objectArray8));
      assertFalse(objectArray9.equals((Object)objectArray1));
      assertFalse(objectArray9.equals((Object)objectArray4));
      assertFalse(objectArray9.equals((Object)objectArray5));
      assertFalse(objectArray9.equals((Object)objectArray6));
      assertFalse(objectArray9.equals((Object)objectArray7));
      
      objectArray9[0] = (Object) defaultWindDataset3;
      objectArray9[1] = (Object) defaultWindDataset2;
      objectArray9[2] = (Object) defaultWindDataset0;
      DefaultWindDataset defaultWindDataset7 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertNotNull(defaultWindDataset7);
      assertTrue(defaultWindDataset0.getNotify());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset7.getNotify());
      assertEquals(0, defaultWindDataset7.getSeriesCount());
      assertNotSame(defaultWindDataset0, defaultWindDataset3);
      assertNotSame(defaultWindDataset0, defaultWindDataset2);
      assertNotSame(defaultWindDataset0, defaultWindDataset4);
      assertNotSame(defaultWindDataset0, defaultWindDataset7);
      assertNotSame(defaultWindDataset0, defaultWindDataset6);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset5);
      assertNotSame(defaultWindDataset7, defaultWindDataset3);
      assertNotSame(defaultWindDataset7, defaultWindDataset5);
      assertNotSame(defaultWindDataset7, defaultWindDataset1);
      assertNotSame(defaultWindDataset7, defaultWindDataset6);
      assertNotSame(defaultWindDataset7, defaultWindDataset0);
      assertNotSame(defaultWindDataset7, defaultWindDataset4);
      assertNotSame(defaultWindDataset7, defaultWindDataset2);
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset5));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset0.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset6));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset4));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset1));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset3));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset2));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset0));
      assertTrue(defaultWindDataset7.equals((Object)defaultWindDataset5));
      
      objectArray9[3] = (Object) defaultWindDataset7;
      objectArray9[4] = (Object) defaultWindDataset1;
      objectArray9[5] = (Object) defaultWindDataset3;
      objectArray0[8] = objectArray9;
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(defaultWindDataset0.getNotify());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        defaultWindDataset0.getSeriesKey(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: 2
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[][] objectArray0 = new Object[7][1];
      Object[] objectArray1 = new Object[5];
      String[] stringArray0 = new String[9];
      String string0 = "group";
      stringArray0[0] = "group";
      String string1 = "";
      stringArray0[1] = "";
      stringArray0[2] = "14H.Hiz?h0)*%[";
      String string2 = "%AV00-g.~L$";
      stringArray0[3] = "%AV00-g.~L$";
      String string3 = "Xk,r'4J";
      stringArray0[4] = "Xk,r'4J";
      stringArray0[5] = "CPx";
      String string4 = ";D=wQ";
      stringArray0[6] = ";D=wQ";
      stringArray0[7] = "DomainOrder.NONE";
      stringArray0[8] = "JokO[GM(f.TI.Gxl5";
      Object[][][] objectArray2 = new Object[9][6][9];
      objectArray2[0] = objectArray0;
      objectArray2[1] = objectArray0;
      Object[][] objectArray3 = new Object[3][0];
      assertFalse(objectArray3.equals((Object)objectArray0));
      
      Object[] objectArray4 = new Object[3];
      assertFalse(objectArray4.equals((Object)objectArray1));
      
      objectArray4[0] = (Object) "";
      objectArray4[1] = (Object) ";D=wQ";
      objectArray4[2] = (Object) "JokO[GM(f.TI.Gxl5";
      objectArray3[0] = objectArray4;
      objectArray3[1] = (Object[]) stringArray0;
      objectArray3[2] = objectArray1;
      objectArray2[2] = objectArray3;
      objectArray2[3] = objectArray0;
      Object[][] objectArray5 = new Object[2][7];
      assertFalse(objectArray5.equals((Object)objectArray0));
      assertFalse(objectArray5.equals((Object)objectArray3));
      
      objectArray5[0] = (Object[]) stringArray0;
      objectArray5[1] = (Object[]) stringArray0;
      objectArray2[4] = objectArray5;
      Object[][] objectArray6 = new Object[5][1];
      assertFalse(objectArray6.equals((Object)objectArray5));
      assertFalse(objectArray6.equals((Object)objectArray0));
      assertFalse(objectArray6.equals((Object)objectArray3));
      
      objectArray6[0] = (Object[]) stringArray0;
      objectArray6[1] = (Object[]) stringArray0;
      objectArray6[2] = (Object[]) stringArray0;
      objectArray6[3] = objectArray4;
      objectArray6[4] = objectArray4;
      objectArray2[5] = objectArray6;
      objectArray2[6] = objectArray0;
      Object[][] objectArray7 = new Object[6][4];
      assertFalse(objectArray7.equals((Object)objectArray0));
      assertFalse(objectArray7.equals((Object)objectArray5));
      assertFalse(objectArray7.equals((Object)objectArray6));
      assertFalse(objectArray7.equals((Object)objectArray3));
      
      objectArray7[0] = objectArray4;
      objectArray7[1] = objectArray1;
      objectArray7[2] = (Object[]) stringArray0;
      objectArray7[3] = objectArray1;
      objectArray7[4] = objectArray4;
      objectArray7[5] = objectArray1;
      objectArray2[7] = objectArray7;
      objectArray2[8] = objectArray0;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"@.w%>(U[w4 Z@";
      stringArray0[1] = "{4.uCC";
      stringArray0[2] = "^%<`Q2!MEh'V5";
      stringArray0[3] = "";
      stringArray0[4] = "org.jfree.data.xy.AbstractXYDataset";
      stringArray0[5] = "";
      Object[][][] objectArray0 = new Object[2][6][7];
      Object[][] objectArray1 = new Object[1][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray0[1] = objectArray1;
      Object[][] objectArray2 = new Object[7][0];
      Object[] objectArray3 = new Object[3];
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }
}
