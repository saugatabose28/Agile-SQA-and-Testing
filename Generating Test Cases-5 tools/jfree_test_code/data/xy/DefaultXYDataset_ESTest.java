/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:07:00 GMT 2023
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DomainOrder;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.xy.DefaultXYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultXYDataset_ESTest extends DefaultXYDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1932.03271952058;
      doubleArray1[1] = 4131.146716490654;
      doubleArray1[2] = (-2154.4386759197);
      doubleArray1[3] = (-3208.034594106);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 966.634457819;
      doubleArray1[7] = 312.8013618635;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 312.8013618635;
      doubleArray2[1] = 966.634457819;
      doubleArray2[2] = (-2154.4386759197);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3208.034594106);
      doubleArray2[5] = 4131.146716490654;
      doubleArray2[6] = (-2154.4386759197);
      doubleArray2[7] = 1932.03271952058;
      doubleArray0[1] = doubleArray2;
      defaultXYDataset0.addSeries(comparable2, doubleArray0);
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      defaultXYDataset0.removeSeries(comparable1);
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      defaultXYDataset0.hashCode();
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      boolean boolean0 = defaultXYDataset0.hasListener(defaultXYDataset1);
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertFalse(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset1.getItemCount(1302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.equals(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-384.52);
      doubleArray2[1] = 3942.0631711166;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-826.408);
      doubleArray2[4] = (-2138.625513);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain two arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      defaultXYDataset0.validateObject();
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.addChangeListener(datasetChangeListener1);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      defaultXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      double[][] doubleArrayArray0 = null;
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.hasListener(defaultXYDataset1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      Comparable<DefaultXYDataset> comparable1 = (Comparable<DefaultXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener2 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset1.addChangeListener(datasetChangeListener2);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries(comparable1, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' is null.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getXValue(1, (-2047));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 2.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      int int0 = (-2207);
      // Undeclared exception!
      try { 
        defaultXYDataset0.getXValue((-2207), (-2207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYDataset0.indexOf(comparable0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getY((-1), 4137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getYValue((-1695), (-1463));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.hasListener(defaultXYDataset1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      DatasetGroup datasetGroup0 = defaultXYDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      defaultXYDataset0.setGroup(datasetGroup0);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      DefaultXYDataset defaultXYDataset2 = (DefaultXYDataset)defaultXYDataset0.clone();
      assertNotNull(defaultXYDataset2);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset2.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset2.equals((Object)defaultXYDataset0));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset2.getSeriesCount());
      assertTrue(defaultXYDataset2.getNotify());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset0, defaultXYDataset2);
      assertNotSame(defaultXYDataset2, defaultXYDataset0);
      assertNotSame(defaultXYDataset2, defaultXYDataset1);
      
      DomainOrder domainOrder0 = defaultXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset2));
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset0, defaultXYDataset2);
      
      defaultXYDataset1.hashCode();
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset2));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotSame(defaultXYDataset1, defaultXYDataset2);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset1.getX(0, 813);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.setNotify(false);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(defaultXYDataset0.getNotify());
      
      defaultXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(defaultXYDataset0.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.removeSeries(comparable0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(defaultXYDataset0.getNotify());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYDataset0.indexOf(comparable1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(defaultXYDataset0.getNotify());
      assertEquals((-1), int0);
      
      int int1 = (-3489);
      int int2 = 640;
      // Undeclared exception!
      try { 
        defaultXYDataset0.getX((-3489), 640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1317.76239897);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3.0;
      doubleArray1[3] = 11.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 11.0;
      doubleArray2[1] = 3.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must contain two arrays with equal length.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.removeChangeListener(datasetChangeListener1);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      defaultXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      int int0 = defaultXYDataset0.indexOf((Comparable) null);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.hasListener(defaultXYDataset1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      int int1 = defaultXYDataset0.hashCode();
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertFalse(int1 == int0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      defaultXYDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getYValue((-3714), (-3714));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYDataset0.indexOf(comparable0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset1 = (DefaultXYDataset)defaultXYDataset0.clone();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getSeriesKey((-435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      
      Comparable<Integer> comparable0 = null;
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries((Comparable) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'seriesKey' cannot be null.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.equals(defaultXYDataset1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertTrue(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYDataset1.indexOf(comparable0);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertEquals((-1), int0);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      boolean boolean1 = defaultXYDataset1.hasListener(defaultXYDataset0);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertFalse(boolean1);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      Comparable<DefaultXYDataset> comparable1 = (Comparable<DefaultXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int1 = defaultXYDataset1.indexOf(comparable1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(int1 == int0);
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertEquals((-1), int1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset1.getSeriesKey(3539);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.equals((Object) null);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-464.7820023);
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-464.7820023);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-464.7820023);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-311.2895924952);
      doubleArray5[5] = (-464.7820023);
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 2.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYDataset0.indexOf(comparable0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.addChangeListener(datasetChangeListener0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getSeriesKey(1526);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getItemCount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getSeriesKey(587);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      int int0 = defaultXYDataset0.getSeriesCount();
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.hasListener(defaultXYDataset1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertFalse(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      int int0 = 4459;
      defaultXYDataset1.validateObject();
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      DefaultXYDataset defaultXYDataset2 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset2);
      assertTrue(defaultXYDataset2.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset2.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset2.getNotify());
      assertEquals(0, defaultXYDataset2.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYDataset1.getItemCount(4459);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.removeSeries(comparable0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultXYDataset0.getYValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1932.03271952058;
      doubleArray1[1] = 4131.146716490654;
      doubleArray1[2] = (-2154.4386759197);
      doubleArray1[3] = (-3208.034594106);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 966.634457819;
      doubleArray1[7] = 312.8013618635;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 312.8013618635;
      doubleArray2[1] = 966.634457819;
      doubleArray2[2] = (-2154.4386759197);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1932.03271952058;
      doubleArray2[5] = 4131.146716490654;
      doubleArray2[6] = (-2154.4386759197);
      doubleArray2[7] = 1932.03271952058;
      doubleArray0[1] = doubleArray2;
      defaultXYDataset0.addSeries(comparable2, doubleArray0);
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      defaultXYDataset0.removeSeries(comparable1);
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      int int0 = defaultXYDataset1.indexOf(comparable0);
      assertFalse(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals((-1), int0);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      boolean boolean0 = defaultXYDataset0.getNotify();
      assertFalse(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(1, defaultXYDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      // Undeclared exception!
      try { 
        defaultXYDataset1.getItemCount(1289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Comparable<DefaultXYDataset> comparable0 = (Comparable<DefaultXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = defaultXYDataset0.indexOf(comparable0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset1 = (DefaultXYDataset)defaultXYDataset0.clone();
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      SeriesChangeEvent seriesChangeEvent1 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.addChangeListener(datasetChangeListener1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      defaultXYDataset0.seriesChanged(seriesChangeEvent1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      int int1 = defaultXYDataset1.indexOf((Comparable) null);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(int1 == int0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertEquals((-1), int1);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      defaultXYDataset0.validateObject();
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      int int2 = defaultXYDataset0.hashCode();
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      DomainOrder domainOrder0 = defaultXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      DefaultXYDataset defaultXYDataset2 = (DefaultXYDataset)defaultXYDataset0.clone();
      assertNotNull(defaultXYDataset2);
      assertTrue(defaultXYDataset2.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset2.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset2.getNotify());
      assertEquals(0, defaultXYDataset2.getSeriesCount());
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotSame(defaultXYDataset2, defaultXYDataset1);
      assertNotSame(defaultXYDataset2, defaultXYDataset0);
      assertNotSame(defaultXYDataset0, defaultXYDataset2);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYDataset1.removeSeries(comparable1);
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset1));
      assertTrue(defaultXYDataset0.equals((Object)defaultXYDataset2));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset2));
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertTrue(defaultXYDataset0.getNotify());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(defaultXYDataset1.getNotify());
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotSame(defaultXYDataset0, defaultXYDataset2);
      assertNotSame(defaultXYDataset0, defaultXYDataset1);
      assertNotSame(defaultXYDataset1, defaultXYDataset2);
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultXYDataset0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1932.03271952058;
      doubleArray1[1] = 4131.146716490654;
      doubleArray1[2] = (-2154.4386759197);
      doubleArray1[3] = (-3208.034594106);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 966.634457819;
      doubleArray1[7] = 312.8013618635;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 312.8013618635;
      doubleArray2[1] = 966.634457819;
      doubleArray2[2] = (-2154.4386759197);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3208.034594106);
      doubleArray2[5] = 4131.146716490654;
      doubleArray2[6] = (-2154.4386759197);
      doubleArray2[7] = 1932.03271952058;
      doubleArray0[1] = doubleArray2;
      defaultXYDataset0.addSeries(comparable2, doubleArray0);
      defaultXYDataset0.removeSeries(comparable1);
      defaultXYDataset1.indexOf(comparable0);
      defaultXYDataset0.hasListener(defaultXYDataset1);
      // Undeclared exception!
      try { 
        defaultXYDataset1.getItemCount(1302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      SeriesChangeEvent seriesChangeEvent0 = mock(SeriesChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.seriesChanged(seriesChangeEvent0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultXYDataset0.removeSeries(comparable0);
      // Undeclared exception!
      try { 
        defaultXYDataset0.getItemCount(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DatasetGroup datasetGroup0 = defaultXYDataset0.getGroup();
      defaultXYDataset0.setGroup(datasetGroup0);
      defaultXYDataset0.indexOf(comparable0);
      defaultXYDataset0.getDomainOrder();
      defaultXYDataset0.hashCode();
      int int0 = 6;
      int int1 = 6;
      // Undeclared exception!
      try { 
        defaultXYDataset0.getY(6, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2192.818601;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3343.3532442;
      doubleArray1[4] = (-2883.7137624);
      doubleArray1[5] = 1434.795577063906;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2192.818601;
      doubleArray2[1] = 3343.3532442;
      doubleArray2[2] = 1078.0;
      doubleArray2[3] = 3343.3532442;
      doubleArray2[4] = 2192.818601;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2883.7137624);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries(comparable0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 2.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
      try { 
        defaultXYDataset0.getX((-5205), 2194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
