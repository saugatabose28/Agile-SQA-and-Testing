/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:38:57 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.TestIntervalCategoryDataset;
import org.jfree.data.general.WaferMapDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDataset_ESTest extends AbstractDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset0.notifyListeners(datasetChangeEvent0);
      assertTrue(defaultKeyedValueDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.fireDatasetChanged();
      assertTrue(defaultKeyedValuesDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetGroup datasetGroup0 = defaultKeyedValueDataset0.getGroup();
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      defaultPieDataset0.setGroup(datasetGroup0);
      assertTrue(defaultPieDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      // Undeclared exception!
      try { 
        defaultPieDataset0.setGroup((DatasetGroup) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'group' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1025, 5);
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertTrue(waferMapDataset1.getNotify());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(11, 3, 3, 11, (-3373.0), 11);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultHeatMapDataset0.addChangeListener(datasetChangeListener0);
      defaultHeatMapDataset0.setZValue(0, 0, (double) 0);
      assertTrue(defaultHeatMapDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.setNotify(false);
      defaultPieDataset0.insertValue(0, "id", (Number) (-1));
      assertFalse(defaultPieDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultKeyedValueDataset0.hasListener(eventListener0);
      assertFalse(boolean0);
      assertTrue(defaultKeyedValueDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestIntervalCategoryDataset testIntervalCategoryDataset0 = new TestIntervalCategoryDataset();
      testIntervalCategoryDataset0.setNotify(true);
      assertTrue(testIntervalCategoryDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      boolean boolean0 = defaultKeyedValues2DDataset0.getNotify();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(defaultKeyedValueDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      defaultPieDataset0.validateObject();
      assertTrue(defaultPieDataset0.getNotify());
  }
}
