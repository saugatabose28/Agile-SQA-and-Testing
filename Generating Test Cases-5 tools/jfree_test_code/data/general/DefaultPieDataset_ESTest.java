/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:45:52 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultPieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultPieDataset_ESTest extends DefaultPieDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(boolean0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultPieDataset1.insertValue(0, integer0, (Number) integer0);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      defaultPieDataset1.notifyListeners((DatasetChangeEvent) null);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.addChangeListener(datasetChangeListener0);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      defaultPieDataset0.setValue("BBwe,D7^B}7o", (Number) integer0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      Integer integer1 = defaultPieDataset1.getKey(0);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Number number0 = defaultPieDataset0.getValue(0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertNotNull(number0);
      assertEquals(0, number0);
      
      defaultPieDataset0.hashCode();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.clear();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)number0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      defaultPieDataset1.setValue(integer2, 0.0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)number0));
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      defaultPieDataset0.setValue("", (Number) integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)number0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      String string0 = "UNv=9+(U. `g8/";
      defaultPieDataset0.setValue("UNv=9+(U. `g8/", 0.0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      int int0 = 6;
      Integer integer0 = new Integer(6);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      boolean boolean0 = defaultPieDataset0.equals(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(boolean0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.notifyListeners(datasetChangeEvent0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.sortByKeys((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.notifyListeners(datasetChangeEvent0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Integer integer0 = new Integer(1766);
      assertNotNull(integer0);
      assertEquals(1766, (int)integer0);
      
      boolean boolean0 = defaultPieDataset0.equals(integer0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertSame(sortOrder1, sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      List<Integer> list0 = defaultPieDataset0.getKeys();
      assertFalse(list0.contains(1766));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultPieDataset0.notifyListeners((DatasetChangeEvent) null);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.sortByValues(sortOrder0);
      assertSame(sortOrder0, sortOrder1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      SortOrder sortOrder2 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByValues(sortOrder2);
      assertFalse(sortOrder2.equals((Object)sortOrder0));
      assertFalse(sortOrder2.equals((Object)sortOrder1));
      assertNotSame(sortOrder2, sortOrder0);
      assertNotSame(sortOrder2, sortOrder1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      int int0 = defaultPieDataset1.getItemCount();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, int0);
      
      SortOrder sortOrder3 = SortOrder.ASCENDING;
      defaultPieDataset1.sortByValues(sortOrder3);
      assertFalse(sortOrder3.equals((Object)sortOrder2));
      assertNotSame(sortOrder3, sortOrder2);
      assertSame(sortOrder3, sortOrder0);
      assertSame(sortOrder3, sortOrder1);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      defaultPieDataset1.setValue("~Vs.Nx9r>IW", 0.0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      
      DefaultPieDataset<Integer> defaultPieDataset2 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertNotNull(defaultPieDataset2);
      
      defaultPieDataset2.fireDatasetChanged();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      
      boolean boolean1 = defaultPieDataset1.equals(defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertFalse(boolean1);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.getValue((-368));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      DefaultPieDataset<Integer> defaultPieDataset2 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertNotNull(defaultPieDataset2);
      
      Integer integer0 = new Integer((-860));
      assertNotNull(integer0);
      assertEquals((-860), (int)integer0);
      
      defaultPieDataset2.setValue(integer0, (Number) integer0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(1, defaultPieDataset2.getItemCount());
      
      int int0 = defaultPieDataset2.getItemCount();
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset2.insertValue(1, integer0, (double) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      Number number0 = defaultPieDataset1.getValue(11);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNull(number0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultPieDataset0.setValue(integer0, (Number) integer0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      Number number1 = defaultPieDataset0.getValue(integer0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(number1);
      assertEquals(0, number1);
      
      DefaultPieDataset<String> defaultPieDataset2 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertNotNull(defaultPieDataset2);
      
      int int0 = defaultPieDataset2.getIndex("group");
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertEquals((-1), int0);
      
      boolean boolean0 = defaultPieDataset2.equals(defaultPieDataset0);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertFalse(boolean0);
      
      defaultPieDataset2.insertValue(0, "oz&P3btY!'Fz\"/tkTk#", (double) 0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(1, defaultPieDataset2.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset2.sortByKeys(sortOrder0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(1, defaultPieDataset2.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      int int0 = 3280;
      Integer integer0 = new Integer(3280);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3280, (int)integer0);
      
      defaultPieDataset1.setValue(integer0, 1.0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      Integer integer1 = new Integer(3280);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3280, (int)integer1);
      
      Number number0 = defaultPieDataset1.getValue(integer1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      DefaultPieDataset<String> defaultPieDataset2 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertNotNull(defaultPieDataset2);
      
      defaultPieDataset2.clear();
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      
      DefaultPieDataset defaultPieDataset3 = (DefaultPieDataset)defaultPieDataset2.clone();
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(defaultPieDataset3.getNotify());
      assertEquals(0, defaultPieDataset3.getItemCount());
      assertNotNull(defaultPieDataset3);
      
      List<String> list0 = defaultPieDataset2.getKeys();
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Number number1 = defaultPieDataset2.getValue(3280);
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertNull(number1);
      
      Integer integer2 = new Integer(5);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(5, (int)integer2);
      
      defaultPieDataset0.setValue(integer2, 234.2);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultPieDataset2.getKey((-4458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      Number number0 = defaultPieDataset1.getValue(11);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNull(number0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultPieDataset0.setValue(integer0, (Number) integer0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset<String> defaultPieDataset2 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertNotNull(defaultPieDataset2);
      
      int int0 = defaultPieDataset2.getIndex("group");
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertEquals((-1), int0);
      
      boolean boolean0 = defaultPieDataset2.equals(defaultPieDataset0);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertFalse(boolean0);
      
      defaultPieDataset2.insertValue(0, "oz&P3btY!'Fz\"/tkTk#", (double) 0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(1, defaultPieDataset2.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset2.sortByKeys(sortOrder0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(1, defaultPieDataset2.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer((-1184));
      assertNotNull(integer0);
      assertEquals((-1184), (int)integer0);
      
      defaultPieDataset0.setValue("y58?$y`Ed5l$PW!Nvh", (Number) integer0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      Number number0 = defaultPieDataset0.getValue(0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertNotNull(number0);
      assertEquals((-1184), number0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      DefaultPieDataset<Integer> defaultPieDataset2 = null;
      try {
        defaultPieDataset2 = new DefaultPieDataset<Integer>(defaultPieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer(1182);
      assertNotNull(integer0);
      assertEquals(1182, (int)integer0);
      
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.setValue(integer0, 847.00289);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      List<Integer> list0 = defaultPieDataset0.getKeys();
      assertTrue(list0.contains(integer0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      defaultPieDataset1.insertValue(0, "", (Number) integer0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      
      defaultPieDataset1.insertValue(0, "", 0.0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      
      defaultPieDataset1.setValue("4snH+wP", 847.00289);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(2, defaultPieDataset1.getItemCount());
      
      defaultPieDataset1.setValue("4snH+wP", 0.0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(2, defaultPieDataset1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, "kHHy7llAkvL<QuQ$E((", Double.POSITIVE_INFINITY);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      Number number0 = defaultPieDataset0.getValue("kHHy7llAkvL<QuQ$E((");
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      Number number1 = defaultPieDataset0.getValue(0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(number1);
      assertEquals(Double.POSITIVE_INFINITY, number1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      String string0 = "org.jfree.data.general.DefaultPieDataset";
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      defaultPieDataset0.setValue("org.jfree.data.general.DefaultPieDataset", (Number) integer0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      int int0 = 0;
      String string1 = defaultPieDataset0.getKey(0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(string1);
      assertEquals("org.jfree.data.general.DefaultPieDataset", string1);
      
      Integer integer1 = (Integer)defaultPieDataset0.getValue(0);
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      DefaultPieDataset<Integer> defaultPieDataset2 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertNotNull(defaultPieDataset2);
      
      Integer integer2 = new Integer(10);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(10, (int)integer2);
      
      // Undeclared exception!
      try { 
        defaultPieDataset2.getValue(integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 10
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.validateObject();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.validateObject();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getIndex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultPieDataset0.hasListener(eventListener0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
      
      boolean boolean1 = defaultPieDataset0.equals(defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByValues(sortOrder1);
      assertSame(sortOrder1, sortOrder0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.setValue((String) null, 2031.966542884959);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer((-627));
      assertNotNull(integer0);
      assertEquals((-627), (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.setValue((String) null, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = defaultPieDataset0.equals(integer0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(boolean0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      int int0 = defaultPieDataset1.getItemCount();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, int0);
      
      int int1 = defaultPieDataset0.getIndex("org.jfree.data.general.DefaultPieDataset");
      assertFalse(int1 == int0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      SortOrder sortOrder1 = SortOrder.DESCENDING;
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.sortByValues(sortOrder1);
      assertSame(sortOrder1, sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertSame(sortOrder1, sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertNotNull(defaultPieDataset2);
      
      defaultPieDataset0.setValue("", 0.0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.setValue("", 0.0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset defaultPieDataset3 = (DefaultPieDataset)defaultPieDataset0.clone();
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset2));
      assertNotSame(defaultPieDataset3, defaultPieDataset1);
      assertNotSame(defaultPieDataset3, defaultPieDataset2);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset3.getItemCount());
      assertTrue(defaultPieDataset3.getNotify());
      assertNotNull(defaultPieDataset3);
      
      Number number0 = defaultPieDataset0.getValue(77);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNull(number0);
      
      defaultPieDataset0.remove("");
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.hashCode();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      int int0 = defaultPieDataset0.getIndex("5B(u8qOp,q|e9}");
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals((-1), int0);
      
      DefaultPieDataset<Integer> defaultPieDataset4 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset4.getItemCount());
      assertTrue(defaultPieDataset4.getNotify());
      assertNotNull(defaultPieDataset4);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset4.getValue(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: -1
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset1.sortByValues(sortOrder0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      List<Integer> list0 = defaultPieDataset1.getKeys();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getKey((-1036));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = 0;
      Number number0 = defaultPieDataset0.getValue(0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNull(number0);
      
      String string0 = "";
      defaultPieDataset0.setValue("", (Number) null);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      String string1 = "";
      int int1 = defaultPieDataset0.getIndex("");
      assertTrue(int1 == int0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0, int1);
      
      DatasetGroup datasetGroup0 = defaultPieDataset0.getGroup();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultPieDataset0.setGroup(datasetGroup0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      int int2 = (-5366);
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue((-5366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int0 = defaultPieDataset0.getIndex(integer0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals((-1), int0);
      
      boolean boolean0 = defaultPieDataset0.equals(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Number number0 = defaultPieDataset0.getValue(0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = defaultPieDataset0.getGroup();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultPieDataset0.setGroup(datasetGroup0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.removeChangeListener(datasetChangeListener0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.fireDatasetChanged();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      String string0 = "";
      int int0 = defaultPieDataset0.getIndex("");
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals((-1), int0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        defaultPieDataset0.remove("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key () is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        defaultPieDataset0.getKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.validateObject();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      String string0 = "";
      defaultPieDataset0.setValue("", (-1.0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      Number number0 = defaultPieDataset0.getValue("");
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(number0);
      assertEquals((-1.0), number0);
      
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      int int0 = defaultPieDataset0.getItemCount();
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, int0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.notifyListeners(datasetChangeEvent0);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      defaultPieDataset1.setNotify(false);
      assertFalse(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.insertValue(1, integer0, (-2.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer(732);
      assertNotNull(integer0);
      assertEquals(732, (int)integer0);
      
      defaultPieDataset0.setValue(integer0, (double) 732);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int0 = defaultPieDataset0.getIndex("0$a#o!)Nc/0<r-fq=r");
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)defaultPieDataset1.clone();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertNotNull(defaultPieDataset2);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset2);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      defaultPieDataset0.insertValue(0, "", (Number) integer0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset<String> defaultPieDataset1 = null;
      try {
        defaultPieDataset1 = new DefaultPieDataset<String>(defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      List<String> list0 = defaultPieDataset0.getKeys();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.removeChangeListener(datasetChangeListener0);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DatasetGroup datasetGroup0 = defaultPieDataset0.getGroup();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultPieDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.getValue(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      List<String> list0 = defaultPieDataset0.getKeys();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Integer integer0 = new Integer((-1519));
      assertNotNull(integer0);
      assertEquals((-1519), (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.insertValue((-1335), "", (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = null;
      try {
        defaultPieDataset1 = new DefaultPieDataset<Integer>(defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.getValue("w[i`3ZTE^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: w[i`3ZTE^
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.insertValue(0, ";h+2Jznv}.daE", (double) 0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<String> defaultPieDataset1 = null;
      try {
        defaultPieDataset1 = new DefaultPieDataset<String>(defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      Integer integer0 = new Integer((-140));
      assertNotNull(integer0);
      assertEquals((-140), (int)integer0);
      
      // Undeclared exception!
      try { 
        defaultPieDataset0.insertValue((-2156), integer0, (Number) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      Number number0 = defaultPieDataset1.getValue(11);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNull(number0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultPieDataset0.setValue(integer0, (Number) integer0);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset<String> defaultPieDataset2 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertNotNull(defaultPieDataset2);
      
      int int0 = defaultPieDataset2.getIndex("group");
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertEquals((-1), int0);
      
      boolean boolean0 = defaultPieDataset2.equals(defaultPieDataset0);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertFalse(boolean0);
      
      defaultPieDataset2.insertValue(0, "oz&P3btY!'Fz\"/tkTk#", (double) 0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      
      int int1 = defaultPieDataset1.getItemCount();
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertFalse(int1 == int0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, int1);
      
      defaultPieDataset2.clear();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset0.getNotify());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      String string0 = "UNv=9+(U. `g8/";
      defaultPieDataset0.setValue("UNv=9+(U. `g8/", 0.0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      int int0 = 6;
      Integer integer0 = new Integer(6);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      boolean boolean0 = defaultPieDataset0.equals(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertFalse(boolean0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      assertNotNull(defaultPieDataset1);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.notifyListeners(datasetChangeEvent0);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset1.sortByKeys(sortOrder0);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.getNotify());
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.remove(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (6) is not recognised.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      SortOrder sortOrder1 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder1);
      assertSame(sortOrder1, sortOrder0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      List<Integer> list0 = defaultPieDataset0.getKeys();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      defaultPieDataset0.notifyListeners((DatasetChangeEvent) null);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      defaultPieDataset0.sortByValues(sortOrder0);
      assertSame(sortOrder0, sortOrder1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      SortOrder sortOrder2 = SortOrder.DESCENDING;
      defaultPieDataset0.sortByValues(sortOrder2);
      assertFalse(sortOrder2.equals((Object)sortOrder0));
      assertFalse(sortOrder2.equals((Object)sortOrder1));
      assertNotSame(sortOrder2, sortOrder0);
      assertNotSame(sortOrder2, sortOrder1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      int int0 = defaultPieDataset1.getItemCount();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, int0);
      
      SortOrder sortOrder3 = SortOrder.ASCENDING;
      defaultPieDataset1.sortByValues(sortOrder3);
      assertFalse(sortOrder3.equals((Object)sortOrder2));
      assertSame(sortOrder3, sortOrder0);
      assertSame(sortOrder3, sortOrder1);
      assertNotSame(sortOrder3, sortOrder2);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      DefaultPieDataset<Integer> defaultPieDataset2 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertNotNull(defaultPieDataset2);
      
      defaultPieDataset2.fireDatasetChanged();
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      
      boolean boolean0 = defaultPieDataset1.equals(defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultPieDataset2.getItemCount());
      assertTrue(defaultPieDataset2.getNotify());
      assertTrue(boolean0);
      
      int int1 = defaultPieDataset1.hashCode();
      assertFalse(int1 == int0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.getValue((-368));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = defaultPieDataset0.equals(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      assertTrue(boolean0);
      
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotNull(defaultPieDataset1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultPieDataset1.insertValue(0, integer0, (Number) integer0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      
      defaultPieDataset1.notifyListeners((DatasetChangeEvent) null);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.addChangeListener(datasetChangeListener0);
      assertTrue(defaultPieDataset1.getNotify());
      assertEquals(1, defaultPieDataset1.getItemCount());
      
      int int0 = (-326);
      defaultPieDataset0.setValue("BBwe,D7^B}7o", (Number) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertTrue(defaultPieDataset0.getNotify());
      
      // Undeclared exception!
      try { 
        defaultPieDataset1.getKey((-326));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultPieDataset<String> defaultPieDataset0 = new DefaultPieDataset<String>();
      DefaultPieDataset<String> defaultPieDataset1 = new DefaultPieDataset<String>();
      Object object0 = defaultPieDataset1.clone();
      defaultPieDataset0.equals(object0);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultPieDataset0.addChangeListener(datasetChangeListener0);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      defaultPieDataset1.hasListener(eventListener0);
      int int0 = 1777;
      Integer integer0 = new Integer(1777);
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      defaultPieDataset0.setNotify(false);
      defaultPieDataset0.clear();
      defaultPieDataset0.getItemCount();
      DefaultPieDataset<Integer> defaultPieDataset2 = new DefaultPieDataset<Integer>();
      defaultPieDataset2.fireDatasetChanged();
      defaultPieDataset2.getItemCount();
      defaultPieDataset2.getKeys();
      defaultPieDataset2.setNotify(true);
      Integer integer1 = new Integer(504);
      // Undeclared exception!
      try { 
        defaultPieDataset2.getValue(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 504
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultPieDataset<Integer> defaultPieDataset0 = new DefaultPieDataset<Integer>();
      defaultPieDataset0.clear();
      DefaultPieDataset<Integer> defaultPieDataset1 = new DefaultPieDataset<Integer>();
      DefaultPieDataset<Integer> defaultPieDataset2 = null;
      try {
        defaultPieDataset2 = new DefaultPieDataset<Integer>(defaultPieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }
}
