/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:31:21 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.WaferMapDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WaferMapDataset_ESTest extends WaferMapDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1325);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue(1325, 2852, (-891));
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue(708, 1325, 708);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number0 = waferMapDataset0.getChipValue(comparable0, comparable0);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number0);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.removeChangeListener(datasetChangeListener1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Set set1 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.equals((Object)set0));
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Number number1 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325.0, number1);
      assertNotNull(number1);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, int0);
      
      Set set2 = waferMapDataset0.getUniqueValues();
      assertFalse(set2.isEmpty());
      assertEquals(2, set2.size());
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number2 = waferMapDataset0.getChipValue(comparable1, comparable1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number2);
      
      Number number3 = waferMapDataset0.getMinValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(708.0, number3);
      assertNotNull(number3);
      assertFalse(number3.equals((Object)number1));
      
      Number number4 = waferMapDataset0.getChipValue(2852, (-891));
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325, number4);
      assertNotNull(number4);
      assertFalse(number4.equals((Object)int0));
      
      waferMapDataset0.validateObject();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      Number number5 = waferMapDataset0.getMinValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(708.0, number5);
      assertNotNull(number5);
      assertFalse(number5.equals((Object)number1));
      
      Number number6 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325.0, number6);
      assertNotNull(number6);
      assertFalse(number6.equals((Object)number3));
      assertFalse(number6.equals((Object)number5));
      
      Set set3 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set3.isEmpty());
      assertEquals(2, set3.size());
      assertNotSame(set3, set2);
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotNull(set3);
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      
      Set set4 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, set4.size());
      assertFalse(set4.isEmpty());
      assertNotSame(set4, set2);
      assertNotSame(set4, set1);
      assertNotSame(set4, set3);
      assertNotSame(set4, set0);
      assertNotNull(set4);
      assertTrue(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set0));
      
      Number number7 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325.0, number7);
      assertNotNull(number7);
      assertFalse(number7.equals((Object)number3));
      assertFalse(number7.equals((Object)number5));
      
      Set set5 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set5.isEmpty());
      assertEquals(2, set5.size());
      assertNotSame(set5, set0);
      assertNotSame(set5, set3);
      assertNotSame(set5, set4);
      assertNotSame(set5, set1);
      assertNotSame(set5, set2);
      assertNotNull(set5);
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set1));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1421;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1421, 1421);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(1421, 1421, (-2109));
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.setMaxChipY(1421);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.validateObject();
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1421.0, number0);
      assertNotNull(number0);
      
      int int1 = waferMapDataset0.getMaxChipY();
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1421, int1);
      assertTrue(int1 == int0);
      
      waferMapDataset0.setMaxChipY((-2109));
      assertEquals((-2109), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.setMaxChipY(988);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertEquals(988, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number1 = waferMapDataset0.getChipValue((Comparable) 1421, (Comparable) comparable0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertEquals(988, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number1);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2004, (-1195));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals((-1195), waferMapDataset1.getMaxChipY());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset1.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset0.setChipSpace(2004);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Double double0 = (Double)waferMapDataset0.getMaxValue();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      WaferMapDataset waferMapDataset2 = (WaferMapDataset)waferMapDataset0.clone();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(2004.0, waferMapDataset2.getChipSpace(), 0.01);
      assertEquals((-1195), waferMapDataset2.getMaxChipY());
      assertEquals(2004, waferMapDataset2.getMaxChipX());
      assertTrue(waferMapDataset2.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertNotSame(waferMapDataset2, waferMapDataset1);
      assertNotSame(waferMapDataset2, waferMapDataset0);
      assertNotNull(waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset2.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset2.equals((Object)waferMapDataset0));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(2004.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) double0, (Comparable) comparable0, (Comparable) comparable0);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable2 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) double0, (Comparable) comparable1, (Comparable) comparable2);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      waferMapDataset0.validateObject();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      waferMapDataset0.setNotify(false);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Double double2 = (Double)waferMapDataset0.getMinValue();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double2, 0.01);
      assertNotNull(double2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      waferMapDataset0.addValue(0, 2004, 2004);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Double double3 = (Double)waferMapDataset0.getMaxValue();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      waferMapDataset0.setChipSpace(0.0);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Double double4 = (Double)waferMapDataset0.getMinValue();
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double4, 0.01);
      assertNotNull(double4);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      
      double double5 = waferMapDataset0.getChipSpace();
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(0.0, double5, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals(double5, double1, 0.01);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.getUniqueValues();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1442, 1442);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1442, waferMapDataset0.getMaxChipY());
      assertEquals(1442, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getChipValue(2679, (-2127));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1442, waferMapDataset0.getMaxChipY());
      assertEquals(1442, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number0);
      
      waferMapDataset0.addValue(0, (-661), 1);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1442, waferMapDataset0.getMaxChipY());
      assertEquals(1442, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1442, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1442, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0.0, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      int int1 = 439;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(994, 994);
      assertEquals(994, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(994, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(994, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(994, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try { 
        waferMapDataset0.getChipValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 1);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(1, 1);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapDataset1.notifyListeners(datasetChangeEvent0);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double0 = waferMapDataset1.getChipSpace();
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      boolean boolean0 = waferMapDataset0.isMinValue(1.0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertTrue(boolean0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(0, int0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean1 = waferMapDataset1.isMaxValue(1.0);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertTrue(boolean1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertTrue(boolean1 == boolean0);
      
      waferMapDataset0.setNotify(false);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset1.addValue(577, 2267, 1);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double2 = waferMapDataset1.getChipSpace();
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double2, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      boolean boolean2 = waferMapDataset1.isMaxValue(1.0);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(boolean2);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double double3 = waferMapDataset1.getChipSpace();
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double3, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setValue(1.0, comparable0, comparable0);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      double double4 = waferMapDataset0.getChipSpace();
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset1.setValue(1.0, comparable1, comparable1);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      Number number0 = waferMapDataset1.getMinValue();
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, number0);
      assertNotNull(number0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertTrue(number0.equals((Object)double1));
      assertTrue(number0.equals((Object)double0));
      assertTrue(number0.equals((Object)double2));
      assertTrue(number0.equals((Object)double3));
      assertTrue(number0.equals((Object)double4));
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset1.addValue(number0, comparable2, comparable2);
      assertEquals(1, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertTrue(number0.equals((Object)double1));
      assertTrue(number0.equals((Object)double0));
      assertTrue(number0.equals((Object)double2));
      assertTrue(number0.equals((Object)double3));
      assertTrue(number0.equals((Object)double4));
      
      // Undeclared exception!
      try { 
        waferMapDataset1.getUniqueValues();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1812, 1812);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addChangeListener(datasetChangeListener0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, double0, 0.01);
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue(1812, 1812, 1812);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.addValue((Number) 1.0, (Comparable) comparable0, (Comparable) comparable0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      waferMapDataset0.setMaxChipY(1812);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1812, waferMapDataset0.getMaxChipY());
      assertEquals(1812, waferMapDataset0.getMaxChipX());
      
      // Undeclared exception!
      try { 
        waferMapDataset0.getUniqueValueCount();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-948), (-948));
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.validateObject();
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.validateObject();
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setValue(1.0, (-948), comparable0);
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      boolean boolean0 = waferMapDataset0.isMaxValue(1.0);
      assertEquals((-948), waferMapDataset0.getMaxChipY());
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(boolean0);
      
      waferMapDataset0.setMaxChipY((-1038));
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1038), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue((-443), 0, 3849);
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1038), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Number number0 = waferMapDataset0.getChipValue(0, 3849);
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1038), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-443), number0);
      assertNotNull(number0);
      
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1038), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-443.0), number1);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)double1));
      
      waferMapDataset0.setChipSpace(Double.POSITIVE_INFINITY);
      assertEquals((-948), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1038), waferMapDataset0.getMaxChipY());
      assertEquals(Double.POSITIVE_INFINITY, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 3298;
      Number number0 = null;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(3298, 3298, (Number) null);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(3298, waferMapDataset0.getMaxChipY());
      assertEquals(3298, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-864), (-864));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-864), waferMapDataset0.getMaxChipY());
      assertEquals((-864), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-864), waferMapDataset0.getMaxChipY());
      assertEquals((-864), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-864), waferMapDataset0.getMaxChipY());
      assertEquals((-864), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-864), int0);
      
      waferMapDataset0.addValue(558, 706, (-864));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-864), waferMapDataset0.getMaxChipY());
      assertEquals((-864), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-864), waferMapDataset0.getMaxChipY());
      assertEquals((-864), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, double0, 0.01);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(558, 558, 1.0);
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(558, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(558, waferMapDataset1.getMaxChipY());
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset1.removeChangeListener(datasetChangeListener0);
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(558, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(558, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double1 = waferMapDataset1.getChipSpace();
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(558, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(558, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertEquals(double1, double0, 0.01);
      
      int int1 = waferMapDataset1.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(558, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(558, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(0, int1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = waferMapDataset0.isMaxValue(1.0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-864), waferMapDataset0.getMaxChipY());
      assertEquals((-864), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(boolean0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      double double2 = waferMapDataset1.getChipSpace();
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(558, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(558, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double2, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      waferMapDataset1.setMaxChipX(0);
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(558, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = waferMapDataset0.hasListener(eventListener0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(boolean0);
      
      waferMapDataset0.setChipSpace((-1));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.fireDatasetChanged();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      
      Number number0 = waferMapDataset0.getMinValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertNotNull(number0);
      
      boolean boolean1 = waferMapDataset0.isMaxValue(number0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number0 = waferMapDataset0.getChipValue(comparable0, comparable0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertNull(number0);
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = waferMapDataset0.hasListener(eventListener0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertFalse(boolean0);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1), int0);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      
      Set set1 = waferMapDataset0.getUniqueValues();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.equals((Object)set0));
      
      waferMapDataset0.addValue((-1), (-1), (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.validateObject();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      
      Number number1 = waferMapDataset0.getMaxValue();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), number1);
      assertNotNull(number1);
      
      waferMapDataset0.addValue((-1), (-1), (-1));
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.addValue((-1), (-3121), 0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      
      int int1 = waferMapDataset0.getMaxChipY();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Number number2 = waferMapDataset0.getMinValue();
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertEquals((-1.0), number2);
      assertNotNull(number2);
      assertTrue(number2.equals((Object)number1));
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setValue(number2, comparable1, comparable1);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(number2.equals((Object)number1));
      
      waferMapDataset0.setMaxChipY(2286);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(2286, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1421, 1421);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(1421, 1421, (-2109));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setMaxChipY(1421);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.validateObject();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertEquals(1421.0, number0);
      assertNotNull(number0);
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipY());
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertEquals(1421, int0);
      
      int int1 = 0;
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setMaxChipY(988);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertEquals(988, waferMapDataset0.getMaxChipY());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number1 = waferMapDataset0.getChipValue((Comparable) 0, (Comparable) comparable0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1421, waferMapDataset0.getMaxChipX());
      assertEquals(988, waferMapDataset0.getMaxChipY());
      assertNull(number1);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 1);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setValue(number0, comparable0, comparable0);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setMaxChipY(1);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue(number0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2, (-3519));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3519), waferMapDataset0.getMaxChipY());
      assertEquals(2, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.setMaxChipY((-3519));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3519), waferMapDataset0.getMaxChipY());
      assertEquals(2, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3519), waferMapDataset0.getMaxChipY());
      assertEquals(2, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3519), int0);
      
      waferMapDataset0.addValue((-6391), 1, 2);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-3519), waferMapDataset0.getMaxChipY());
      assertEquals(2, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.setMaxChipY(1);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.validateObject();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.validateObject();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double0, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      boolean boolean0 = waferMapDataset0.isMaxValue(1.0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertTrue(boolean0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean1 = waferMapDataset0.isMaxValue(1.0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertTrue(boolean1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertTrue(boolean1 == boolean0);
      
      waferMapDataset0.addValue(0, 0, 0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      int int0 = (-26);
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1, int1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(int1 == int0);
      
      waferMapDataset0.addValue(0, (-26), 0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Number number0 = null;
      waferMapDataset0.validateObject();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMaxValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1516), (-1516));
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals((-1516), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals((-1516), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals((-1516), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number0 = waferMapDataset0.getChipValue(comparable0, comparable0);
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals((-1516), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number0);
      
      waferMapDataset0.addValue(0, (-1516), (-1516));
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals((-1516), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.setMaxChipY(0);
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Set set1 = waferMapDataset0.getUniqueValues();
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.equals((Object)set0));
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals((-1516), waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setValue(1.0, comparable1, comparable1);
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      int int0 = 0;
      waferMapDataset0.addValue((-1), 0, (-1));
      assertEquals((-1516), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue((Number) null, 0, comparable2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(1803, 0, 1803);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, double0, 0.01);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(1803, 0, 1.0);
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertEquals(1803, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double1 = waferMapDataset1.getChipSpace();
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertEquals(1803, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertEquals(double1, double0, 0.01);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        waferMapDataset1.addValue((Number) 1.0, (Comparable) comparable0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(10, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2141, 2);
      assertEquals(2141, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(2141, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2, waferMapDataset0.getMaxChipY());
      assertEquals(0, int0);
      
      waferMapDataset0.addValue(2, 2, 2);
      assertEquals(2141, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2, waferMapDataset0.getMaxChipY());
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals(2141, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2, waferMapDataset0.getMaxChipY());
      assertEquals(2141, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2175), (-2175));
      assertEquals((-2175), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-2175), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, int0);
      
      waferMapDataset0.setMaxChipY(0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.validateObject();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.fireDatasetChanged();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      int int1 = waferMapDataset0.getMaxChipY();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      waferMapDataset0.setChipSpace(0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Number number0 = waferMapDataset0.getChipValue((-2175), 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2175), waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(0.0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1783, 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1783, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) null, (Comparable) 0, (Comparable) comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(160, 1);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(160, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(160, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset1.getMaxChipY());
      assertEquals(160, waferMapDataset1.getMaxChipX());
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset0.validateObject();
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(160, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(160, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(160, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotNull(set0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = waferMapDataset0.hasListener(eventListener0);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(160, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(boolean0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset0.setMaxChipX(0);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double0, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(1.0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1250, 1250, (Number) null);
      assertEquals(1250, waferMapDataset0.getMaxChipX());
      assertEquals(1250, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number0 = waferMapDataset0.getChipValue(comparable0, comparable0);
      assertEquals(1250, waferMapDataset0.getMaxChipX());
      assertEquals(1250, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMaxValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(665, 138);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.validateObject();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue(665, 3, 29);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(0, 138, 1.0);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(138, waferMapDataset1.getMaxChipY());
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset0.addValue((-167), 1111, 1649);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset1.setMaxChipX(2351);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(2351, waferMapDataset1.getMaxChipX());
      assertEquals(138, waferMapDataset1.getMaxChipY());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = waferMapDataset1.isMinValue(1.0);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(2351, waferMapDataset1.getMaxChipX());
      assertEquals(138, waferMapDataset1.getMaxChipY());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertTrue(boolean0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(138, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotNull(set0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset0.setMaxChipY(29);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(29, waferMapDataset0.getMaxChipY());
      assertEquals(665, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, double0, 0.01);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(0, 0, 1.0);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset1.setChipSpace(2244.599616522672);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(0, waferMapDataset1.getMaxChipX());
      assertEquals(0, waferMapDataset1.getMaxChipY());
      assertEquals(2244.599616522672, waferMapDataset1.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, double0, 0.01);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) 1.0, (Comparable) comparable0, (Comparable) comparable0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-1), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3541), 1403);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3541), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1403, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3541), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1403, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, double0, 0.01);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(1403, 1403, 1.0);
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1403, waferMapDataset1.getMaxChipX());
      assertEquals(1403, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-3541), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1403, waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = waferMapDataset1.isMaxValue(1.0);
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(1403, waferMapDataset1.getMaxChipX());
      assertEquals(1403, waferMapDataset1.getMaxChipY());
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertTrue(boolean0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2077), 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2077), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2077), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-2077), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals((-2077), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1107;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1107, 1107);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1107, waferMapDataset0.getMaxChipY());
      assertEquals(1107, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getChipValue(1107, 1107);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1107, waferMapDataset0.getMaxChipY());
      assertEquals(1107, waferMapDataset0.getMaxChipX());
      assertNull(number0);
      
      int int1 = 0;
      waferMapDataset0.addValue(0, 1107, 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1107, waferMapDataset0.getMaxChipY());
      assertEquals(1107, waferMapDataset0.getMaxChipX());
      
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1197), 2805, (Number) null);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals((-1197), waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertEquals(2805, waferMapDataset1.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotNull(datasetGroup0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset0.setGroup(datasetGroup0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      waferMapDataset0.fireDatasetChanged();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotNull(set0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = waferMapDataset0.hasListener(eventListener0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(boolean0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = (-986);
      waferMapDataset0.addValue(2805, (-986), (-767));
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Number number0 = waferMapDataset0.getChipValue((Comparable) comparable0, (Comparable) 2805);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNull(number0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1, int1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(int1 == int0);
      
      Double double0 = (Double)waferMapDataset0.getMinValue();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1197), waferMapDataset0.getMaxChipX());
      assertEquals(2805, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(2805.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) null, comparable1, comparable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(972, 972);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(972, waferMapDataset0.getMaxChipY());
      assertEquals(972, waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(972, waferMapDataset0.getMaxChipY());
      assertEquals(972, waferMapDataset0.getMaxChipX());
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-159), (-159));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-159), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-159), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getChipValue(0, 311);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-159), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-159), waferMapDataset0.getMaxChipX());
      assertNull(number0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-159), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-159), waferMapDataset0.getMaxChipX());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2330, 0);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2330, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      double double0 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2330, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(1029, (-920), 1.0);
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      DatasetGroup datasetGroup0 = waferMapDataset1.getGroup();
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(datasetGroup0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset1.setGroup(datasetGroup0);
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset1.addValue((-920), 2330, 6);
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2330, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(1.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = waferMapDataset1.isMinValue(1.0);
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(boolean0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset1.fireDatasetChanged();
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      double double2 = waferMapDataset1.getChipSpace();
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertEquals(1.0, double2, 0.01);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      Set set0 = waferMapDataset1.getUniqueValues();
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(set0);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      Set set1 = waferMapDataset1.getUniqueValues();
      assertEquals((-920), waferMapDataset1.getMaxChipY());
      assertEquals(1029, waferMapDataset1.getMaxChipX());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      assertTrue(set1.equals((Object)set0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 1);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1237), 1979);
      assertEquals((-1237), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1979, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      waferMapDataset0.addValue(1890, 715, 715);
      assertEquals((-1237), waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1979, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-711);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-711));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-711), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertNotNull(waferMapDataset0);
      
      Number number0 = null;
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) null, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1325);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotNull(waferMapDataset0);
      
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.removeChangeListener(datasetChangeListener0);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue(1325, 2852, (-891));
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      waferMapDataset0.addValue(708, 1325, 708);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      DatasetGroup datasetGroup0 = waferMapDataset0.getGroup();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      Set set1 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.equals((Object)set0));
      
      waferMapDataset0.fireDatasetChanged();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325.0, number0);
      assertNotNull(number0);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, int0);
      
      Set set2 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set2.isEmpty());
      assertEquals(2, set2.size());
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number1 = waferMapDataset0.getChipValue(comparable1, comparable1);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNull(number1);
      
      Number number2 = waferMapDataset0.getMinValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(708.0, number2);
      assertNotNull(number2);
      assertFalse(number2.equals((Object)number0));
      
      Number number3 = waferMapDataset0.getChipValue(2852, (-891));
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325, number3);
      assertNotNull(number3);
      assertFalse(number3.equals((Object)int0));
      
      waferMapDataset0.validateObject();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      
      int int1 = waferMapDataset0.getUniqueValueCount();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      Number number4 = waferMapDataset0.getMinValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(708.0, number4);
      assertNotNull(number4);
      assertFalse(number4.equals((Object)number0));
      
      Number number5 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325.0, number5);
      assertNotNull(number5);
      assertFalse(number5.equals((Object)number4));
      assertFalse(number5.equals((Object)number2));
      
      Set set3 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, set3.size());
      assertFalse(set3.isEmpty());
      assertNotSame(set3, set2);
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotNull(set3);
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      
      Set set4 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(set4.isEmpty());
      assertEquals(2, set4.size());
      assertNotSame(set4, set2);
      assertNotSame(set4, set1);
      assertNotSame(set4, set3);
      assertNotSame(set4, set0);
      assertNotNull(set4);
      assertTrue(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set1));
      
      Number number6 = waferMapDataset0.getMaxValue();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1325.0, number6);
      assertNotNull(number6);
      assertFalse(number6.equals((Object)number2));
      assertFalse(number6.equals((Object)number4));
      
      Set set5 = waferMapDataset0.getUniqueValues();
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1325, waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2, set5.size());
      assertFalse(set5.isEmpty());
      assertNotSame(set5, set1);
      assertNotSame(set5, set2);
      assertNotSame(set5, set3);
      assertNotSame(set5, set0);
      assertNotSame(set5, set4);
      assertNotNull(set5);
      assertTrue(set5.equals((Object)set4));
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set1));
      assertTrue(set5.equals((Object)set3));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNotNull(waferMapDataset0);
      
      Number number0 = waferMapDataset0.getChipValue(0, 1240);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNull(number0);
      
      waferMapDataset0.addValue((-674), (-894), (-894));
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      
      waferMapDataset0.setMaxChipY((-894));
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      waferMapDataset0.validateObject();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1, int0);
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) 1.0, (Comparable) comparable0, (Comparable) comparable0);
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      
      int int1 = waferMapDataset0.getMaxChipX();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = waferMapDataset0.getMaxChipY();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-894), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double2 = waferMapDataset0.getChipSpace();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      int int3 = waferMapDataset0.getMaxChipY();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals((-894), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      double double3 = waferMapDataset0.getChipSpace();
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      boolean boolean0 = waferMapDataset0.isMaxValue(1.0);
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertFalse(boolean0);
      
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Number number1 = waferMapDataset0.getChipValue((Comparable) (-894), (Comparable) comparable1);
      assertEquals((-894), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertTrue(waferMapDataset0.getNotify());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2004, (-1195));
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertNotNull(waferMapDataset0);
      
      WaferMapDataset waferMapDataset1 = (WaferMapDataset)waferMapDataset0.clone();
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(1.0, waferMapDataset1.getChipSpace(), 0.01);
      assertTrue(waferMapDataset1.getNotify());
      assertEquals((-1195), waferMapDataset1.getMaxChipY());
      assertEquals(2004, waferMapDataset1.getMaxChipX());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset1, waferMapDataset0);
      assertNotNull(waferMapDataset1);
      assertFalse(waferMapDataset1.equals((Object)waferMapDataset0));
      
      waferMapDataset0.setChipSpace(2004);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      Double double0 = (Double)waferMapDataset0.getMaxValue();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      
      WaferMapDataset waferMapDataset2 = (WaferMapDataset)waferMapDataset0.clone();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertEquals(2004.0, waferMapDataset2.getChipSpace(), 0.01);
      assertEquals((-1195), waferMapDataset2.getMaxChipY());
      assertEquals(2004, waferMapDataset2.getMaxChipX());
      assertTrue(waferMapDataset2.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertNotSame(waferMapDataset2, waferMapDataset0);
      assertNotSame(waferMapDataset2, waferMapDataset1);
      assertNotNull(waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset2.equals((Object)waferMapDataset0));
      assertFalse(waferMapDataset2.equals((Object)waferMapDataset1));
      
      double double1 = waferMapDataset0.getChipSpace();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(2004.0, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) double0, (Comparable) comparable0, (Comparable) comparable0);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.validateObject();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertTrue(waferMapDataset0.getNotify());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      waferMapDataset0.setNotify(false);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Double double2 = (Double)waferMapDataset0.getMinValue();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double2, 0.01);
      assertNotNull(double2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      waferMapDataset0.addValue(0, 2004, 2004);
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Double double3 = (Double)waferMapDataset0.getMaxValue();
      assertEquals(2004.0, waferMapDataset0.getChipSpace(), 0.01);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      waferMapDataset0.setChipSpace(0.0);
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Double double4 = (Double)waferMapDataset0.getMinValue();
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double4, 0.01);
      assertNotNull(double4);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      
      double double5 = waferMapDataset0.getChipSpace();
      assertFalse(waferMapDataset0.getNotify());
      assertEquals(2004, waferMapDataset0.getMaxChipX());
      assertEquals((-1195), waferMapDataset0.getMaxChipY());
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01);
      assertNotSame(waferMapDataset0, waferMapDataset1);
      assertNotSame(waferMapDataset0, waferMapDataset2);
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset1));
      assertFalse(waferMapDataset0.equals((Object)waferMapDataset2));
      
      Comparable<Object> comparable2 = null;
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) double3, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      waferMapDataset0.getChipSpace();
      waferMapDataset0.getChipSpace();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.setValue(1.0, 0, comparable0);
      WaferMapDataset waferMapDataset1 = new WaferMapDataset((-1509), 0, 1.0);
      assertEquals(0, waferMapDataset1.getMaxChipY());
      
      waferMapDataset1.setMaxChipY((-1509));
      waferMapDataset0.getChipSpace();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset1.setValue(1.0, comparable1, comparable1);
      waferMapDataset1.getMaxValue();
      waferMapDataset0.getChipValue(0, 2504);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      waferMapDataset0.setNotify(false);
      double double0 = waferMapDataset0.getChipSpace();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      waferMapDataset0.addValue((Number) 1.0, (Comparable) comparable0, (Comparable) comparable0);
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(0, int0);
      
      Double double1 = (Double)waferMapDataset0.getMinValue();
      waferMapDataset0.getChipValue((Comparable) double1, (Comparable) double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(1, set0.size());
      assertEquals(0, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1964, 1964);
      waferMapDataset0.setMaxChipX((-767));
      waferMapDataset0.getChipSpace();
      assertEquals((-767), waferMapDataset0.getMaxChipX());
      
      WaferMapDataset waferMapDataset1 = new WaferMapDataset(1964, 1964, 1.0);
      assertEquals(1964, waferMapDataset1.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1886, 0);
      assertEquals(1886, waferMapDataset0.getMaxChipX());
      
      waferMapDataset0.setMaxChipX(0);
      waferMapDataset0.getChipSpace();
      WaferMapDataset waferMapDataset1 = new WaferMapDataset((-1), 0, 1.0);
      waferMapDataset1.getChipSpace();
      WaferMapDataset waferMapDataset2 = new WaferMapDataset(0, 0, 1.0);
      assertEquals(1.0, waferMapDataset2.getChipSpace(), 0.01);
  }
}
