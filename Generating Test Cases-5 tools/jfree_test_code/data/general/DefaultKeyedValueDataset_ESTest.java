/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 05:23:12 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EventListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.KeyedValue;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValueDataset_ESTest extends DefaultKeyedValueDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(comparable0, (Number) null);
      defaultKeyedValueDataset0.hashCode();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(comparable0, 1);
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset1.addChangeListener(datasetChangeListener0);
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset1.notifyListeners(datasetChangeEvent0);
      Comparable comparable1 = defaultKeyedValueDataset0.getKey();
      DefaultKeyedValueDataset defaultKeyedValueDataset2 = new DefaultKeyedValueDataset(defaultKeyedValueDataset1);
      defaultKeyedValueDataset2.setNotify(false);
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset2);
      assertFalse(boolean0);
      
      defaultKeyedValueDataset1.setValue(comparable1, (Number) null);
      defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      Comparable comparable2 = defaultKeyedValueDataset0.getKey();
      defaultKeyedValueDataset1.equals(comparable2);
      defaultKeyedValueDataset0.getValue();
      defaultKeyedValueDataset0.clone();
      defaultKeyedValueDataset2.updateValue((Number) null);
      defaultKeyedValueDataset2.clone();
      defaultKeyedValueDataset0.getKey();
      assertTrue(defaultKeyedValueDataset0.equals((Object)defaultKeyedValueDataset1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
      defaultKeyedValueDataset0.hashCode();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(0, 0);
      defaultKeyedValueDataset1.clone();
      boolean boolean0 = false;
      Comparable<Object> comparable0 = null;
      defaultKeyedValueDataset0.clone();
      defaultKeyedValueDataset0.hashCode();
      defaultKeyedValueDataset1.updateValue(0);
      defaultKeyedValueDataset0.hashCode();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset1.setValue((Comparable) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
      DatasetChangeEvent datasetChangeEvent0 = mock(DatasetChangeEvent.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset0.notifyListeners(datasetChangeEvent0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = null;
      try {
        defaultKeyedValueDataset1 = new DefaultKeyedValueDataset((Comparable) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = (DefaultKeyedValueDataset)defaultKeyedValueDataset0.clone();
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertNotSame(defaultKeyedValueDataset1, defaultKeyedValueDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValueDataset defaultKeyedValueDataset2 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      DefaultKeyedValueDataset defaultKeyedValueDataset3 = (DefaultKeyedValueDataset)defaultKeyedValueDataset2.clone();
      defaultKeyedValueDataset3.equals(defaultKeyedValueDataset2);
      DefaultKeyedValueDataset defaultKeyedValueDataset4 = (DefaultKeyedValueDataset)defaultKeyedValueDataset2.clone();
      defaultKeyedValueDataset4.fireDatasetChanged();
      assertTrue(defaultKeyedValueDataset2.equals((Object)defaultKeyedValueDataset0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset2.setValue(comparable0, (Number) null);
      defaultKeyedValueDataset1.getValue();
      defaultKeyedValueDataset1.getValue();
      assertFalse(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.getKey();
      defaultKeyedValueDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset0.clone();
      defaultKeyedValueDataset0.addChangeListener(datasetChangeListener0);
      defaultKeyedValueDataset0.fireDatasetChanged();
      DatasetGroup datasetGroup0 = defaultKeyedValueDataset0.getGroup();
      defaultKeyedValueDataset0.getValue();
      defaultKeyedValueDataset0.setGroup(datasetGroup0);
      defaultKeyedValueDataset0.equals((Object) null);
      defaultKeyedValueDataset0.getValue();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      defaultKeyedValueDataset1.hashCode();
      DefaultKeyedValueDataset defaultKeyedValueDataset2 = new DefaultKeyedValueDataset(comparable0, 2);
      DatasetChangeListener datasetChangeListener0 = null;
      defaultKeyedValueDataset2.removeChangeListener((DatasetChangeListener) null);
      defaultKeyedValueDataset0.clone();
      Number number0 = null;
      defaultKeyedValueDataset1.fireDatasetChanged();
      defaultKeyedValueDataset2.clone();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset1.updateValue((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset((KeyedValue) null);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultKeyedValueDataset0.hashCode();
      defaultKeyedValueDataset0.setValue(comparable0, 0);
      Object object0 = defaultKeyedValueDataset0.clone();
      boolean boolean0 = defaultKeyedValueDataset0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultKeyedValueDataset0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("h", "h").when(comparable0).toString();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(comparable0, 0);
      DefaultKeyedValueDataset defaultKeyedValueDataset2 = new DefaultKeyedValueDataset(defaultKeyedValueDataset1);
      defaultKeyedValueDataset2.hashCode();
      defaultKeyedValueDataset2.updateValue(5);
      DefaultKeyedValueDataset defaultKeyedValueDataset3 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      Object object0 = defaultKeyedValueDataset2.clone();
      defaultKeyedValueDataset1.equals(object0);
      defaultKeyedValueDataset0.equals(defaultKeyedValueDataset3);
      defaultKeyedValueDataset0.getKey();
      defaultKeyedValueDataset0.hashCode();
      Object object1 = defaultKeyedValueDataset1.clone();
      assertFalse(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset2));
      assertTrue(object1.equals((Object)defaultKeyedValueDataset1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
      defaultKeyedValueDataset0.clone();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset1.hashCode();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<DefaultKeyedValueDataset> comparable0 = (Comparable<DefaultKeyedValueDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.notifyListeners((DatasetChangeEvent) null);
      EventListener eventListener0 = mock(EventListener.class, new ViolatedAssumptionAnswer());
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable1).toString();
      defaultKeyedValueDataset0.hashCode();
      defaultKeyedValueDataset0.hashCode();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(0, 0);
      defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      defaultKeyedValueDataset0.hashCode();
      DefaultKeyedValueDataset defaultKeyedValueDataset2 = new DefaultKeyedValueDataset(comparable1, 0);
      Number number0 = defaultKeyedValueDataset1.getValue();
      defaultKeyedValueDataset2.hashCode();
      defaultKeyedValueDataset0.setValue(comparable1, 6);
      defaultKeyedValueDataset0.hasListener(eventListener0);
      defaultKeyedValueDataset1.getValue();
      defaultKeyedValueDataset0.hashCode();
      defaultKeyedValueDataset0.fireDatasetChanged();
      DefaultKeyedValueDataset defaultKeyedValueDataset3 = new DefaultKeyedValueDataset(comparable0, 9);
      Number number1 = defaultKeyedValueDataset3.getValue();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset0.setValue(comparable2, number1);
      defaultKeyedValueDataset1.clone();
      Comparable comparable3 = defaultKeyedValueDataset1.getKey();
      defaultKeyedValueDataset3.equals(number1);
      defaultKeyedValueDataset3.updateValue(number1);
      defaultKeyedValueDataset2.hashCode();
      defaultKeyedValueDataset0.equals(defaultKeyedValueDataset3);
      boolean boolean0 = defaultKeyedValueDataset2.equals("]g");
      assertFalse(boolean0);
      
      defaultKeyedValueDataset3.setValue(comparable3, number1);
      defaultKeyedValueDataset3.getKey();
      defaultKeyedValueDataset1.updateValue(number1);
      assertTrue(defaultKeyedValueDataset1.equals((Object)defaultKeyedValueDataset3));
      
      defaultKeyedValueDataset3.updateValue(number0);
      defaultKeyedValueDataset1.getValue();
      defaultKeyedValueDataset2.getKey();
      defaultKeyedValueDataset2.getKey();
      Object object0 = defaultKeyedValueDataset1.clone();
      assertFalse(object0.equals((Object)defaultKeyedValueDataset0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.equals(defaultKeyedValueDataset0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      defaultKeyedValueDataset1.clone();
      DatasetChangeListener datasetChangeListener0 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset0.removeChangeListener(datasetChangeListener0);
      DatasetChangeListener datasetChangeListener1 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset1.addChangeListener(datasetChangeListener1);
      DatasetChangeListener datasetChangeListener2 = mock(DatasetChangeListener.class, new ViolatedAssumptionAnswer());
      defaultKeyedValueDataset1.hashCode();
      defaultKeyedValueDataset1.getValue();
      defaultKeyedValueDataset1.setNotify(true);
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }
}
