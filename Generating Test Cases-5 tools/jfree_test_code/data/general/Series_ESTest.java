/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 06:55:49 GMT 2023
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.ComparableObjectSeries;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.SeriesChangeListener;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Series_ESTest extends Series_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.setNotify(false);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      String string0 = comparableObjectSeries0.getDescription();
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertNull(string0);
      
      boolean boolean0 = comparableObjectSeries0.getNotify();
      assertFalse(boolean0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      int int0 = comparableObjectSeries0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      boolean boolean1 = comparableObjectSeries0.getNotify();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((Comparable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("", "key").when(comparable0).toString();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotNull(comparableObjectSeries0);
      
      boolean boolean0 = comparableObjectSeries0.getAutoSort();
      assertTrue(boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      comparableObjectSeries1.setDescription(")");
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(")", comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      boolean boolean1 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertFalse(boolean1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(boolean1 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(")", comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries2 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries2.getDescription());
      assertTrue(comparableObjectSeries2.getNotify());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotNull(comparableObjectSeries2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removePropertyChangeListener(propertyChangeListener0);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      comparableObjectSeries0.setMaximumItemCount(11);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(11, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addPropertyChangeListener(propertyChangeListener1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(11, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      boolean boolean2 = comparableObjectSeries0.isEmpty();
      assertTrue(boolean2);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(11, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<MatrixSeriesCollection> comparable0 = (Comparable<MatrixSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.setDescription("p|Y");
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("p|Y", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      boolean boolean0 = comparableObjectSeries0.equals("p|Y");
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("p|Y", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("p|Y", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.fireSeriesChanged();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("p|Y", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      String string0 = comparableObjectSeries0.getDescription();
      assertEquals("p|Y", string0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("p|Y", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(string0);
      
      String string1 = comparableObjectSeries0.getDescription();
      assertEquals("p|Y", string1);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("p|Y", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<DefaultWindDataset> comparable0 = (Comparable<DefaultWindDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      boolean boolean0 = false;
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNotNull(comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      comparableObjectSeries1.setKey("");
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      boolean boolean1 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertFalse(boolean1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(boolean1 == boolean0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((Comparable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotNull(comparableObjectSeries0);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addChangeListener(seriesChangeListener0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      Comparable<TimePeriodValuesCollection> comparable1 = (Comparable<TimePeriodValuesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.fireSeriesChanged();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotNull(comparableObjectSeries0);
      
      boolean boolean0 = comparableObjectSeries0.getAutoSort();
      assertTrue(boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      boolean boolean1 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(boolean1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(boolean1 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries2 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertNull(comparableObjectSeries2.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertTrue(comparableObjectSeries2.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removePropertyChangeListener(propertyChangeListener0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      comparableObjectSeries0.setMaximumItemCount(11);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(11, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addPropertyChangeListener(propertyChangeListener1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(11, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      boolean boolean2 = comparableObjectSeries0.isEmpty();
      assertTrue(boolean2);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(11, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<DefaultXYDataset> comparable0 = (Comparable<DefaultXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotNull(comparableObjectSeries0);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      String string0 = comparableObjectSeries0.getDescription();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(string0);
      
      comparableObjectSeries0.setDescription("");
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals("", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      comparableObjectSeries0.removeChangeListener(seriesChangeListener0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals("", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      
      String string1 = comparableObjectSeries0.getDescription();
      assertEquals("", string1);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals("", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotNull(string1);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      SeriesChangeListener seriesChangeListener1 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNotNull(comparableObjectSeries0);
      
      Comparable<DefaultHighLowDataset> comparable1 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.clear();
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      boolean boolean0 = comparableObjectSeries0.getNotify();
      assertTrue(boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      boolean boolean1 = comparableObjectSeries0.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      boolean boolean2 = comparableObjectSeries0.getAllowDuplicateXValues();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<DefaultHighLowDataset> comparable0 = (Comparable<DefaultHighLowDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotNull(comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertEquals(0, int0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeVetoableChangeListener(vetoableChangeListener0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.setDescription("wI:)VK");
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      VetoableChangeListener vetoableChangeListener1 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addVetoableChangeListener(vetoableChangeListener1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      boolean boolean0 = comparableObjectSeries0.getAutoSort();
      assertTrue(boolean0);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      SeriesChangeListener seriesChangeListener1 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addChangeListener(seriesChangeListener1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      comparableObjectSeries0.clear();
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      String string0 = comparableObjectSeries0.getDescription();
      assertEquals("wI:)VK", string0);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotNull(string0);
      
      ComparableObjectSeries comparableObjectSeries2 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertEquals("wI:)VK", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertTrue(comparableObjectSeries2.getAutoSort());
      assertTrue(comparableObjectSeries2.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries2.getNotify());
      assertEquals("wI:)VK", comparableObjectSeries2.getDescription());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotNull(comparableObjectSeries2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertNotNull(comparableObjectSeries0);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeChangeListener(seriesChangeListener0);
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      
      Comparable comparable1 = comparableObjectSeries0.getKey();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertNotNull(comparable1);
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      
      Comparable<TimeSeriesTableModel> comparable2 = (Comparable<TimeSeriesTableModel>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<DefaultWindDataset> comparable0 = (Comparable<DefaultWindDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNotNull(comparableObjectSeries0);
      
      Comparable<TimeSeriesCollection> comparable1 = null;
      // Undeclared exception!
      try { 
        comparableObjectSeries0.setKey((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.setNotify(false);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      
      String string0 = comparableObjectSeries0.getDescription();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getNotify());
      assertNull(string0);
      
      ComparableObjectSeries comparableObjectSeries1 = null;
      try {
        comparableObjectSeries1 = new ComparableObjectSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<HistogramDataset> comparable0 = (Comparable<HistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.setMaximumItemCount(0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getNotify());
      
      Comparable<XYSeriesCollection> comparable1 = (Comparable<XYSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<DefaultOHLCDataset> comparable0 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotNull(comparableObjectSeries0);
      
      boolean boolean0 = comparableObjectSeries0.isEmpty();
      assertTrue(boolean0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeChangeListener(seriesChangeListener0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = (Comparable<DefaultBoxAndWhiskerXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.addVetoableChangeListener((VetoableChangeListener) null);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      String string0 = comparableObjectSeries0.getDescription();
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(string0);
      
      ComparableObjectSeries comparableObjectSeries1 = null;
      try {
        comparableObjectSeries1 = new ComparableObjectSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotNull(comparableObjectSeries0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeVetoableChangeListener(vetoableChangeListener0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      comparableObjectSeries0.addPropertyChangeListener(propertyChangeListener0);
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertTrue(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      Comparable<CategoryTableXYDataset> comparable1 = (Comparable<CategoryTableXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<VectorSeriesCollection> comparable0 = (Comparable<VectorSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.setDescription("OAoEuQw5:k8GL[5[BIO");
      assertEquals("OAoEuQw5:k8GL[5[BIO", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.setNotify(true);
      assertEquals("OAoEuQw5:k8GL[5[BIO", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      Comparable<XIntervalSeriesCollection> comparable1 = (Comparable<XIntervalSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.setKey("OAoEuQw5:k8GL[5[BIO");
      assertEquals("OAoEuQw5:k8GL[5[BIO", comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparable<TimePeriodValuesCollection> comparable0 = (Comparable<TimePeriodValuesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNotNull(comparableObjectSeries0);
      
      Comparable<JDBCXYDataset> comparable1 = (Comparable<JDBCXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      int int0 = (-200);
      // Undeclared exception!
      try { 
        comparableObjectSeries0.setKey((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparable<DefaultOHLCDataset> comparable0 = (Comparable<DefaultOHLCDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotNull(comparableObjectSeries0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addPropertyChangeListener(propertyChangeListener0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      
      Comparable<SimpleHistogramDataset> comparable1 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<VectorSeriesCollection> comparable0 = (Comparable<VectorSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.hashCode();
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((-2146069927));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparable<DefaultIntervalXYDataset> comparable0 = (Comparable<DefaultIntervalXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotNull(comparableObjectSeries0);
      
      Comparable<XYTaskDataset> comparable1 = (Comparable<XYTaskDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.fireSeriesChanged();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      comparableObjectSeries0.addChangeListener(seriesChangeListener0);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      
      String string0 = comparableObjectSeries0.getDescription();
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.indexOf((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<DefaultWindDataset> comparable0 = (Comparable<DefaultWindDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      boolean boolean0 = false;
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      boolean boolean1 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(boolean1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(boolean1 == boolean0);
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertNull(comparableObjectSeries1.getDescription());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((Comparable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      assertNotNull(comparableObjectSeries0);
      
      Comparable<CategoryTableXYDataset> comparable1 = (Comparable<CategoryTableXYDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeChangeListener(seriesChangeListener0);
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getNotify());
      
      Comparable<TaskSeriesCollection> comparable2 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparable<VectorSeriesCollection> comparable0 = (Comparable<VectorSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertNull(comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertNotNull(comparableObjectSeries0);
      
      comparableObjectSeries0.setDescription("OAEuLw5:k8Vp[5[BIO");
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("OAEuLw5:k8Vp[5[BIO", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      comparableObjectSeries0.setNotify(true);
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("OAEuLw5:k8Vp[5[BIO", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      Comparable<XIntervalSeriesCollection> comparable1 = (Comparable<XIntervalSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.setKey("OAEuLw5:k8Vp[5[BIO");
      assertTrue(comparableObjectSeries0.getNotify());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals("OAEuLw5:k8Vp[5[BIO", comparableObjectSeries0.getDescription());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparable<DefaultWindDataset> comparable0 = (Comparable<DefaultWindDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      boolean boolean0 = true;
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, false);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotNull(comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      comparableObjectSeries1.setKey("");
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      boolean boolean1 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertFalse(boolean1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertFalse(boolean1 == boolean0);
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertTrue(comparableObjectSeries1.getAutoSort());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertTrue(comparableObjectSeries1.getNotify());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.chart.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, true, true);
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertTrue(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertTrue(comparableObjectSeries0.getNotify());
      assertTrue(comparableObjectSeries0.getAutoSort());
      assertNotNull(comparableObjectSeries0);
      
      Comparable<XYIntervalSeriesCollection> comparable1 = (Comparable<XYIntervalSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparable<DefaultWindDataset> comparable0 = (Comparable<DefaultWindDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("j(c", "yLm4q:-(elPde]kz$").when(comparable0).toString();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotNull(comparableObjectSeries0);
      
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries1);
      
      ComparableObjectSeries comparableObjectSeries2 = (ComparableObjectSeries)comparableObjectSeries1.clone();
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries2.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertNull(comparableObjectSeries2.getDescription());
      assertEquals(0, comparableObjectSeries2.getItemCount());
      assertFalse(comparableObjectSeries2.getAutoSort());
      assertTrue(comparableObjectSeries2.getNotify());
      assertFalse(comparableObjectSeries2.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries2.getMaximumItemCount());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries2, comparableObjectSeries0);
      assertNotNull(comparableObjectSeries2);
      
      boolean boolean0 = comparableObjectSeries0.equals(comparableObjectSeries1);
      assertTrue(boolean0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries1.equals((Object)comparableObjectSeries0));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries1.getMaximumItemCount());
      assertEquals(0, comparableObjectSeries1.getItemCount());
      assertFalse(comparableObjectSeries1.getAutoSort());
      assertFalse(comparableObjectSeries1.getAllowDuplicateXValues());
      assertTrue(comparableObjectSeries1.getNotify());
      assertNull(comparableObjectSeries1.getDescription());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries1, comparableObjectSeries0);
      
      SeriesChangeListener seriesChangeListener0 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addPropertyChangeListener(propertyChangeListener0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      boolean boolean1 = comparableObjectSeries0.getAllowDuplicateXValues();
      assertFalse(boolean1);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertFalse(boolean1 == boolean0);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      boolean boolean2 = comparableObjectSeries0.isEmpty();
      assertTrue(boolean2);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      SeriesChangeListener seriesChangeListener1 = mock(SeriesChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addVetoableChangeListener(vetoableChangeListener0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      int int0 = comparableObjectSeries0.getItemCount();
      assertEquals(0, int0);
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertTrue(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      comparableObjectSeries0.setKey("yLm4q:-(elPde]kz$");
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      VetoableChangeListener vetoableChangeListener1 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removeVetoableChangeListener(vetoableChangeListener1);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      
      String string0 = comparableObjectSeries0.getDescription();
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
      assertNull(string0);
      
      comparableObjectSeries0.setMaximumItemCount(0);
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries2));
      assertFalse(comparableObjectSeries0.equals((Object)comparableObjectSeries1));
      assertTrue(comparableObjectSeries0.getNotify());
      assertNull(comparableObjectSeries0.getDescription());
      assertEquals(0, comparableObjectSeries0.getItemCount());
      assertEquals(0, comparableObjectSeries0.getMaximumItemCount());
      assertFalse(comparableObjectSeries0.getAutoSort());
      assertFalse(comparableObjectSeries0.getAllowDuplicateXValues());
      assertNotSame(comparableObjectSeries0, comparableObjectSeries2);
      assertNotSame(comparableObjectSeries0, comparableObjectSeries1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparable<SimpleHistogramDataset> comparable0 = (Comparable<SimpleHistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("XI]!\"8r,:^3W-K", "XI]!\"8r,:^3W-K").when(comparable0).toString();
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      comparableObjectSeries0.getAutoSort();
      ComparableObjectSeries comparableObjectSeries1 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      comparableObjectSeries0.equals(comparableObjectSeries1);
      ComparableObjectSeries comparableObjectSeries2 = (ComparableObjectSeries)comparableObjectSeries0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removePropertyChangeListener(propertyChangeListener0);
      comparableObjectSeries0.setMaximumItemCount(11);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.addPropertyChangeListener(propertyChangeListener1);
      comparableObjectSeries0.isEmpty();
      comparableObjectSeries2.equals(".~ae+P");
      comparableObjectSeries1.setKey(".~ae+P");
      comparableObjectSeries2.hashCode();
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove("XI]!\"8r,:^3W-K");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparable<TaskSeriesCollection> comparable0 = (Comparable<TaskSeriesCollection>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0);
      Comparable<HistogramDataset> comparable1 = (Comparable<HistogramDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparableObjectSeries0.remove(comparable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparable<DefaultIntervalCategoryDataset> comparable0 = (Comparable<DefaultIntervalCategoryDataset>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectSeries comparableObjectSeries0 = new ComparableObjectSeries(comparable0, false, false);
      assertTrue(comparableObjectSeries0.getNotify());
      
      comparableObjectSeries0.setNotify(false);
      comparableObjectSeries0.getNotify();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      comparableObjectSeries0.removePropertyChangeListener(propertyChangeListener0);
      comparableObjectSeries0.hashCode();
      comparableObjectSeries0.clear();
      assertFalse(comparableObjectSeries0.getNotify());
  }
}
